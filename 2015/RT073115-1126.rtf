{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;}
\margl2160\margr1440\vieww12000\viewh15840\viewkind0
\deftab720
\pard\pardeftab720\li576\ri1873\sl528

\f0\fs26 \cf0 We're honored that this is the conference he decided to go to Europe for. Satoshi Tagomoti, or Amori for short, as we were chatting for the speaker dinner. Will be talking about using JRuby for data processing testing, and he'll have two Open Source software products how they use JRuby and another really exciting thing you'll be, I think talking a bit about the\'a0\uc0\u8209 \u8209  in Japan, yeah, so I think that's pretty interesting, looking forward to hearing more about this. So, yeah, thank you, and I'll happened it the floor to you (Applause)\
\pard\pardeftab720\li576\ri1873\sl528
\cf0 \
>> Thanks for a great introduction. And described an abstract form\'a0\uc0\u8209 \u8209  so, now let's get started.  I am Satoshi Tagomoti and I came if Tokyo Japan. And I understand\'a0\u8209 \u8209  some software like\'a0\u8209 \u8209  the project and the research project. And now I am mentor of message back Ruby project. Message back Ruby gem is now Ruby and implementation in one gem. And recent\'a0\u8209 \u8209  my most recent contribution is Docker logging driver, which\'a0\u8209 \u8209  transfer Docker into the\'a0\u8209 \u8209  process. And it will be\'a0\u8209 \u8209  in Docker version 1.8. My day job is\'a0\u8209 \u8209  working for treasure data Inc, which is a data process software company for data processing service. And. And I'm working at the\'a0\u8209 \u8209  branch. Our. \'a0\u8209 \u8209  okay. Data processing world. In data processing world it's dominated by him. Actually\'a0\u8209 \u8209  Java also . This is also software like hive, pig, drill, they have all have very curious characters. All most all of these are written in Java and some other languages and\'a0\u8209 \u8209  like Scala\'a0\u8209 \u8209  or in C plus plus. But (C + +) the why these softwares in Java is this software requires have many courses and large\'a0\u8209 \u8209  CP cores and lodge memory. The high data processing for\'a0\u8209 \u8209  JVM has many good features and improvements. And we also must provide the transparency for\'a0\u8209 \u8209  HDFS APIs that is very, that is required for by almost all data processing users and system programmers. That is why we must use Java JVM languages and for data processing software. So, now, I will talk about two OSS software using Java and JRuby. Norika originally written by me and Embulk is originally written by\'a0\u8209 \u8209  who is also message back. And the chief architect of treasure leader. Now Norikra is an Open Source software between JRuby and JVM and process under GPL V 2. It's also distributed on Ruby gem. And you can\'a0\u8209 \u8209  Norika\'a0\u8209 \u8209  if you are using JRuby. What is Norika?  It provides feature to process Sql like this, but this has very little extension to express the data window. Data window size by win and underscore batch 10. This SQL proprocesses this SQL for each data like this. If you put fast data and\'a0\u8209 \u8209  status by\'a0\u8209 \u8209  pass on\'a0\u8209 \u8209  bytes. If this data has status equal\'a0\u8209 \u8209  another data line and this data has different path from\'a0\u8209 \u8209  so this SQL updates\'a0\u8209 \u8209  by other\'a0\u8209 \u8209  with other record. And then this the sum data in status 404, so this\'a0\u8209 \u8209  just ignore this data. And Da, Da, Da, Da, so test data. When test data arrives\'a0\u8209 \u8209  this internal status into out data, by the three records ordered by sum of bytes. So, this is an almost all Norika tagsings. Very simple, but very powerful (Task) because if we want\'a0\u8209 \u8209  if you want to process in the streaming data, data and\'a0\u8209 \u8209  stream and now we must write the Storm application or any other customized application, but we can write the process by SQL. So, any way. And Norika is written in JRuby using the Java library using Esper, and why\'a0\u8209 \u8209  why I love Norikra\'a0\u8209 \u8209  the most important point is productivity because\'a0\u8209 \u8209  not so much time for when I require the subsystem, so I use JRuby not Java\'a0\u8209 \u8209  and Esper is a Java library and provides complex event processing. And the feature for Esper\'a0\u8209 \u8209  SQL parser and executer. This is Open Source software, and this is\'a0\u8209 \u8209  that is the reason why\'a0\u8209 \u8209  license for GPL V 2. So any way the primary feature\'a0\u8209 \u8209  Ruby gems. Packaged and released as Ruby gem and\'a0\u8209 \u8209  system is for UDF\'a0\u8209 \u8209  with Norika we can have user defined functions, and user\'a0\u8209 \u8209  any of the function whatever you want and add it into the\'a0\u8209 \u8209  we can install in that gem, the UDF, we can publish the gem into Ruby gem or\'a0\u8209 \u8209  by gem ... UDF will be loaded into the Java library Esper\'a0\u8209 \u8209  and we can write in these UDF call in Java or JRuby and JRuby code is compiled in Java\'a0\u8209 \u8209  it will be written in JRuby. Also\'a0\u8209 \u8209  it is also can be installed by ...\
>> Okay, Embulk is an Open Source data\'a0\uc0\u8209 \u8209  power updater\'a0\u8209 \u8209  and Open Sourced software\'a0\u8209 \u8209  Apache license 2, distributed as a boss to jar organize or Ruby gems. Plug\u8209 Ins are I did tributed on Ruby gems.org. (Distributed) almost input and out put are described\'a0\u8209 \u8209  written in\'a0\u8209 \u8209  and many other features are provided by Plug\u8209 Ins, but 'em bulk provides very powerful feature like power execution or data validation, error recovery, or Idempotet retrying\'a0\u8209 \u8209  implement or ensure by Plug\u8209 Ins that is really why Embulk has these core features. We can add any other Plug\u8209 Ins for input and out put. And the filters\'a0\u8209 \u8209  if you want to\'a0\u8209 \u8209  if we want to add other data source or data submission to our Embulk system, you can have one plug\u8209 in to add support for software or distributed systems or services whatever you want. This also features are provided by Plug\u8209 Ins, and input plug\u8209 in and out put plug infrastructures\'a0\u8209 \u8209  and the encoder for\'a0\u8209 \u8209  or any other\'a0\u8209 \u8209  compression\'a0\u8209 \u8209  the encoder is for compression or description or any others. Plug\u8209 in is for\'a0\u8209 \u8209  CSV or JSON or many other formats. And filter Plug\u8209 Ins if we want to\'a0\u8209 \u8209  if you add a filter plug\u8209 in\'a0\u8209 \u8209  and you can\'a0\u8209 \u8209  the Plug\u8209 Ins. Executor plug\u8209 in is very highly connected to Emburk if you want\'a0\u8209 \u8209  there's\'a0\u8209 \u8209  only executor plug\u8209 in to execute this\'a0\u8209 \u8209  executes these whole process on distributed systems. Okay, and Embulk and Java. Emburk is written in Java. Original author is kind of\'a0\u8209 \u8209  freak, I cannot say anything against him so he says that I will write! Embulk in Java! And I can only say Ah, okay, understood. And that's all. Embalk plug\u8209 in is loaded over API based on JRuby. And Plug\u8209 Ins at first almost Embalk plug\u8209  ins are written in JRuby. Now some kind of Plug\u8209 Ins features were updated and these are supposed to\'a0\u8209 \u8209  these supposed to write Plug\u8209 Ins in Java. And you can, you can chose which\'a0\u8209 \u8209  which language you write the plug\u8209 in. This is input plug\u8209 in in JRuby. And this is very short and simple. If you want to add new data source or designation you should write just this code and very special and simple code. Any way. Plug\u8209 in management\'a0\u8209 \u8209  Embulk and Norika. Esper is written in Java\'a0\u8209 \u8209 \'a0\u8209 \u8209  plug\u8209 in management written within JRuby all of these parts are written in JRuby\'a0\u8209 \u8209  UDF writing in both Java and JRuby. And Embulk is almost is written in Java but plug\u8209 in management system layer is written in Java and JRuby. And all the plug\u8209  ins\'a0\u8209 \u8209  using JRuby. The plug\u8209 insystems which many users, many users, and many plug\u8209 in author want to write Plug\u8209 Ins which many plug\u8209 in author and users want to write ask to write in JRuby. Plug\u8209 in filler,\'a0\u8209 \u8209  the encoder is highly\'a0\u8209 \u8209  not so many users want to write such Plug\u8209 Ins because there are not so many compression algorithms or encryption methods with out\'a0\u8209 \u8209  open S SR ... so it is only supported\'a0\u8209 \u8209  it is\'a0\u8209 \u8209  the Plug\u8209 Ins are supported only Java. And\'a0\u8209 \u8209  any way. The plugble systems on JVM and Java, of course we have options to write like Java, Scala or Clojure and including, of course, JRuby. We want to have well designed system. The jar, the solve dependency of jar\u8209 file and Java packages is real nightmare. Maybe\'a0\u8209 \u8209  Maven central is not so goodies tribute especially for plug\u8209 in author. Registering is a bit hard rather than registering into the Ruby gem.org. So that is the reason why we are choosing JRuby on Java software and to make well designed plug\u8209 insystem. And plug\u8209 in\'a0\u8209 \u8209  systems. And plug\u8209 in loader we can use a class loader using JRuby. The class loader, using class loader is also discussed and\'a0\u8209 \u8209  for me, for me and normal programmer. And we are using just required to write new Ruby Code and Java code wrapped by JRuby code. It's very simple and understandable for almost all of pug inauthor, including me\'a0\u8209 \u8209  plug\u8209 in author including me. JRuby in Japan. There's not so many users. The country for\'a0\u8209 \u8209  Japan is a country which the mass living\'a0\u8209 \u8209  CR Ruby is super major software in Japan.  I have our JRuby co\u8209 worker in tremendous sure data, so there is\'a0\u8209 \u8209  the treasure is very good environment to write JRuby, but, in fact, tremendous sure data hub are too\'a0\u8209 \u8209 \'a0\u8209 \u8209  so that is the thing and where\'a0\u8209 \u8209  this is the thing and I can see everywhere in Japan. And many programmers, Open Source software used Java but they transport to write Ruby\'a0\u8209 \u8209  but now they are liking Scala or Golang.  I don't\'a0\u8209 \u8209  these are not so bad.  I don't write in these languages, this is not so bad. JRuby is not so major in Japan. Some developers in Ruby community are starting to use JRuby and so I am expecting that JRuby will get more use\'a0\u8209 \u8209  this is the conclusion. So please make your software plugble and\'a0\u8209 \u8209  by making your software plugble makes every system and community around that Open Source software\'a0\u8209 \u8209  I think JRuby is the best solution to do that. Thank you very much. (Applause)\
>> Thanks so much, Satoshi Satoshi. So, thank you all for\'a0\uc0\u8209 \u8209  coming back, I'm going to introduce you to our next speaker.  I met him earlier this week at my Ruby learning group. And he was fresh off the plane at that point, so he had a lot of patients and looking at him and speaking German to him. Yeah, we got to discuss his project\'a0\u8209 \u8209  Open Source project choose. And we got talking about his daughter Cors who\'a0\u8209 \u8209  Cora who is considered the youngest contributor to the project. She has a bright future ahead of her. So, yeah, I think we talked a lot about his amazing talk\'a0\u8209 \u8209  Ruby in 2014,if you haven't seen that yet, you should. You can look it up on YouTube. And involves capes, sorry. It's a great talk. Yeah, without further adieu, I think we're just about ready.  I didn't have any good JRuby jokes, I looked them up and there was zero results.\
>> I don't even have any bad one, and that's my specialty as well.\
>> Does anyone have any JRuby jokes?  Yeah, okay. Well, we're going to get our shoes back on. There you go.\
>> It's almost like you know. Thanks, Jason, take it away (Applause)\
>> Jason:  Hello everyone. So, as she said my name is Jason, I work for New Relic, until recently on the Ruby agent, which might have been solved if you ever used that product. But I'm here today to talk mostly about shoes. So what is shoes?  Shoes is a G UI library built in Ruby so you can write desktop applications and runs across platforms on Linux, Mac and Windows. This library was originally written called why\'a0\uc0\u8209 \u8209  those who have been in the Ruby community for a listening time may remember, even some of you haven't been may have heard of this guy. He's an eneggmatic character, did a lot ofier I can things and wrote a lot of interesting libraries and slews was the largest project he built. As many of you know (shoes) as many of you may have noticed why disappeared, he chose to take himself off of the internet, take all of his code away and left. And a lot of people probably thought at that point in time that would end, that shoes was done. He was gone, this is finished. It's not actually the case. That's part of what I'm here to talk to you about today is to show you where shoes is at, talk to you about the community that's built around it in his absence after that. And show you how it works and then peel back a little bit and show you the internals and a little bit how you can contribute, today shoes is written entirely if Ruby. If you're a Rubyist, you can access the stuff, you can contribute, you can give back. But one of the key things about Why part of his presence in the Ruby community he was a very weird character. If you look at his book it's like no other book I've ever seen, it's crazy and off the wall.  I thought it seems like I have to put something into this presentation that's a little weird. Okay. This is not my personality, entirely, I am not that sort of character, but it put me in mind of a situation that I had at university. So I have a friend, Mike Larson who in my software engineering class he came up with this concept that he called the learning chicken. And any time that he felt like the professor had made really good point he would balk like a chicken.  I kid you not, he actually did this.  I don't know why this came to me, but I thought I would try to integrate it. At any point in this presentation when we hit a major conclusion, you learn something. (Chicken sounds) all right. So the learning chicken is available. If you feel like you've learned something, I'll bring it up a few times, feel free to call up, give me a chicken, and I will give you a chicken during this presentation. So, moving back to the topic at hand.  I think probably the best way demonstrate and let you know what shoes is about is to show you what shoes can do and what the code looks like. Let's do a couple of demos. A lot of the things that happens in shoes drive around games and fun little applications. So here we have a minesweeper clone, so let's see if we can click some things. Well! I suck at minesweeper, I probably should of practices that.\
>> Give me a chicken\
(Chicken) other sorts of games, here's a snake game, I'm also really bad at this one (Laughing) give you some sort of idea how this will work. Not everything in shoes is not necessarily a game, here's a clock. There's a lot of basic drawing prismtives you can draw out of. Even further this presentation is being run on a little framework that Toby and I have worked on called wing tips. (Chicken) if you want to write your presentations in code but you don't want to write JavaScript because there's lots of things for doing that if you want to write in Ruby there's a presentation in shoes. Hopefully you can see the result and think it's awesome. The biggest application, the key point of why built shoe in the first place was a program called hackty hack. A kids code editor to help get children programming .\
this is the thing that I've done with my daughter Caroline, small plug for you to go check it out.  I have never live demoed code, but my five\uc0\u8209 year\u8209 old daughter has at a conference, it's a good way to do that. You should check it out if you want to learn more about programming with children and see some of what we built out of it. But, let's take a look at the ecosystem that developed after Why left. So the original shoes was written with native bindings and C, and it worked across all of these things, different people fragmented off there. We had a version called green shoes, a QT version, SWT, HTML versions of it. implemented DSL, a cough free script version, so many different versions of shoes. Sort of fractured off from here, and all of them too the DSL that Why had created and provided it with a different back end and flavor of how to implement that. So eventually after a lot of exper Minnesotaation,e the community came around and gathered to decide where to go as a project. That was the birth of shoes 4. The architecture behind shoes 4 takes that fragmentation into account. And one of the big pieces of it is that it built a separate DSL layer, which is the common things about how you express issues program, how you write the primitives, what things are supported and separated from the GUI back end that drives it with the expectation that different people would want different back ends. We had to chose one to start our implementation, that was built on JRuby. A lot of Rubyists, when hearing this go ... isn't that a lot of Java?! Why would I want to do that?  But it has been a fantastic platform for what we're trying to accomplish. One of the JVM's great strength is cross platform nature. So SWT is a G U I library built in with the JVM, how do I draw this on windows so it looks right and how so it looks correct on a Mac or Linux. A lot of that is hidden behind this layer that this JVM provides for us. JVM with the shoes project to simply write Ruby on top of that and gain all of that cross platform support that we want. We want anybody one on any computer to be able to write a shoes program, and write things that they can interact with immediately. All right, so, that's a lot of talk and introduction of what shoes is. Let's take a look at the code for it. So, one of the most basic shoes program you can come up you say shoes App, do, and give it a block and that is your shoes program. It provides you with methods in the D.L where you can create different elements, we'll go through a bunch of what those are. Since this is a shoes App here we can run this code and that's what it looks like. Pretty impressive, I know, that seems like chicken material to me. But, seriously, if you've done G U I programming in a lot of other settings, it probably looked a lot more like this to get to a hello world.  I don't know about you which would you rather type or which of those would you want to sit down with a kid and try to get them to do something fun with their computer?  Well, I think answer is letty obvious. Obviously, just putting text on the screen is awesome, you might want some interaction   we have buttons that you can do. Great. There's text editing. All the basics. Of hello. And these programs, I mean, look at that and it's just really clear. It's really concise, and it's easy for someone, even someone who is new to programming to understand what's going on and what these pieces are going to do. One of the big issues that you run into if you do any sort of G U I programming is layout as well.  I know I definitely struggled with, you know, building a window and positioning all the things and giving everything coordinates for exactly where it should be. You you can do it with shoes, but it also provides you these powerful abstractions that we call stacks and flows for being able to build a little bit more responsive layout for things, if we put a bunch of banners inside a tack, just a large piece of text, when we run the stack, it looks like this. So each element goes on to essentially a new line. It positions it below the prior element. With a flow, the elements will flow up until the point that we run out of space on the window, so if we resize, do you can see that it flows, you know, to the next line. So between those two things, which can be nested together you can build very complicated U Is without having to specify a lot of really detailed about what it's positioned. All right. So that's great but I don't know a kid that really wants to sit there and build a bunch of text boxes and buttons, it's fun for a little bit, but drawing pictures is really where it gets interesting for a lot of different programming interested people. Let's take a look. A rectangle, give the coordinates and width and some of the options, colors and strokes and different aspects of how to draw it. Now this is also a good point for me with beginning programmers or with children that these coordinates this is a really powerful way to talk about math. The positioning of where things are, the relative size of those elements, looking at it interactively and changing those numbers and watching how those things work is a great way to do basic arithmetic and make t tactile for them in a way that plain numbers aren'tful we have ovls, stars, arbitrary shapes. You probably don't recognize this, but this is (Chicken) the red portion of the chicken cone described as a shape. Goes together. And here is what Sarah alluded to, my daughters first Open Source contribution was this sample application we did together. And it looks like this. So you can see this is a really powerful thing to work with a kid to draw because what we did is we Satoshi down and said we want to draw a face. How would you draw that, what are the pieces, how can we decompos this problem into separate steps that we know how to do Mr.\'a0The programming language and then instruct the computer about how to do it. There's all sorts of other things, there's sound, animation, there's widgets that you can build to wrap things together. There's a lot of different pieces that shoes lets you do things. We're all Rubyist, we're all programmers, by and large, and one of the things that I loved about shoes is that you have access to the code and as a Rubyist you can get into this library and contribute another 67 stamp with what's going on. This is in large part thanks to an excellent gem from Dan Lucraft that wraps it right out of Java, it gives us a Rubyist way for creating G U I. The shoes project has a nice clean separation between the core parts of our DSL, the parts that would remain the same in shoes regardless of what G U I back end and the pieces provide that U I to draw it. So what we're going to do here is let's step through an example and we're going to trace it from the shoes application that we draw all the way down to where we interact with those primitives that SWT provides with us. You'll see the shape of how shoes program works and learn to find where those pieces are if you want to dig in and do something yourself. So here we have a progress bar, which is one of the primitives that's supported by shoes, we do an animation so it sets the fraction, so you can see it in demo here, fills on up, and then we're good to go. So that progress function that we have right there is implemented in a file called DSL.rb within shoes and we can see here that it has a shoes progress class and it's going to create an instance of this, shoes like most Ruby is very object oriented everything we represent here is going to have an object\
's a sort of DSL level class for the project. Let's take a look at the project. Call U I L have some styling, it has some attribute readers. The G U I is the one that's the most important to us, that's where we stitch together the DSL layer, which is agnostic to how it's going to get drawn and the G U I is the object that represents how that's going to get to screen, that's our SWT object. Then we have style, with that defines the object. When we create one of these progress objects we do a little bit of set up, but this line in particular is the important one, so we talk to our configurations and then we ask generically to get the back end for this object. So that's where the magic happens of us being able to plug\uc0\u8209 in a different G I and have this D S L interact with some other library. The DSL layer then provides little access sores for various things that we need to push through, when you change the fraction on it, from your shoes application, this is where it pushes that through and actually sets the value that it needs to over on the back end. So we've talked a lot about this back end object, what is it actually, you can see we have a different\'a0\u8209 \u8209  name space, progress, and then we're getting down to creating some of those real G U I primitives SWT provides a native tool bar we set that and you can see that the values that it takes a different, it goes from zero to a hundred rather than a float for the fractional value. When we set the fraction we actually need to do a bit of math, check whether the G U I elements exposed there are concerns with how we interact with that G U I library, we only deal with them here, the DSL layer, nice clean layer of shoes get to be unaware that all of these details are going on under the surface for it. So, one thank's very difficult in a lot of Gment I programming in my experience is testing, but shoes actually allows you pretty easily to test things because everything is represented as objects. So here we have a fairly standard RSpec implementation, our testing our DSL logic, so we check here that the communication between the DSL and the Gment I back end happens the way that we expect, when we set fraction we expect it's going to get forwarded on to that other object. By having those teased apart it gives us a really clean way to check that the DSL behaves the way we want to, and has the contract to the back end we want. Similarly the back end can get tested the same way, it's interactions with back end with it's actual implementation in the SWT library can be marked and stubbed and tested with all the good practices that we already use in Ruby.  I don't know about you being able to test G U I stuff, that's a chicken moment for me. It's awesome to be able to do that. All right, so that's a lot of how shoes works, all of the different elements that you see on the screen will be structured like that. Let's talk about actually getting involved. Shoes is a very special project to me, it's the first place where I really deeply got into an Open Source project. And here's kind of where it started, so at work I can just implement guard on one of our projects, I thought it was pretty cool, I looked at hackty hack with my daughter and started looking at the GitHub Repos that was behind it I noticed an issue and I thought oh, that seems like it's easy to do, maybe I'll get out there. Put that in got a lot of good feedback and people were very friendly and it kind of took off in for me. So shoes is a very open project for people to get involved with. We have a newcomer friendly tag on our issues and the people that are on the project are really eager to help people at any level get involved with it. There are things\'a0\u8209 \u8209  everything from write of samples to documentation, all the way up to some pretty gnarlly deep stuff, if you want to get involved, do you can do I so I hope you would consider, if you're wanting to get into Open Source and maybe you've been intimidated to find place or haven't found the right project, you know, you might give it a try. Thank you (Applause) one more chicken for the road.\
>> We have five minutes for questions, if you want to take some. Yeah, questions.\
>> I was wondering how many back ends shoes has \uc0\u8209 \u8209 \
>> So currently there is the one primary SWT based one. There is an experimental Atom using the Atom Shell and OPAL back in to one of the other contributors has made and there's a QT one as well. I wasn't actually aware of that. So, find out something new.\
>> You mentioned that SWT comes with the JVM, but actually AWT and sweet comes with the JVM and\'a0\uc0\u8209 \u8209  digital library I was wondering why did you opt to use third party library instead of sweet.\
>> The question was why we opted to use SWT, which is actually a third party library rather than Swing, which is built in, and to be honest, I was not on the project when that decision was made, so I don't know quite what details went into that decision.\
>> Tobi:  SWT has the native language it looks like UNIX and OSX where Swing and AWT look kind of Javaish. At the time we reached out to JRuby community and people were friendly and helped us and at the end we reached the conclusion to go with SWT the native feel was important us.\
>> There's a look and feel for Swing\'a0\uc0\u8209 \u8209  and using\'a0\u8209 \u8209  components as well. This is a common misconception, but ...\
>> Does shoes support the more advance features of SWT like J face and RCP application?\
>> So the question was whether shoes supports some of the more advanced features from SWT.  I don't think it does the particular things that you mentioned. But it certainly could. All requests are welcome. Any other questions?  All right, thank you. (Applause)\
>> Yes, so, we're nearing lunch break. Buff before that we're going to have one last short talk we have PJ on stage here who I heard is a Harku master. Sorry, was I not supposed to expose you?  I think there might even be some Ruby Karol Ruby stuff going on sometime this weekend. Yeah. And he'll talk to us about Mirah. Yeah, I'll just let you give the introduction to this thank you.\
>> ( applause so, hi I'm PJ, so what is Mirah?  You're familiar with JRuby, Mirah is kind along the same thing. When you hear the idea about it's kind of a more palatable lessen terrorize way of getting involved in Java if you know Ruby. Mirah, I've been told, had a goal at one point of replacing Java, I doubt that's going to happen. There's still a lot of work to be done before it's even competitive. Java is everywhere. It's in all the code you've seen at some point in time in your life you've touched Java,   oh rings many people have literally done Java\'a0\uc0\u8209 \u8209  yeah, we all know what it is. So, in short, Mirah is an attempt to create blazingly fast Ruby\u8209 like language that can be come biled with Java. So what is Mirah. It's not Ruby. You can say Mirah is Ruby with static types but the fact is that Mirah is Ruby\u8209 like and not actually Ruby. It doesn't share Ruby's type system, classes, standard libraries. Really any or most of the things that we think makes up Ruby and the Ruby ecosystem. It's more like a Ruby syntax browser. It takes the Ruby syntax brings it into the JVM tool chain and compiles for maximum performance (I know I'm going fast but I have ten minutes and I had a lot of club Mate and I'm holding you back from lunch. The main difference here is the approach, mara is super lightweight no Runtime library, that maximizes performance. When it comes to performance, kind of Mirah wins. If you do performance test on Ita\'fa BBA seems like it's really fast\'a0\u8209 \u8209  it also has limited capabilities on what it can do thus far. The idea was it was built for performance. That said, JRuby is so much more mature than Mirah. It's why\'a0\u8209 \u8209  there's a huge community, there's a lot of support for it. Mirah is kind of a fledgling language. It's been around for a while, but it still, you know, just getting off and starting to run with itself. So where did it come from. So there is some dude ... I don't know, I guess he's from like Minnesota or something, he made this thing called Duby, which is a strange name, not sure where that came from. Around 2009 Charley wanted to do a Ruby like language, subset of Ruby syntax that can compile\'a0\u8209 \u8209  the word Mirah,which came along later is actually a Javanese word so the people who live in Java they word for the gem stone Ruby is Mirah, that's how the name switched from Duby\'a0\u8209 \u8209  which again is a questionable word, I think we see what they did there. Today it's maintained by nick Howard as a lot of people know as Baroquebobkat people are using it to test out ideas to see how far they can push and go. Like many projects it's looking for people to use it, fix issues and contribute. And, let me just add, like the wonderous feelings you get when you contribute to an Open Source project like Mirah. It's good to take something that, I can maybe use this in small project and maybe build it into a larger project and lodge larrize some things you start to deal wit, I see this little problem you do this, you take the pain point and bring it to where you need to fix it that makes the language better together. So Open Source, cent. I'm going to say that about 80 times (Contribute) so if you\'a0\u8209 \u8209  I've been having a few keynote issues. Because Mirah is essentially a Compiler, it ships with no standard library. The idea is that users will chose what libraries they want, kind of Al will cart, they'll write the Plug\u8209 Ins to support what they need. The Compiler will take care of the rest. And that was an explicit design, that was the whole idea, why build lots of things, think Rails for a second, why build lots of things you maybe need when you can build a few things and take the pieces that you need if you have to. \'a0\u8209 \u8209  back end target\'a0\u8209 \u8209  developer provertizes and provides. On the JVM type system is mostly Java, so type declarations refer to JVM classes. So, why Ruby and Java. So, as you know, as a Rubyist Ruby was developed to bring joy to developers, no one has ever said that about Java (Laughing) ever. But it's super powerful. And it allows you to do things that make you feel fulfilled, maybe not happy, but fulfilled. You're solving problems, getting jobs done. If we take the thing that make coders feel happy and what makes them feel fulfilled we get a hybrid that is the best of both worlds you're now fulfilled and happy. It's like the peanut butter cusp of the coding world. If you're alleging to peanuts, it's out there, I can't take it back, I'm sorry. At this point it's important to know where Mirah is at. At this point, Mirah is on version, when I left home 06.0.14. Still in the beginning stages of development. Start in the 2009. Yes, it's 2015, in's a dip, they did some JRuby something, something, kind of got put by the wayside, but, you know, it's still something that's active people are getting more involved. Part of the reason I got into Mirah I work at engine yard and I'm on the community team we look at a lot of Open Source projects to sponsor and what have you. We were running low on Blog posts boss said, here's what you're going to do Ruby guy, find out what the most contributed Repository is this week. It was like, Mirah, Mirah, Mirah. And I was like, oh, this is interesting because I've never heard of this thing before, I dove in, wrote a Blog post, generated more interest, and it was really cool the see something that could have easily died out, but is actually a great piece of code, great way to program that, you know, luckily started to see the light of day again. So let's talk about some guiding principles, going really fast, wow! So according to the Mirah site, Mirah.org. It's based on a few guiding principles, no Runtime library, this means no jar\u8209 files, dependencies can be decided by the developer per project, the way bundlerrer keeps Ruby gems siloed. It helps you handle that. Kind of the way RVM helps you keeping\'a0\u8209 \u8209  strictly for per project. It has a clean and simple syntax. Syntax similar to JVM system but borrowing heavily from Ruby. There's meta\u8209 programming and macros so built in tools so at compile time you get the feel of a Dynamic Language while still in a compiled language. No performance penalty. "because Mirah directly targets the JVM types system and\'a0\u8209 \u8209  koa it performs exactly as well as Java" quoted directly from the site. Take that for what it's worth. It's neither a positive or negative attribution, just one of the guiding principles in dedevelopping the language. There's also design principles, platform agnostic, meaning that it roughly, roughly similar scripts could conceivably compiles\'a0\u8209 \u8209  Runtimes it's a rough coupling of the Ruby\u8209 like syntax with a plugble compilation pipeline. Mirah has no run time dependency other than directly from the Mirah code. It will depend exactly on what you build into it. it's theliale cart idea. No current JVM language addresses towards the aesthetic goals without producing a Runtime library which can be prohibitive based on size. So some general rules. Compiler chain Plug\u8209 Ins will be written in Ruby. That's kind of moving forward, looking toward it is future. There's no specific reason that they couldn't be written directly in Mirah for Mirah at later date once it matures a little bit. The syntax is largely Ruby inspired. See that in a few minutes when I show examples. And to that extent like the current mara application starts with AST application from JRuby AST. There's a lot of bow rowing going on\'a0\u8209 \u8209  borrowing going on. Type system is purely symbolic:  Compiler mapping to appropriate representations. All right. So primary elements what goes into Mirah. The parser is based on the JRuby parser that produces a Ruby abstract syntax tree or AST then it goes to the transformer and the transformer job is to take the Ruby AST and convert it to a Mirah specific AST, then the type inferrer decorates with the appropriate typing information for the target back end which you set up, the back end code generator compiles the code. So sounds pretty simple. How do we start?  This is always, by the way, something that I noticed in a lot of talks people skip, let's get started look at code, let's install something, because you have to get there first. So of getting any language the biggest hurdle is getting started. With Mirah the author and the maintainers have given the opportunity to find our own way by offering a few methods, there's a lot of methods, which is great. Outlined on Mirah dolt organize and the GitHub project. Regardless of what method you use you're go need to have JRuby 1.7 or higher.  I think prior to 0.0.12 you could havelesser version, you now need 1.7 or higher or it's not going to happen. Once you have everything in place, I did it using the general method that I use doing every Ruby project.  I use RVM, for those of you that know me for a while, I was the RVM patient zero, I worked with again Sagwin, he installed RVM on my computer while I was in the bathroom and broke everything (Laughing) which was great. Yeah. Sorry. I'm having a flash back. So, yeah, RVM install JRuby, then grab the latest version of JRuby, of course RVM used JRuby. That's installed, if you leer looking for JRuby 9,000 it wasn't available when I prepared this talk. It is now. After JRuby rube is installed, then you just simply install Mirah as a gem. If you're more familiar with Ruby than JRuby or Java that is the easiest way to do I ten fifteen minutes tops, you can barely get your coffee and it's done. Then you're ready to roll. We say hello world, because that's what do we with every project. My daughter says it's super, you're saying hello to yourself, hello to yourself and world is dumb. She's 13 she gets angry about programming. You type Mirah\'a0\u8209 \u8209  E put hello world. Boom everything's working. Let's take look at something more complicated. When I was writing the Blog I notice there had was this huge file called examples Rosetta code. What this is, people that wanted to get into Mirah is good way to write some code, they did simple things that other people look and say this is simple, ten, fifteen lines, now have I understand a little bit better how it works. So I wrote a little thing. It's simple, put sign ask me to enter my name, just like Ruby. Following that read line to bring in whatever input comes from that, for verification we spit the name that was entered back with a sentence so people know count the characters including blank spaces, not super useful, not something you really need to do, but a lot of fun and it was a great way, to of kick the tires and say, cool, I kind of get what they're doing here and I kind of enjoy using it. Take a look at the output.  I entered my name, which I notice this conference has completely deleted my last name, that's what it is. You\'a0\u8209 \u8209 \'a0\u8209 \u8209  including space, awesome, really simple, it's\'a0\u8209 \u8209  simple, to the point, there's lots of example, different string manipulation, arithmetic, things like that all in the examples of the row set that code folder. If you want to get into Mirah check it out. What else do people do with Mirah. No one's getting a hundred thousand dollars a year to count people's name. One of the big things that's come out of it, people are using it for Andriod development. There's a lot of open projects using Mirah for Andriod development. There's a lot of people building Plug\u8209 Ins also awesome and we're getting towards more tools and frameworks. Potential uses for Mirah is limited by what the language currently holds, the more we contribute the more probabilities can grow. It's really, in my mind it's really cool because up until a couple years ago if you wanted to do Andriod development and you were a Ruby developer you were basically screwed. Then RubyMotion finally came out, it was kind of cantankerous and chunky, now you don't have to pay for it, here's an Open Source language you can build Andriod apps using native language that is very lightweight. Framework and tools come up. Dubious is the big player as far as frameworks, runs on Google App engines, the way that Rails and Sinatra does for Ruby desk, I guess I should say vanilla Ruby desk. In initiallization costs like with JRuby. Has a simple adepartmenter for data that uses a data map like syntax, not exactly the same but similar. It's important to note like mara dubious is in the early stage, so it's growing. If you're using like Rails one or Rails two back in the day, great, this kind of works good enough, I have a job, yeah. There's also Pindah. It's really cool, tool set specifically for building Andriod apps, does require the Andriod SDK and all of the examples using RVM if you refer that for your version manager, you're ready to go, if you don't, that's cool too. Mirah Nbm\'a0\u8209 \u8209  if you're looking for a specific ID to develop Mirah in, that's awesome. If you don't care about your ID that's awesome too. So what's next is\'a0\u8209 \u8209  the most important thing is that it's an Open Source project. It's still a baby. It's a great chance for you to get in on the ground floor. If you always feel like I really miss the train on JRuby I can't get involved in in Open Source project because it's been going too long and you feel left out, here's your chance. 0.0.4, ground floor start coding. You should get involved in Open Source, great, what can I do, write documentation, write tests, try to build a library. Any little thing you can do, talk about it that's what I'm doing, I submitted code example, when they accepted my pull request every time pull request is accepted I do a happy dance. Anything you can do to get people interested and get them involved makes the language better. Again, there's a lot of potential here to bring the awesome worlds of Java Andrew by together to make that peanut butter club, allergies excepted brings it to a place where you can get more people and give more peanut butter cubs. There's still a lot of road that we have to travel before we get to 1.0, there are people who are using it for production especially with Andriod apps.  I went a little over my time. If you have questions, my name's PG, ask for pins thank you (Applause)\
>> Thank you, we don't have time for questions. Sorry, but you can ask him in the lunch break, which is right now. So, something to note is that ice cream provided by elastic, it's super delicious, have ice cream, lunch and coffee. And we'll see you back here at 2:00 ton dot. Lunch is late unfortunately. Sorry. But go grab your goody bag if you haven't, go grab coffee, ice cream, there might be cake or fruits and then lunch will arrive and we'll set up as quick as possible. }