It always gets me a bit Teary just FYI. Oh there's somebody trying to come in babies. Thank you Anika for giving that talk. It got me a little bit Teary, actually. Well with that we're actually at our, you know, the end of our schedule of speak  s for today. We're going to have a fifteen minute break so what does that bring us in at?  Five minutes past so let's get Joseph "Txus" Bach in at five minutes past and then we'll be doing our lightening talks, and yeah, we'll be setting up for the keynote for eurucamp. So yeah, five past six.


Okay, everyone we're ready to start with the lightning talks now, first up is Flor and Basti, talking about Rossconf ( applause).


Do you want to press. You're pressing, okay, cool. Give me a sign.


I'mging you a sign right now. So, yeah,Rossconf means Ruby Open Source software conference.  I came up with the idea at our camp last year where I was watching at some talks and I always think like this is sort of too short to get into an Open Source project, but I would really want to, and usually conference WiFi is not the best so you cannot really clone the Repository. And I don't know how to get into a project. Like I can look at this issue but it's usually not enough. Um ... ‑‑ nothing, okay, cool.


So I came up with Rossconf which you basically have five maintainers talking about their project for 20 minutes then you make a decision which project you want to work on in the hack a ton afternoon noon part and then you do just that. So we have a limit of 60 people who can attend otherwise it gets too much work for the maintainers, which is too bad. And then they don't get a chance to program with the maintainers. So the Vienna edition which took place in April this year, we had a couple of great maintainers, for instance, Katrina A Michael, and they were very, very excited about the project. We had a couple of cool projects on, so exer schism I. IO, RVM, reek from our beautiful ... slide ‑‑ Diaspora from this unicorn person there. And it was really a ton of fun, they had some nice things to say about this conference as well. So for instance Katrina and Owen had a lot of requests, she was busy merging stuff in, she couldn't even program anymore. And also Papis was very, very happy with the contributions that were made that day. Happy attendees, happy maintainers, really good conference. That means of course we're going to do it again and we're going to do it in Berlin with another set of awesome maintainers with Sachaa, Laura, Andrea another ‑‑ Anja and they are coming with awesome projects, one of them being Ruby itself. Then Panamax which is kind of a platform as a service kind of thing based on Docker and using Ruby and Go to work. Bundler which you all use, Andrew by object mapper and speakerinnen which you heard about before from Anika ‑‑ Laura. Okay. And we couldn't do it without an awesome team. And this also includes Laura, she's everywhere, Sarah as well. Floor and Erin and Tosha, and everything. And, also conference always needs sponsors and we got great help from Travic CI, code ship, and if your company would like to sponsor us as well and help us get Rails Girls Berlin going, then talk to us. And there's, of course, going to be a lot more happening in Rossconf we're planning to build an organizer kit which you can use to make your on Rossconf in your own town and invite speak  s and Open Source projects to start hacking on an Open Source project get them into the project and I said too many time projects, Huh?  (Laughing) and we have a site Rosscnnf.Io and you can sign up to get updates ‑‑ R Rossconf.IO, and it's free, as in Open Source. So, join. Join. Have fun (Applause). Of ...


Charles, Tom, next.


Yeah, love to come.


Okay, next lightening talk, multidimensional data analysis with JRuby by@rsm.


Hi, I'm Ramos ‑‑ ‑‑ Raimonds, I'm going to Rsim on Twitter and GitHub. So, most of ‑‑ work with relational data model where we store our data in our applications so let's imagine typical sales application where we have customers, making orders, orders contain order items which contain products and we classify these products by product classes so the model is good for storing individual transactions and doing individual transactions, but when we got analytical queries on top of the data, for example CEO asked what were the total sales amounts in California in Q 1 by product families. If we're Rails programmers, we try to do everything using A row method so it gets quite complicated even if we look at the SQL or write the SQL by hand, it might get quite complex to do analytical queries so these are add hock queries that users are asking us all the time. And so we once tried to ‑‑ launch the Rails console and teach our business users so it's quite easy to write this data queries, and, but unfortunately we failed. So, what we can do, well, we ask some consultants they suggested you should use noSQL, because SQL is bad for, that maybe we can just look into the history, that's some 20 years ago so there were some books about that, about data warehouses and data modeling. And what was suggested what is this dimensional modeling, when we look at these analytical questions that our business users ask, and we try to identify the data model out of that, typically in these questions we have some facts or measures we would like to analyze like sales amount or quantity or etc., and we want to analyze these measures by some dimensions by customers or regions by time, by products. And we should use this die mentional ‑‑ these I did mentions and measures when we're building our data structures and data query and so ‑‑ we store our data, we organize what we store our data in the database in data warehouses using these star scheme and then with foreign keys link these dimension tables. But, so when we want the query the data we probably don't want to limit us to this two‑dimensional table model, and much better data model is this multidimensional data model. We have this multiI did mentional data cue by all these different dimensions and the intersection of these dimensions we store these measure values like in ‑‑ an example we have sales data queue, our customers product, time, dimension and we have these measures like sales quantity, sales amounts, costs etc.. And in each dimension we have also a different hire area, for example, by the Geography, city, state, countries, etc.. And there are technologies which handle these multi‑dimensional data models well, these are called OLAP, on‑line analytical processing technologies and one of the Open Source project is Mondrian Pentaho ‑‑ which is Java library when I found it out, some four years ago I created a Mondrian Olap gem which wraps this Java library and provides with some additional good things, also ‑‑ (One minute 20 go) ‑‑


So, to avoid writing XML schemes we can do in Ruby DSL then when the business users ask these business questions, so, we get very short and concise DSL for writing these queries which generate corresponding MDX query statements which processes by Mondrian engine which retrieves the data in multidimensional data, so results caching so that when you reSteve the same query multitimes it gets in memory cache so it doesn't do SQL queries all the time you get calculation formulas, which I'll skip. Yeah, and there, so, we use this underlying technology which enables you to make some nice user front ends which we do in ‑‑ (Applause).


Thank you.  ‑‑ if you want to see more there was talk on the Rails conference. Thank you very muchment great. Questions afterwards. The revolution in system programming by TXUS, for those that don't know is good bior Bye.
>>


Now if you were at eurucamp last year you might think you've already seen this talk, but you haven't. So I'm go ‑‑ what I'm going to talk about came out earlier this year, so you're mistaken. So it's a new language that came out a few months ago, it's imperative. For a change like all this new functional language that just ridiculous. This guy made it. Pretty active guy in the community. People don't see him around that much, but he's actually coding. So, this is how it looks. It's pretty concise. Most of you will be a nil yarr with it if you've done Java, it's easy to learn, like don't worry about I. It's super minimal, it's not bloated at all this is the minimum program you can write in sum Compilers. It's also very modular, it has a modular system. it's called a C S processor. You can include other modules so you can have your application separate in different files. Very cool, very clean. It's practical, none of this has cell bull shit, right to the point. It even has type inference (Haskel) if you put a string it knows that it's a string and with the numbers it knows that it's numbers. That's quite smart. It's also very expressive. You can practically do whatever you want (Laughing) it's pretty nice as well, it's a bit unsafe. But it gives you a lot of freedom (Laughing) freedom! Applause) well, if you've done any Java ‑‑ but this language is if you could type it, it probably compiles. (Laughing) that's even better. It also has Runtime polymorism with void star, pretty nice. So you can have a function that takes different arguments of different types. It also supports great concurrency. Forget about all this like new concurrency models. Threads they work great. No problem.Less awe sport efficient memory management (Also supports efficient memory management. So you just free your references. That works well. It's really fast. Really fast. But not as in fast food, bad for you, but more like really fast and quick. And it has a vibrant community, you really can't beat that. Look at all this. All this is in just a few months all this software. What it doesn't have it doesn't need. So we don't accept pull requests they say from all these people trying to implement things no. It's very fast, did I say that already?  It's really fast, really fast! And that's all you need to know, thank you (Applause).


Cool, final talk. Who's the angry Saxon. With that first something wrapping ‑‑ something, something, Java library for fun and profit. What's that first one 05 what is it?  ... or. Okay, angry Saxon or wrapping a Java library for fun or profit. Who doesn't want to make profit?


So, of I have a confession to make.  I like X M L (Laughing) so I made 24 web site which is a biographical, a biology gray if I of German designers of the 20th century that stay in the the country during the period of third Reich ‑‑ one of the world's most reI nouned topology gray fors and historian of Taiping ‑‑ Typogografy. This is a word document, itself had about 500,000 words in it. But of course it's just X M L, just X M L, so we can use Nokogiri to do stuff with it. But, have you seen word XML it's kind of this ‑‑ if you ‑‑ has anyone written in XSLT right who's done Munchon grouping, this is hike‑a‑thonnic munch and ‑‑ XML from word documents, you need XMLT 2 because it makes it easy. In's no 2 in Nokogiri, lib XML or Sirc in Java, there's only one Open Source XLT 2 processor. It's called Saxonic ‑‑ Saxon, the guy who makes it is super nice. Have you seen the Java API for XML processing. So the real question is:  Faced with the situation like this, do you write horrible code or do you try to did something about it. If you don't like it you can make it work like the thing that you do like. So I set out to make a gem. Which wraps Saxon processing and makes it look like Nokogiri. And that is basically I think it was so easy after I spent a bit of time getting my head around JRuby and around the Java interfaces I could knock something basically together in a weekend. There's all these things that is super interesting and powerful that are really hard to use, but actually you can turn them into something that is Ruby‑like pretty straightforwardly. Things to remember, put gem platform Java in your general spec so people don't try to start?  C Ruby and wonder why it doesn't work. Vendor the Jacob have Lib in your gem so ‑‑ it just works. But the real thing is that you need to put extra work into nail the API because you want the make something that allows people to write Idiomatic Ruby not just to shim around a complex Java interface. And this took me a little while, but I've got something that works just like Nakogiri, you wouldn't know, copy and paste code, just works. That's it. Thank you very much. That's me, I'm going now (Applause).


Well, with that, that's basically it from us MCs and we're going to hand back over to Toby and Luca to close out JRuby.


Not JRuby, of course, the conference. As I hope this conference has shown you. If you didn't already know.


It's good. Well, I think, well, first thank you all for showing up, I think that's actually the next slide, but, we've been amazed by number of talks that were submitted this year. How many of you showed up, we could of sold even more tickets, it was amaze, so thank you all, first for being here. And oh, I think there's a couple more things, so let me ‑‑


This is the first slide that's like five minutes ‑‑ okay. So,thank you.


Thank you. And also couple of special thanks before we go to sponsors, I want to hear a round of of applause for Kimberly who's doing the live thank (Applause).


Thank you! !


I think really long applause (Laughing).


So it's also an effort for diversity like we tried to be a very accessible conference us, together with eurucamp so that's super important. And of course in the same manner, thanks to Cindy from who's doing all the video recording, thank you very much. ‑‑ from Comfreaks. (Applause).


As a result, the videos will be on‑line in a couple of weeks and not the usual eurucamp, right before the next conference (Laughing) so ... Shhh ... okay.  ‑‑ you want inspiration ‑‑ I want to see this, yes. Also hit me with inspiration. Thanks to our sponsors, as said before the conference would not have been possible elastic made a huge effort. Also provided like all the beautiful ice cream that I've seen you've already eaten very well, good job, there's more tomorrow. Tomorrow at 1800 make sure your empty it before them. Travis CI, coffee, Heroku. Rabobank, please give them a round of applause as well places.
So what's happening next, oh, how late are we ‑‑ it's fine. So we'll have an hour. Actually it's kind of a lie the keynote doesn't start at 7:30, we would like to see you for the introduction, the keynote starts at 7:45. It will be presented by Joanne who you may have seen before, she was there at the beginning, but I guess she's now starting to work on her presentation. It's about time. (Laughing) that's what she does. So, after that ‑‑ so we'll explain the same ten times I think. There but there'll be a party not so far from here. We talked about it this morning if you were awoke soon enough it'll be around 7:30. It's kind of opened, I guess, I don't know when we close. (It's around 8:30).


Tomorrow at 9:30.  I guess that's the quickest way we just party until ‑‑ so tomorrow it starts at 9:30. You can be there a bit earlier, I think we'll be there at 8:30 or something, 8:00 yeah right. We have a to. We'll be providing coffee before and a couple of cakes and fruits.  I did order the fruits, I notice you didn't eat them. If you don't like these snacks just tell me, I won't order them again. No, but we have plenty of fruit, don't hesitate if you see there's only one Banana on the table we have thousands of ban that that's hidden. So like please take care of yourself guys and ladies. So that's about it for our schedule I'll put the map again so that you see because the keynote is going to happen in the haul 5. Which is on the other side of the reception desk.  I haven't been there myself, so I have no clue, I think it's quite obvious there's only one door after the reception desk. So I am trusting you to find it otherwise you can ask everybody except for me, because I haven't been there (Laughing) of while they are ‑‑ oh, yeah. That's how we are going to go there for those of you that weren't there this morning.  I guess we'll be some kind of march yeah, if it's not too army related.  I don't know, we'll all go there together after the keynote. It will be easier for everybody. You don't want to get lost in the city, it's really in the middle of nowhere. So pay attention, maybe have a guide or buddy or something like this. That would be it.  I think. I was really really happy to organize this year. We sold out that's really great, that was the first time, makes me so happy. Thank you all, you've been great crowd.


Also thanks again to all our great speakers.  I know there weren't a ‑‑ there was a lot of efforts into these presentation, especially one presentation, I received an e‑mail two months ago, hey, it's a lot of work to put in ‑‑ can can the co‑worker ‑‑ can someone help me, I know there was a lot of work into each and every one of the presentations, so thank you speakers, thank you a lot (Applause) so yeah that's now really it. Thank you very much, grab coffee ice cream and see you at the keynote.

Friday eurucamp keynote speaker 2015. Joann Cheng. ... ... ...



  ... ... ...  ... ... ... ... ... ... ...


...


...


...


...


...


...
>>


Hello! Shhhhhhh ...


Hey everyone welcome to today we had a nice conference ande coming up we have a eurucamp today and the next two days and a will the of other activities around Ruby week. And we hope that you're having fun today and will continue to have fun over the next two days. We hope you had a great trip coming to Berlin and we're glad that you found your way from Berlin to Potsdam. You swill fun in the like tomorrow, the sun will be there and everything will be really really awesome. And we hope that if you have any questions or want to ask or something just find someone with this shirt, we are all there to help you with everything you need. Something comes up just find us, we're everywhere. (Laughing) it's true. And now it's time for me to hand over to our master of ceremony Floor and Eric ( applause)


I ‑‑ let's just walk down the stairs is what said to Eric, but I feel very euro vision, so that's quite good. Hi, welcome to eurucamp, it's so great to do the opening together. But, also ‑‑ we're going to do a very Risky thing of first doing the whole clapping bit for the sponsors and then all the really important stuff. Big thanks to all the gold sponsors (Applause) then the wonderful silver sponsors (Applause) and the nickel sponsors (Applause) and the wonderful people who bought a supporter ticket. People and companies I must say, thank you. (Applause) and while we we're still talking about sponsors Euruko still needs sponsors if you have a company or left over money somewhere just give it to them, they can put on a great conference with your help. Thank you (Applause)


So a bit of business to take care of. Eurucamp we wanted to be a very safe and welcoming environment to everyone so we have a code of conduct that we ask everyone to follow, we actually require that everyone follow. You can read the entire code of conduct at the web site at the bottom. To give a brief summary basically ask you not to be harassing other people, you're in the allowed to be racist, sexist ableist pretty much any of the‑Ists are not allowed ‑‑


Rubyist.


If you want to be feminist, that's fine. (Laughing)


And yeah, if you experience any sort of harassment or behavior that you think violates the code of conduct. There's a few things you can do, you can find one of our organizers, these great people, they're wearing pink shirts, you saw Bodo wearing earlier. Yeah, it looks like this. actually while we have the slide up a round of applause for all the great organizers. (Applause) just as with the sponsors 2 conference would not be possible without all their hard work. We also ‑‑ we're making this grid and we realized we had one free space so we put in Boogaloo. Oh


(Laughing) so, Boogaloo is actually the dog of Kimberly. And Kimberly is providing an amazing service to us she does speech to text translation, searching I'm saying here you can see showing up on the screen. Applause)


Thank you!


Of of of


She'll be transcribing everything so please try to speak as slowly and clearly as possible, this is an amazing service and we're really lucky to have her back for the second year in a row now, so that's great:  And, yeah, you'll see Boogaloo and Kimberly throughout the conference. If there's a code of conduct violation and you can't find anyone make sure or you just feel like reporting it via some other means that's fine too. So this is ‑‑ an emergency e‑mail address and phone number that you can call. Feel free to report issues code of conduct violations you see or experience. Or if you just need ‑‑ I guess you can use the e‑mail address for that. We also have a guides program this year. A lot of people here for their first conference. Who here has never been to a tech conference before?  Okay, that's a really good number of hands. Yeah, look around, maybe ‑‑ applause ‑‑


You might want to pair up with someone who is a bit more experience this conferences, showing you how to have a great experience, do it right. Afterwards, right after Joanne's keynote we'll be meeting ouch here, register to be a guide you can come up here and the first time here and you'd like to have a guide or need a guide you can do that and there's special wristbands for the guides, I think they're black. If you see anyone wearing a black wristband you have a question about the conference you can feel free to approach them and sort of what that wristband means and you can ask questions. Just make it a nicer experience for our first time conference attendees. As Bodo mentioned this is just one event. Sort of call it the premier event in an entire week of events called Ruby week. You can find about the other Ruby week vents at the web site Rubyweek.org. Anyone can create a Ruby week event, I very stupidly created an event Berlin to Potsdam starting at 7:00 a.m. so I'll be leaving tonight's party quite early so I get a good night's rest. If anyone wants to join me equally crazy. We'll be going really slow, that's why we're leaving so early. Slowly stay together. But it should be fun. A really nice bike ride we meet at the Brandenburg gate at the center of Berlin. You can find about that event and other events at Rubyweek.org. Some of the events are silly as just bringing a mug to the conference and drinking coffee out of your own silly bug. People will participate or not but feel free to propose events. We have one special vent, this is tomorrow night Saturday night, is that tomorrow?  Yeah tomorrow is Saturday, starting at 8:30 p.m. and it's a film showing a screening quite closely here you can walk after the conference as a grow up and it's a documentary called code about the gender gap in technology. Really great film. I'm not even sure if it's been widely released yet. You'll get a bit of a sneak peak.


It has not been widely released ‑‑ this is a rare opportunity to see this film you can't get it on Netflix or Amazon or any of those services you have to come tomorrow night to see it. This is one of the Ruby week activities at Ruby week.org. (Applause) so now we're just going to have a few words from Laura who is one of the Rails Girls Berlin organizer who organized the vent today.  I participated in it as a coach, it was great. She's going to tell us a bit about Rails Girls.org. (Applause)


Yeah so if you look at this conference you might not have noticed that there's a gender gap in IT. I'm very proud of this conference for that. But if you look around beyond you might have heard about there's not enough diversity in tech so one of the groups that helps to get more women into tech is Rails Girls, it's a worldwide movement if you're not from Berlin you can see if there's local rails Girls group you can help with:  Your gender doesn't matter, you can support them any way. But it's mainly aimed ‑‑ the workshops are aimed towards women, they're for free. And ‑‑ that's it (Laughs) thank you (Applause)


Thank you. Before we move to the keynote we have one little sponsor talk by elastic ‑‑ who last name sort of sounds like astronaut. But he'll tell you about it. They sponsored among other things the ice cream so that's pretty good we've heard from the keynote speaker is the cheesecake Fookdie thing, so you have to check it out (Applause) (Colin Suprenant:  So Collins from elastics ‑‑ of but, yeah, so elastic Open Source, Open Source means community, of course it's very important for elastic when you probably a lot of you are probably using some of elastic ‑‑ and a lot of you guys are also contributing to our products. Issues, pull requests, it's just overwhelming, so thanks a lot. And yeah so we benefit a lot from the community and we love testify Ruby week in particular and eurucamp. And we try to share the love and help these communities by providing support and we also love the ice cream so we decided to share that with you guys, so thanks a lot (Applause)


On to the new stuff, Joanne you're almost up. She did a talk in your cap 2013 that I absolutely love about reprocessing, there you go I loved it. We're very much looking forward to this year's talk. Joann talked to me about what she's doing for a living right now, I really like making charts and maps. So that's ... today she's going to talk about how you ‑‑ how we need make tech a little bit more positive apparently we're getting all negative. So get more positive and one of the ways to do that is combining one of your passions with one of the other passions that we have, which is programming. So Joanne (Applause)



Joanne Cheng:


Hello ‑‑ oh, that's loud. Okay. So my name is Joanne Cheng, I am a software developer at Ken I O and this is my third time at eurucamp, I'm very happy to be here kicking things off. I'm also very jet lag right now, so I'm just in a really weird mood and this will be interesting. But tonight I want to talk about Awe. Awe is that feeling you get when you experience something amazing that makes you feel a prickly sen stationetion on your skin, some people say it makes them feel breathless. And generally when you feel Awe it's a mix of wonder amazement maybe a bit of fear and confusion we realize the world is much bigger than we think and there's all these amazing things that exist outside of our own heads one of the things that makes me feel Awe are the mountains you see here out where live in Colorado.  I love hiking and being out in nature. And people become motivated when they feel Awe. These mountains that you see here have inspired countless beautiful works of art, inspired music and poems to be written about them. These works of art cause Awe that I know hear them or see them. The affects of Awe are contagious for many programmers here I know there's technology out there that Sparkes the same feeling. That feeling of Awe is what drives our passion for working in an industry. Perhaps it's using ‑‑ a ‑‑ for the first time or ‑‑ or our first learning how to program. These are all possibilities that code can bring. Maybe for some of themore advanced people it's about reading a new ‑‑ reading about a new well designed language. Thinking about code as programmers or watching a co‑worker solve a problem. And for me it was that all the complex work that we do on the computers was down to a few simple operations. But as I continue to work as a developer I often forget how to feel Awe, I get jaded and then kind of fall into these cycles where I don't enjoy programming. Have any you heard this phrase spoken at your job. Maybe not about computers or but maybe about Alain language, a framework. Because I do.  I definitely do. And you know this topic is supposed to be about positivity and Awe there's a lot of technology that is very, very broken. So remember this every time ‑‑ because of a poor security system or a simple ‑‑ potential caching a plane and making it fall out of the sky. Or when I come across, my job when I come across a poorly documented library or a poorly written library there's a lot of code out there that's broken over poor decision and lacy development, that's kind of a fact. But thinking ‑‑ our technology and our tools are broken it's not a positive ‑‑ it's not beneficial for our working environment. Sometimes these mistakes ‑‑ sometimes these mistakes that we encounter are caused by things, by minor mistakes or things ‑‑ or just things that we disagree with. And this attitude ‑‑ sorry ‑‑ this attitude spreads to others we work with too.  ‑‑ some might call it burn out but I didn't quite enjoy programming, I wasn't fascinating with some of the amazing projects being developed right now ‑‑ librarieses and documentation I was working with couple with a lock of positive community and support. Tonight I want to talk about my own adventures in building myself up again. With programming and other things that bring me Awe. I'm really hoping this will resonate with some of you. So, I've always had weird fascinating of combining things that aren't traditional combination.  I think there are interesting problems to solve when you intersect two fields that aren't typically seen together. One of my recent hobbies is dance. I'm now saying this out loud and I'm kind of ‑‑ it's kind of weird to admit that. I'm kind of an awkward person and I'm not very good with movement and but I've been taking pretty much any type of dance class available in my city of Denver for the past year and a half and I've always watched ‑‑ I went to a music school and I always watched dancers and envied them for being able to express themselves through their bodies. And I've also been too scared because I thought it was too late but ‑‑ and so the more I started dancing ‑‑ this is pretty close to I was and I'm still not that great at dance but it's a very challenging hobby for me, something I feel really strongly about because it's just such a mental challenge and such a fun thing for me to do. And so one day after dance class I had a conversation with a friend who suggested that I try to think of ways to visualize dance. So I should mention that I I do charts and maps for a living and I worked a while to get to that point. So ‑‑ and ‑‑ combining my visualizing of the idea with something that I wasn't any way related to my job was a new challenge for me. A lot of sketches a few experiments based on visualizing motion. And also two years ago itches talking about a way to draw shapes with code and last year I gave a workshop on DJAS here which is ato draw shapes in a browser. So naturally this year I'm going to show shapes on a screen so ... I'm just going to set up a little bit. So my lovely volunteer will demonstrate some of the things I've been doing, and I'm going to talk ( applause) when I was thinking about capturing motion one of the easiest ways to capture motion ‑‑ there we go. One of the easiest ways to capture motion ‑‑ so basically what Kinet does is takes an infrared scan of the room ‑‑ the camera over there. And um so we have all these day the points of the scan ‑‑ (Laughing) continue please.  ‑‑ you have infrared scan on all points in think dimensions and you copass that information to open ‑‑ to basically a computer library that looks for a person. At least that's what the code I'm doing. And once it finds the person it's going to look for the joints on that person. The head, neck, shoulders. There we go. Right hand ‑‑ is this the left hand?  (Laughing)


Yes, left hand, and all the joints, and so that was my first step in trying to visualize movement. So after of I had it track the joints I started thinking about ways to make this pretty and which makes it kind of artistic so ... ‑‑ it's magnifying all your actions. There we go. There we go. That's a good reaction. So I just had this idea of I was basically drawing a bunch of stuff on the screen just following the right hand which you should be moving, the right hand. Okay, yeah, soy had a bunch of points and I was able to freeze it but then I thought of this idea of how to use graceful bubbles just follow around all over the place.


It's pretty fun actually.


Good. See the bubbles just kind of float around and if you're actually ‑‑ ‑‑ there's a ‑‑ explains how to create physics and mess around with physics to create shapes and things that move around like this. So once I of the got this, tracking the joints and able to draw with it. I was happy with this idea and how cool it was. Kind of pushed this idea a little further. So I had this idea of being like a dancer being able to ‑‑ movement ‑‑ you can dance. (Laughing) that's


It's almost like that. So I had this idea of a dancer being able to follow the movement so this is what I built. (Laughing) all right, there we go. Ooooh merging sound with movement ‑‑ so basically I had in idea of like this harp that kind of was it's own game like something that kind of flowed like the ocean a little bit. It was it's own thing, not static just go up and play. And then so what it's doing is tracking Andy's left hand. And it's just playing the strings of a harp in sort of this, I call this space art. Because it kind of sounds like a space thing. all right.  I thank you (Applause) so these were two just kind of pet projects that I worked on for the past year and this is a more ‑‑ this is from a really beautiful dancing technology piece by an artist named Navi.  I completely forgot the name of this piece. It's absolutely ‑‑ combining passions they just kind of help me in love with technology and keep me sane.  I really love working on these projects even though the whole demo disability take too long to show you what I did.  I never presented these thing in public, the space art was an office demo that we did as an interactive thing for people to play with. But these experiments also let me learn about amazing technologies that I've never been exposed to before.  I didn't know about computer vision before learning about this, just something I Googled because I thought, yeah, sure I should try to combine programming with dance, totally should work. And I realized it's such a hard field and something that people are constantly studying and there's so many papers written about it, with math I can't understand, but it's just ‑‑ there's just so much out there. Learning and exposure to really thoughtful technology is why I love working as a programmer. And why I feel motivated at my job. So recently I spent a bit of time reading about history of Bell labs I became fascinated with this man up here this is Paul Jen, mathematician, father engineer all around genius. He withouts an employee of Bell labs. He also did cryptography work for US during World War II. And his work on information theory was the basis for technology behind the modern micro processor. One of the first people to support the idea of artificial intelligence. Really blown away by how long and how amazing this man's resume is. But in all the stories I read about him, the answers that I read mentioned howdies ‑‑ he had a ton of hobbies. Pole sticking strucker juggling uniany cycle playing music, gambling chess board games, he owned turtles, but with all these things that I named he had engineering project related to all of them. He built mechanical turtle, built electronic board games. He built a juggling machine. He built a chess machine that became some sort of ‑‑ there was a very long paper written on it. He also built a small portable computer, technically the first wearable that could ‑‑ that would observe a ball this a roulette game and could kind of predict where it would land and sort of increase the odds of winning. So unusual, totally. But his collection of strange projects really resonated with me because it shows that the work that he did was driven by Awe and curiosity not by negative Ity. The Bell lab didn't enjoy his project, they did influence his serious research and he did quite a lot of that too. They lost a genius to a university because one of his projects was so important to him and his career. So going back to Awe. Studies that prove that Aou help us to be more 'em pathetic and makes us better people. There's research study done in UC Berkley recently in Berkeley, California there's really beautiful trees that are very tall and are on the campus so these researchers brought two separate groups of people to the campus. One group of people they brought to the Euclaptus trees and let them stair for a minute and the other people they just showed them the university building. So as they were walking back to the lab someone by the lab would drop all their pens just a minor accident. The people that looked at the trees were more likely to help the person who dropped all their pens versus the people who were looking at just the building. So this sort of empathy and sort of altruism this does derive from Awe. And there's other studies, I'll mention this New York times article why do we experience Awe. It's really a good article if you're curious about this. And I loved eurucamp and JRuby Conf because the speakers have prepared great presentations for all of you. You'll meet developers who amazing things, you're going to have time the beautiful Potsdam or ask someone about the amazing work they've done with Open Source. So I hope you all experience Awe this weekend. (Applause) of


Are we taking questions?  Applause


So just a few more announcements. So immediately after this we'll be walking over, it's a short walk, fifteen twenty minutes from here to the eurucamp after party. And it's at nice beer garden. Everyone that's here gets one beer ticket and hamburger, or anything a soda, water, Orange juice (They have Vegan, Veggie burgers to eat. So we'll be walking over there, make sure you get a ticket as you exit the room or two tickets I should say, one for drink and one for some food. So talks tomorrow start at 9:00 a.m. that's why we're only giving you one drink ticket. And please be here on time. You might have noticed if you came here late after the keynote started was that this front door was locked. So if you come, these front doors will be locked at 9:00 when ever and when ever the talks start and that doesn't mean you can't enter, if you want to enter, you enter through the back, go up the stairs or you can take the elevator as well. Yeah, there's an elevator that lets you go all the way back. You can come in from the back. If you need to leave in the middle of a talk as well that you exit through the back as well so as not to distract people. So please be here on time, if you're not, go around to the back.  I think that's all we've got. Thank you everyone for a great first opening night of eurucamp and we'll see you at the after party (Applause)




You can record anything or ask you question using this e‑mail address or this telephone number. Then there is a quick schedule, I think there's schedules in all of your bags, I'm not entirely sure if they're completely up to date, I'm looking at Nico?  Or is it better to just check the web site . We have WiFi codes, if you need any WiFi you have to go to the registration desk and get yours, that way you can keep track of the schedule.


Yeah, so one thing you'll notice on the schedule is there's a really nice long break after lunch. So, the ... that time is not right, that should say 12:30 instead of 9:00. But where it says 9:00 registration and coffee it should say 12:30 lunch and Siesta this is one of the things that make eurucamp really special there's a four and half hour break in the middle of the day
's a bunch of activities you can do during the break. We encourage you do that, today is going to be a really beautiful day. Not too hot. Just a beautiful day. There was an activity this morning, actually, you missed it. But it was spectacular, some of us biked to eurucamp (Applause) after having a couple beers at the after party. Went home to Berlin and woke up at 6:00 a.m. with five other brave souls who biked from Berlin to Potsdam this morning. That was fun, I am energized I've had my exercise for the day, I'm feeling good. There'll be lots of other activities during that break from 12:30 to 5. If you would like to create afternoon activity, there's still time do that. The web site to do that is Rubyweek.org. You can see activities that other people have planned, if there's space you can join. And if there's some activity that you wand to lead or create you can do that on that web site. So be sure to check that out. There also will be lightening talks.  I should mention, later in the day. And you can start signing up for those after the first break. So if you have an idea for a lightening talk that you would like to give, then please, please do that.  I think there's 8 slots, start thinking about your ideas now, you'll be able to sign up after the first set of talks. This is another one of the activities, it's a great sneak preview screening of a movie that hasn't been released yet called "Code" it's about the gender gap in technology, our industry, trying to figure out why that exists and how to fix it . You'll have a unique opportunity to see this film this evening starting at 83:40, it's at theater close to here, you can walk. There's about a hundred spots left to sign up for that. If you're interested, go sign up now, I'll be there, it should be really great. Ruby week.org activities/9, so you know it's a Rails App, right. (Chuckles) yeah, and I think that's the main business. The other announcement I wanted to make was these doors will be shutting, the front door will be shutting as soon as the talks start. As soon as the first speaker or each speaker starts to speak. And so out of respect to the speakers, if you need to leave in the middle of the talk, please exit through the back door, up the stairs to the back. And if you need to enter, say you're late and this door is closed, you're not locked out, you can still see the talk, just go up the stairs or take the elevator in the back all the way down this hall, up the elevator up the stairs and into the back door. Please do that as acuter simpler to our speakers, not to interrupt them. Without any further adieu. Floor will introduce our first speaker of the day kicking off eurucamp day 2. Our first speaker is Ivan, he's going to teach us how to teach coding ability to students, so students who have never actually had to maintain a code base. It's very difficult to imagine, so he will teach us a thing or two about this. Ivan, please join us. (Applause)


Ivan Zarea:  Can you hear me guys?


No.


Oh, okay.


Thank you. There's a problem, I'm used to teaching classrooms, so I'm used so shouting a lot, we in Moldova don't really have equipment like this. So I'm shouting just do this. (Laughing) it works for my students. So hi everyone, welcome today one of eurucamp, I have the honor of breaking this. My name's Ivan, I work at the technical University of Moldova out of all places. And I teach things like design buttons and ‑‑ design patterns and such. Before I start talking about some of the experiments we had in the university, I would like to provide you with some context about where I come from. And this is Moldova. The IT industry in Moldova is primarily based on outsourcing. Which is a bit different from what you have in innovation based industries or product based industries, right. Because for our country, it's very good because it creates a lot of good salaries. A lot of job positions. Right, where people are paid very well.  ‑‑ did I break something again?  (Laughing) of we're ‑‑ okay, good,. It creates a lot of good salaries, right, it also ‑‑ because of of these jobs are usually accessible to everyone, they also have a very low barrier to entry. So you can basically write a bit of PHP you're good to go, you're good to have a job. For us as an educational system, it can be a problem because it also has a bit of a darker side to it. A lot of our students who come to the university are studying for the wrong purpose, they only need to have a degree and not to have all the knowledge necessary for the degree, right ‑‑


Okay (Laughing)


You're moving too much


Ohh Oooo.


Can I have this?


I had tape on my back.


Okay, this is better.  I broke it for everyone else, Yeah. Getting back to the out sourcing industry and how it works for our country and for our university is that unfortunately a lot of students are getting into university for the wrong things, they want to get a degree so they can apply to their jobs, right. And moreover, because the barrier of entry is so low a lot of students already work while they are studying. So they don't come to classes. And this is a very bad thing for us as a university, right. And of course this is a systemic issue. We need to address it as systemic issue. However, as a small team, at the university, we try to switch the focus a little. Instead of pun ishing the bad performers, we thought of why wouldn't we provide more value of to of ‑‑ to incentivize people to come to our classes. Why wouldn't we give something that would be immediately applicable, so if you work, right now at a Trouple shop and you come to the design patterns course, you need to have something to apply today. And for us, as course designers, it means that we need to synchronize very well with the industry, and identify what is important for the industry so we can incorporate that into our curricula. Cool. So let's find somethings we can teach. Of course the first thing is the actual subjects. But for me design patterns have been the same for quite a while. So what else can we give?  Well, this talk will focus on two things. Skills, and values. So skills that we want to have as an industry and values that we want to believe in. Of course, while teaching skills and values, we also have to page it fun and engaging for our students, but always keep focusing on the fact that the skills and the values we pass need to be relevant to the industry. So let's start with skills. What skills are relevant to the industry that we can incorporate in our courses?  And this is a pretty tricky question because it demands an objective answer.  I would rather twist this question and pose a different one. What skills ‑‑ instead of trying to identify what skills are important for the industry, why not identify what skills are important for me. Or rather what skills I would like my next teammate to have, my future teammate, right, because we've all been frustrated with the fact that someone comes along and they don't ‑‑ they don't know how to Google things or something else. Right?  So what are the skills that you consider important for your future teammate?  I tried to identify a couple. For me it's reading the source code. Or not being afraid to dive into the source code. Another skill, I believe is debugging. Right, people, I think we need to debug, and we need to teach debugging. And we need to put people in positions where they have to chose tools. This is a skill that can be trained. So going over them one by one I'd I'd like to discuss come of the examples we implemented as course designers in order to facilitate these skills. So reading source code. The most important thing about reading source code is not being afraid to go to the source as an authorititive source, right. This means that we have to do some live code in classes. And the live code experience, while we're teaching right, and we're writing code, live, actually eliminates some of the barriers that students have because they see the Typos we make, they see the fact that I write pretty bad C + + code. And they're not ashamed of it. They also are engaged, everybody is because they can write the simple class. They can tell me how to write. Another way we can train reading source code is by giving assignments with source code. And not with a couple lines of it, but with a couple of files. Then we can jump a bit further and show actual code to illustrate a concept. For instant while I teach design patterns, I found a little gem on GitHub, this is called YouTube.dl. It's a program, not too small too thing, it's a Python thing that downloads video from YouTube and a couple of other places. During this course we took this thing, we had to read the documentation to go look at the source and see how to extend this App. And this was exactly what was the strategy pattern. So it wasn't a textbook example, but a live, real, example. The second skill is debugging, by debugging I don't mean attaching the debugger or setting break points.  I mean digging, digging into hard problems that are not at the surface. This I believe, is something that is missing from a lot of engineers these days or any days. And here's an example we use in the class during de‑bugging. Right, this is of how the high scores leader board for Flappy Bird. It was one year ago, it was a thing. This is the highest score. You can imagine that it's a couple of universe's old. And this is an interesting debugging question. Because when we came to the students and when we asked ourselves how did they get this?  Right, this is a software issue, this incentivizes students to dig a little. And to find out how could they actually get this. And while digging, they develop a couple of other skills as well. So to teach debugging as a skill, we need to provide a good context, an engaging context for students. We need to teach debugging as a whole. And that way we will have a couple of other skills developed along the way. For instance Googling, Googling is an important thing, right. And moreover in this very example you're not always thinking about Googling how to convert 64 bit into something, something, right?  So that's debugging. Good. Tool choice. We have a lot of pressure in our work because there's a lot of tools wailble and we need to chose them. And especially when we chose the wrong tools we face pretty dire cop sequences for our projects, right?  Sometimes. So what if we could help the students chose a tool and eliminate the risk and the consequence?  That's encouraging students to be pragmatic and reasonable in their choice, right. This will actually provide them with an experience of choosing tools without the risk itself. And then let's have a discussion about why did we chose a particular tool?  For instance in our class, we had to chose a Ruby HTP library and there are 27 projects listed on Ruby tool box. This is something you need to go through a couple of times and then it will help you do that in real life. So getting back to the skills, we have three skills with their respective examples. We have to read the source code, we have to develop debugging skills and Googling skills. And we have go through an experience of choosing tools. Values. Remember with skills right we had to identify what skills are important for the industry. Same thing applies for the values. What values are important for the industry?  And we can of course apply the same approach to asking what values do I want my future teammate to have?  For me here's a couple.  I want them to appreciate constant progress over larger jumps slow and incremental things. I want them to think in concepts and not in particular implementations or in code.  I would like my next teammate to be able to own their code to claim ownership of the things they built. And this needs to be somehow integrated into the curriculum. So let's start, constant progress. The main thing about constant progress is that when we try to teach test driven development, we focus on the test parts. And a lot of the times this, especially to students or to people who already work and who have already seen tests, this highlights a different value of test driven development, that it helps us get rid of bugs. Whereas, the whole why do we write test first thing is that we set small milestones and we get there, right. We take the bigger problem, we split it into mauler chunks and we take them one by one. So how can we encourage that in our students?  We can give them a program with existing code and tests. They're not familiar with tests yet. But we can tell them, hey, if you run this in your IDE or if you run this script you'll get a grade, right. The more green you see, the better your grade is, which is good, right, we condition that. Then we can give a program without code, but with test and you need to write the test, and you can use the tests as a guiding tool for your design. Then rewriting can give you a program to write ‑‑ then we can give you a program to write. And some students were so comfortable with the approach of incremental building that they had to write their own tests. And without highlighting the value of hey, it gets rid of bug, we could insen divides students to write tests.  ‑‑ incentivize students to write test. They had to build the builder pattern in SmallTalk, they had to see a will the of green. If you make all of these green you get the highest mark. Which is okay. Next value concept over code. A lot of times when we speak about concepts and not code we try to make this, this is a single talk in Java look like this, this is a singleton in Ruby. We try to give the information for the singleton and hey, this is pretty much what it looks like, try to distill what you need from it.  I tried that, it didn't work very well. What worked better was having a discussion. And and trying to come up with metaphors and being frank about the fact that hey it's hard to take the singleton pattern and apply it to your JavaScript job because you need to know lots of other stuff. It's hard because we cannot introduce the same concepts of module pattern or things like that to someone who writes Java or Andriod, write. Or sometimes we can even pair them and help them identify the concept from the code. So if you have someone who writes Andriod pair them with someone who writes Python for a living and make ‑‑ help them identify the pattern from the code. And the last value, I think is important for us as an industry is owning code. A lot of the times when we teach these or when we have these best practices right, patterns or things like that, they're because our industry as an engineering practice is slightly different than other industries, the product of our creation as posed to this very building changes, radically changes over time. And this is why we develop these practices that helps us design things for change. Now the important thing here is that when we teach the patterns themselves we don't incorporate change. We don't build bigger things, so let's try and build bigger things during the course and incorporate change. Try to change the requirements as a market would. And then you'll get a different kind of reward as a student. You'll get ease of maintenance and you can get features done quickly. This is the reward. And otherwise, if you cannot get the features done quickly, you will feel the pain of poorly designed software without having to actually risk your business for it. As an example last system we had to write a markdown parser, so students got a subset of markdown, a bit of custom markdown. And they knew that there will be changes. So they had to up load their code receive the changes to the format, so, something was different, and they had to implement those changes. As quickly as they could. So back to the values, we had appreciation of constant progress. We had concepts over code. And code ownership. Of course, these things coupled with skills give a lot of our students some of the things they node to apply today. However, it's boring right. It has a lot of bullet points, it's boring so we need to make it fun. And this is Alexi the chinchilla, he is my ultimate tool of making things fun. It doesn't work very well, but, oh well, for example I tried to add a bit of silliness in the assignments by integrating the chinchilla:  For example Alexi is a bit older now, so he needs to make a family so he wrote himself a dating App that downloads pictures of chinchillas from all over the internet. And since he has a 2G connection, he ‑‑ you have to optimize the App, basically, but he wrote some tests too, so he's good at that. So while you're building this App, right, while you're solving this assignment, you have to look at a lot of chinchillas, and you're sitting there at night, writing the assignment for course and then you see this, and then you need to figure out what this is and even later ‑‑ right, when the sun is almost up you see something like this. And get to class you submit your assignment, you're very tired and touch and then you have a thank you not from Alexi the chinchilla because you helped him. (Laughing) this makes it a bit more fun. So these are skills and values that are important for the industry. And we have to wrap it them into a bit of fun. However, I think there's something missing here.  I think there's something missing that defines us, us the people who are here at eurucamp that have something special than other communities do. And this is the spirit we have. The spirit that is better defined as the hacker spirit, right. The ‑‑ hour ways of taking things apart, putting them together seeing if they work, right. Changing things even if they work properly, displaying curiosity towards new languages, I mean, look at the talks here. it's new stuff. Continuous exploration and when you encounter something that doesn't really work for you ‑‑ you just hack it. Right, you just change it. So, it would solve your particular problem. And you can hack anything, basically. In our example our teaching curriculum didn't really work for us. Our way of teaching didn't work for us. So what we did is we took the hacking philosophy and we applied it to the thing we knew, which was teaching. And as a matter of fact this was a very vivid example for our students because we're very open about t. This was a very vivid example of hacking itself because we were open and we said, hey, we're not sure this is the way it should work, but let's give it a try. And it actually taught a bit of hacking while we were hacking teaching. Thank you. (Applause)


Great we have a few minutes for questions, we only have one microphone basically F you have a question, if you don't mind coming down to the front of the steps on either side and just cueing up there. And you can ask a question. Questions?  That was great talk. Questions there must be a couple. Yeah?  You're not following the instructions at all (Laughing)


Do you have any tips how to convince our teachers at our university to make something more applicable?


This is a very good question. Can we make our teachers, or help our teachers at our universities make something better?  Is that correct. I believe we can, we can by inviting teachers here at eurucamp, by sharing the experience and being absolutely frank about the fact that the industry is moving at a much faster, quicker pace than the academia, mostly. But also it's very neat that some of these techniques and some of these skills and values are applicable to other ways of teaching like Rails Girls or hack days or things like that. And I believe we, as a community, can focus on trying to incorporate these techniques or other techniques that we consider important in a newer format. Something that maybe is not in academia. Is that okay?  Any other questions?  I have two minutes left, so I can dance (Laughing)


Dance! Oh, come on (Applause)


Thank you.


Okay, so our next speaker coming up is Luis Ferreira. We first met in Braga in the north of Portugal about a year ago for the first Ruby Con in Portugal. It's coming up when?  Fourteen and 15 of September. It's a great conference, I'd encourage everyone to attend. If you're from a company you should sponsor it. It was a first time conference but it really ran incredibly smoothly. And Luis is one of the organizers of that, and we got to know each other there. And he's here to talk about Crystal which is a topic that interests me a lot. A new programming language with that is sort of friendly for Rubyists. And he'll tell you more about it. Hopefully as soon as he finishes setting up.


Ready to go ?
yep, I think so.


Luis, round of applause for Lis.


Thanks. (Applause)


Of


So, hi everyone, hope you're having a good time, ‑‑ we're here to talk a bit about Crystal, it's a pretty new language, but it's also fun. Before we get into Crystal a bit more about me, really fast, this is my, my handle@zamith. This is a company I work for called sub visual in Braga, they were kind enough to get me here, thanks to them, Rubyconf Portugal is happening in a month. We're having a pretty good line up ‑‑ PJ that spoke yesterday is going to be the MC, so the venue is fabulous, you should definitely think about going. Also we're having a raffle, sometime today it should be announced. And we are giving away a free ticket for someone here so please be excited about that. Now, Crystal. What is Crystal ‑‑


Don't touch it.


Okay.


So Crystal an efficient Ruby‑like language. Really fast, syntax similar to Ruby, you'll see more about it in a while. One of the different things about Crystal is that it is compiled and it is more strongly typed than Ruby, it also has static checks which brings some more safety than Ruby does. It also has very simple C bindings which is nice for a lot of reasons that we might discuss in a while as well. Another very cool thing about Crystal is that it's a hundred percent self hosted, that means that it's all Crystal is Crystal, so if you understand the syntax, which is, again, should be familiar if you know Ruby, it's very easy to just dig into the parser, lexer into the core of the language and just contribute. Which is also very nice. As I said, Crystal is a type language. But it does have a very good type infer remembers. So you kind of all the time it feels like you're writing Ruby and not worrying too much about types, if you don't want to. But you'll probably will want to if you start writing type code. But that means that you can set your availables just as you would in Ruby. You have a number that's 42, so it's an integer or a fixed number that would be the equivalent in Ruby, in Crystal it's called Int 32, it works just as you would expect to in Ruby. You can do the same thing with arrays. You have an array of number, you can append to it, same syntax as Ruby. But, now the first small difference between Crystal Andrew by if you check the class, it's not just array, it's an array of Int, so an array of integers. This is a bit different and this is going to be important in a while. So here if this was Ruby you would expect it to work, right . So you have an array, you append an array of integer, you append an integer and you append a string and you get a class, what could possibly go wrong. Well, in Crystal it does not work. This is the error it's going to give you at compile time so this happens the program will not even run. What it's telling you is that you cannot append a string to an array of integers. Okay. This is what this is telling you. In Crystal, the type of ‑‑ the type infer remembers system works when osseterring the variable. You set an array of integers you cannot then say oh, I want string as well that is not safe, Crystal will not let you do that. This is pretty easy to fix, one of the ways would be to create an array that has integers and a string then Crystal will know, okay, so you can see the type is not an array of Ints anymore, it's an array of strange things, which is union type which is very important in Crystal the array can either have strings or integers, okay, and you can have more types as well. Of course this is not always the best way of initializing the array. Want to have elements with all the types you need in the array, so you can also do this. Okay, you can say that's an ray of strings or Ints, and it will work just fine as well. Now that we know a bit more about how types work in Crystal and the most important part here, remember is the union type, okay, that's the most different thing. And ‑‑ but there's a lot that Crystal can do for you at compile time now. For instance let's look at this Ruby example. Very simple method called stripping size, it takes a string and brings the length of the string. If you try to call it in two different places, if you run this code you'll get 16, that's the length of that string. And then, Boom, okay, so you have an error, if you've be coding Ruby for a while you've probably seen similar errors, and this is the problem here is not the actual error, I think, the problem is that it happens in Runtime, okay. So you might only find out when you're already running ‑‑ already have deployed this code or if you have a very strong test suit you might catch it early, but you never really know. In Crystal if we take like the exact same code, it doesn't have the prints there, but you imagine it does. You get a very similar error saying that leg is not defined for Nil, we expect that. However this error happens at compile time, not Runtime, okay. So the program won't even run, it will tell you there's a Nil, an undefined method for Nil before it even runs, so that problem is solved. Let's take a look at a bit more complex example. Saming the same model from before, the array of strings and Ints, and let's go over what it's doing here. So we have an array of Ints.  ‑‑ sorry an array of strings or Ints and we append an Int and then a string. We take the array and we get the last ‑‑ of the array and then we ask for the size of that element. If you don't know it, size is only available for strings not for Ints. But this should work in Ruby, right, because the last element is a string, it has the size method, the typing and everything it should work. In Crystal it doesn't. Okay. We get undefined method size for Int, this is because Crystal makes sure that any method you call on an element of the array must be valid for all the types in the union type of array. So it's really safe that way. It cannot really make sure that you're not messing it up along the way, if you're doing something that can potentially introduce a bug, it will not let you run the program. C bindings. As I said, Crystal has a very good integration with C, this is because Crystal is compiles to LLVM byte code, so it's really easy to integrate with C, going to be very similar. But if you ever try to do it ‑‑ have tried to do it in Ruby you might have noticed that is not that easy, not very easy to get started any way. You probably will need to write some C and worse than that you need to learn like Ruby syntax or Ruby C implementation like the RB Ints and all that, basically it a ESARIS a bit of a pain.  I think Fiddle is something that's happening and looks nice.  I think we have a talk tomorrow.  I haven't given it a close look. But it looks better, I think. But in Crystal it's already very simple to integrate with C. Say you want to have the A to I function from the standard library. Standard C library. That's it, say you want to use L LibC and declare the header of the function and you can use it around the LibC name space. This is a bit cheating because LibC is already in the core, so you can just use it. Over, if we want like random C library we needed to use it would be a bit trickier like one line extra. You have to call that link on top, for instance if we need to red line it is an example of using the readline C library. You need to link it, declare header again, then we have a code using readline. This would prompt for a name, you can give it a name and it will print it as a string. The small like difference you have to note here is the string.new that's because if you also notice under the header we're say that the return value, that's what's coming after the colon there, so the pointer UInt, we get the pointer back, and we have to cast it to a string so we can use it as a regular string. Other than that it's very, very simple to use, and most of the core of Crystal actually uses this for a lot of reasons. Some ‑‑ some parts of the code they didn't have time to rewrite, so you can just leverage a lot of what the C community has done, which is a much bigger community than what Crystal is right now. Another important part of Crystal of are something called generics that we don't really have in Ruby. They are in other languages. The idea is let's take this Ruby Code this is a Foo class, very simple class, you have an Attr reader with value and an initializer that takes value. Very simple class. We create anen stance of the class with an integer and we get the absolute value for that integer. We get one. Fine. Then we create another instance with a shard and we get the ASCII code for that. Fine, it works well, no problem there, everything in Ruby just works. However, if you try the same exact thing in Crystal, minus the slight differences in the syntax, which we don't have the at reader, it's called better, you have the setter and property for the access sore, but it's very similar, and we have the coffee scripts like like, initializer, we don't have to set the value and like repeat yourself three times, you can just do it once. But then if we try the same exact code freeuate a Foo for Int and a Foo for shard, and create different methods and instances it won't work, we get a similar error, we have an undefined method Absf Char. This is because how it works in Crystal. Crystal needs to find a type for that value, you're not saying what the type of the value is, the way Crystal does it is it goes through every place where you initialize this class and it sees the type, so here's an integer here's a Char, what's the type of value, it's a union of Ints and Chars this won't work because it's not available for Char this is a Compiler report so it won't even run. You can fix it easily by having something called generic, you can simpler this is a Foo of T, like a generic type, you say that T is going to be defined by the type of the value. What this is telling Crystal each instance of Foo can have a different type, a type T that is defined when we initialize it and defined by the value. This instance of Foo will be a Foo of Int and this instance of Foo will be of Chars. And then it will just work again like it works in Ruby. So this is how arrays are implemented. This is how hashes are implemented, so each instance of an array can have it's own type, it can be a union type, we saw arrays that had integers and strings. So those are arrays of union types. However we do not have an array with all the types that we ‑‑ using all rays that would be a mess. Another of difference between Crystal Andrew by that I find really interesting, is that you have method overloading. If you're not familiar with method overloading paceically it says ‑‑ it means that you can define the same method over and over again but with a different number of our arguments, so the RT, ‑‑ if you have a different number of arguments the different methods, if you have different types even with same number of arguments it's a different method and what in Crystal we called that the yieldness of a method, so if a method yields to a block, then it's different even though it might have the same number of arguments and the same types if it yields and another method doesn't, they're different. What this means is that you can do something like this, okay, so of course this is the bias towards Crystal, you can see the same thing written in Ruby and Crystal. You have sum method that can take different number of arguments, it can take different types of arguments, you can pass it in strings or integers, it will just work, in Crystal it's just easy, one line per method and you do everything under the header of the method definition. In Ruby you have to get everything and then do it inside of the method. This is, I think an interesting thing and would be nice to have in Ruby. Last part of my talk is starting and it's about shards, so what are shards?  Shards is the name we have for gems, if you build a library in Crystal, for now, at least, it's called shard. And how does dependency management work?  For now, and again Crystal is a very new language that's evolving a lot so the project, the dependency system is not great, yet, but the way it works right now is that you need to have a file calmed project file. Similar to the gem file, has it's own DSL, and then you see there you can get a library from GitHub. As long as the library is well built. The thing about Crystal, though, and then you can just use it, you can require it and use it. The thing about the dependency system as it is right now. And probably how it will be, it only works on GitHub and bit bucket and all that, but the idea is that it's a decentralized system, so there's no Ruby gems, there's no place where you have all the meta information.  I don't know if this is going to be like that forever, but right now it is. There's a lot of ‑‑ there's a side project called shards going on that's trying to build a better dependency management system. And ‑‑ which are hard, if you have tried to do one. And then so not really set in stone how this work but the idea of the creators of the language to make it decentralized. So you have a report on GitHub and bit bucket you just use it, there's no central place where everything is. This is all fun and nice, but it makes disCommonwealth of Virginiaability really hard you can use Ruby gems and search for a gem, you cannot do it in Crystal, there's no central place, you could search in GitHub, but that's more painful so there's a web site called Crystalshards. You can look at shards in different orders. You can see the ones that have more shards, the more popular shards, the ones more recently updated, you can see a lot of stuff here, and this works for now, at least, just because there are not that many. You can see like 180 shards, so that's not a lot. But it's growing, like many maybe two months or three months you go from 60 to 180, a community that's thriving right now, so very, very good time to come to the community and I like to stress that, there's a lot of opportunities if you like to contribute to Open Source or you want to start contributing to Open Source. There's a lot of stuff that is not done in Crystal. Von in the language, the core of the language you can contribute to that. There's a lot of stuff to do that, if you want to build libraries, to do stuff. For instance maybe six months there was no post Res so someone started building that there's my Msyyl. There's a lot of stuff.


Okay, I'm going do a really quick demo and try not to blow too many things. Is the font good enough?  Can you see it?  So I have here a sequence generator ‑‑ very simple recuresive one. It's very simple and written in Ruby. And it just, it's printing the element number of the sequence. It generates the sequence and gets the 40th element and it brings it. Very simple code. It should work just fine. If if we do it in Ruby. You have to wait a while .
not too much, hopefully. About ... sometime ... okay, it work, I forgot to put the time here, let's do it again. It should be about 8 seconds. Or it might be taking longer because I'm not plugged in. Okay, 9 seconds. So this is the Ruby implementation. Okay, and if you notice it's the 40th if you try to do 45th you might grab a share and wait because it's going to take a while. In Crystal we can try it. We can pass in, in this particular instance because it's such a simple program that the code is the exact same in Crystal you can just pass it in the Ruby file and it will just work. Okay, it took one second. However what we are doing here is that we're compiling the program and then running it. So we can compile it first. So you can do Crystal build, that will compile your file and you also have a release flag that makes it even faster. So we compile it and then we can time it. Boom, 0.2 seconds. And it does the same thing like generates ‑‑ it's here, and took the same code. So it's very, very fast. Especially for CPU bound programs, you can almost write Ruby and make it like super fast. So please try some Crystal. And hopefully you can get ‑‑ we can get some of you to the community. That would be great. Another thing that I can mention that is super fast in Crystal is Json parson, if you have a lot of that, Crystal is super, super fast doing that. It has some small DSL that lets you define the structure of your Json, so it's a very good use case to start using Crystal if you have that problem. Okay, that's it. Thank you. (Applause)


So, I'll be doing the question moderation. There's someone standing, great


Luis. Thank you, personally I had the impression that the type system looked like the one used by the ML language. Where does Crystal draw it's inspiration for the type?


Do I have to repeat the question?  So where does the type language or the type system come from in Crystal?  To be honest, I'm in the really sure. It takes a lot of inspiration from a lot of languages, I know it takes inspiration from Ruby from if you have if I script, some inspiration, from Elixer some inspiration maybe from there it got a bit of the type system. The creators of languages are going around to conferences and talking to people about new ways to do languages. It also a thing I didn't mention Crystal has a macro system so it can ‑‑ ‑‑ you can do some fancy stuff at compile time and it takes that from some other languages. Obviously it's a new language it takes a lot from other languages, I don't know for sure what comes from which language.


Any other questions?


One in the back there?


Come here I'll meet you halfway.


Thanks just a short question. Looks really great. Do you have a community code of conduct for your developers. And do you have a core team and what's the gender distribution.


Sorry I didn't understand the question, sorry could you repeat?


Do you have a community code of conduct and do you have a core team and how does the gender distribution. Thanks.



I'm not on the core team, but I do help.  I don't think there's a code of conduct, actually, if there is it's pretty recent. As far as distribution goes, it's pretty bad. As far as diversity, it's pretty bad. It's mostly ‑‑ can you hear me, it's mostly guys. So, but please, join we'll ‑‑ I think if we want more diversity for sure. So if you ‑‑ there's a lot of women here, so, please join. The community is very ‑‑ is very friendly, I think to everyone and very welcomingsh it's just a small community and just happened to be that way.  I don't think there's any bias towards any gender in particular.


It's a very young language and there needs to be a lot of work, and this is one of them.


You mentioned it's a young language, do the creators consider it production ready?


Sorry.


Is it considered production ready?


Oh, production ready. That's a good question, so it's not 1.0 yet, so it's not a hundred percent stable, but I think it is ready, like for small things like I was saying if you want to parse Json, you have like a Microservices that parses Json, ready for that, to build a whole App in Crystal, probably not a good idea yet. Also because we don't have a lot of frame ‑‑ you have some frameworks now that are starting to be built, but very early stage. Everything is very early stage. To do smalls and to do a small subset of things, awesome. Actually like Crystal shards is built on Crystal hand has been running for a couple of months, so it does work. But I wouldn't advise to build your business on top of it yet. Please don't do that yet.


Good point. One more question.


Are there some known limitations in meta‑programming, things where you can say from the beginning this will never work in Crystal compared to Ruby just because of its concept?


There's like Eval, stuff like that. Some of them, it's in the all, some of the meta‑programming you can do in Ruby because Crystal needs to ‑‑ can only take information that you have at compile time. Anything you need Runtime informs to be able to do it won't work. Like for instance there is a method missing in Crystal but it is limited compared to the Ruby mechanism, you cannot do everything that Ruby memberrism does, so meta‑programming is not as powerful as Ruby is.  I think that's the main thing.


Thank you, Luis (Applause)


So, setting up next is Leslie, there's a lot of people in the audience today or in general that might not fit into the traditionallologist category. But what does that even mean, right?  What makes someone technical or not technical?  Leslie is going to teach us how we can better figure out what of our capabilities are, what can do so we can build better products, better teams and better companies. She should know she initiated a project to help get pre‑university students into Open Source development. As soon as Leslie is ready, we can start this off. I'm very excited about this talk, are you?  (Applause) I'm especially excited because there's usually someone sitting next to me at conferences like this, explaining to me like ‑‑ like I don't understand it, it's cute, but I might know.


Anyone else have this experience?  Oh there's other people that have this experience as well.


This might be the right, you want a microphone rather.


Leslie Hawthorn:  Good morning wonderful people of eurucamp, I'm honor to be here with you today. I'm here to talk to you about a phrase that I find just as problematic as my appreciation for the angry white dude who's music actually inspired the talk title I'm going to have today, will the real technical people please stand up?! How often throughout this career have you heard this phrase so and so is not technical?  How often have you found yourself saying this particular phrase?  There's so few hands, I knew I came to right place, terrific I've been hearing this phrase for about the past fifteen years quite regularly, which is coincidentally the exact amount of time I have been working in the technology industry. And frequently I hear it applied to myself, which doesn't really resonate with me.  I was privileged to have access to a computer almost from birth and we'll learn a little bit more about that in the next slide. And I was also immensely privileged in that I went to school in Silicon Valley and we happened to have a computer lab filled with Apple II E computers allowing me to write my very first program almost ‑‑ wow more than 20 years ago. I'm getting old. And even before that I spent a lot of time abusing VI dog ASCII art illustration lyrics from the sound of music because I was a weird kid, I'm still weird. Even more strange to me is not when people apply this phrase to me, I can understand since I've chosen not to be a ‑‑ I have chosen to a slipping microphone I've chosen not to be a developer, I've chose ton be a community manager and practitioner of developer relations. Maybe you feel like that's not technical. What I feel very strange, as part of this career, I go to a number of conferences every year, giving talks like this one or just hanging out in a trade show booth. And the number of people who will walk up at a conference like OSCON or what's another great one. The Open Source developers conference, or Linux KonfEU, who will reach out to shake your hand and the next phrase out of their mouth is, I'm not technical, but ... so I don't usually think of non‑technical people as the kind of folks that attend OSCON, just a thought. When I think about people who are not technical someone immediately springs to mind. My mom. My mom the UNIX programmer. My mom the person who exercised great patients all the years of her life dealing with my dad. My dad the tech knowphobe. My ‑‑ Technobe, who's Nokia candy bar phone is never charged because he refuses to use it. My dad I had to teach how to use an ATM when I was 14 years old because he had never with drawn cache from the bank without talking to a live human being. This was an ‑‑ this was a very interesting experience which will tell you about over delicious beverage, it did not go well. And when I think, again, about the people in my life who I would think of as not technical, I think of these women, some of my dearst friends in the US. And these are the same folks that are consistently handing me their smartphone and performing software updates for them, introducing them to the mystical powers toughie ho mail App which they did not know existed (Yahoo mail App) they refer to as the techie genius of the family. Think about the veterinarian who required more years of medical school training than a doctor who works with human beings and who's patients cannot actually speak to her to tell her what is wrong.  I think of my friend, the high school teacher in south Florida who teaches children English who have just arrived as refugees from countries like Haiti and who is able to navigate a grossly under funded public school system in order to teach them a brand new language and also able to navigate the cultural knew answers that she's not familiar with and I am going to switch Mike mics because this is not working, hold on one second this is not working ...


Hey, look now I have a mic. My friend the school teacher who can navigate all the cultural knew answers which she's completely unfamiliar. Or my friend the office manager who I have watched do so many bizarre work arounds for the ‑‑ for their office software that does management of dental records. And if any of you in the audience hate, I mean hate filing expense reports, try using software to manage dental records that has to be compliant with about 15 different insurance company's back ends and that has to do voice recognition because you would rather use Oracle financials, immediately. So, again, when I think of these folks in my life, I think, you know, I don't think they're not technical.  I just think they're not my flavor of technical. So I find the phrase person is not technical to be incredibly problematic. And I think one of the biggest reasons I find it to be problematic is I can't even tell you what this means. I don't know what so and so is not technical actually means. It seems to have different definitions. It seems to be applied completely at random and even if we, let's dive in and analyze it what does it mean?  So, maybe it's someone who doesn't have a computer science degree. Except, we're all very happy to tell stories of very famous developers, very famous business people who dropped out of college or never went to college at all. Is it somebody who doesn't write code?  Well I've written code, I don't do it for a living .
and what about all of those people who worked, I don't know, civil engineers, civic planner, people that design our roadways and build our bridges, they don't write software, do you want the person who build your bridge to be not technical?  Because I do not. Anyone who would like to indulge in that I suggest you let me know what city you live in, will not visit you you can hang out with me in Amsterdam any time, not a problem. Are we also to say that only things that are technical are things that involve software what about the hardware engineers out there. When was the last time you sodders something, I see a few hands (Solder) these people are technical too. Also I have some thermal compound I would like to share with you, nothing better than putting together a board and I haven't done nit a long time, we should do this. This phrase is difficult because when you hear the words so and so person is not technical, this implies some kind of immutable binary. Which is simply false. There's not a single one of us who is born keyboard in hand knowing how to program. That would be deeply uncomfortable for our mothers and also logistically impossible. So, when we use this phrase, this is the phrase that shapes our thought. We need to think about what thoughts we're thinking and what information we're projecting out into the universe when we use these words. And I'm going to say that I firmly believe that this phrase is utterly and completely toxic.  I think it's code for:  I don't have to think about what you really know and what you really don't know.  I don't have to spend time to teach you things you don't know because you are not technical.  I have no responsibility to do so and there is no value in doing so.  I think that this phrase is often code for this person is not enough like me for me to believe in their skills and abilities. And if you think that perhaps that's not true, I challenge you to count the number of women or other folks who are in under represented groups in the technology industry who have started a conversation with you with the phrase, I am not technical. People don't start that conversation with you because that's what they're thinking, it's because that's what they've been told over and over again. And that's the message they have absorbed and they carry with them into the world. And this phrase is awful. It stops us from all sorts of things from achieving pay equity, to really having effective collaboration in our organizations. Because we are not valuing the contributions that everyone brings to our projects, to our companies, to our teams. We are deciding that people are other. We are deciding that what they do is not good enough. And this is only going to harm us as an industry and as a community. So I would urge everyone to simply edit this phrase out of your vocabulary. When you say so and so is not technical, perhaps you what you mean is this person does not know how to program, yet. Or this person does not understand the TDF IDF algorithm, which I can tell you right now I do not understand, if you want text plain it to me later, I welcome your education. Just don't use it. Just like I had to teach myself not to say this code is lame. We can teach ourselves to not say this person is not technical.  I'd like to conclude with some extremely wise words from a woman named Cara Sols. Has anyone had the opportunity to meet Kara. She is the bee's knees. She's a community unit at Puppet labs when she saw me tweeting I would be at eurucamp, she was really excited and she wanted to chat about the talks, I Satoshi down with her and shared some notes, Kara's extremely wise words stuck with me and she said, I don't understand why I would stay in an industry that defines me solely by what I cannot do instead of all the things 245 I am capable of doing. And as we here consistently that we have a pipeline problem. Or more accurately that we have a lea I can pipeline problem and we're not able to effectively (Leaky) that we are not able to retain talent. How can we continue to use phraseology and thinking that undervalues so many of the activities that are the first step towards people becoming developers. Be that writing documentation, program management. Or any number of sophisticated tasks that simply don't involve creating software so, my friends, I ask you will the real technical people please stand up, and this is all of you here today.


You guys are awesome. I'm so excited to be here. This is my favorite this is question finger guy, does anybody have any awesome questions or experience that they would like to share?  I know I'm between you and coffee, which is terrible.


Hi. Thanks for your talk.  I myself ‑‑ I must be technical, I just stood up and I'm sitting here and I'm also studying this field. But I would also consider myself not as being too technical, but I would see it more as a compliment because I think there's so much more you should know when you program, and ... yeah, I don't ‑‑ there's so much more you should have empathy and you ‑‑ I mean technique is just for the people and you should know about their feelings about technical and their needs of technique. So I think being not totally technical is just a plus, in my opinion. (Applause)


I agree with you completely.


Sorry Id that read,i'm losing my hearing in my old age. Yes,I agree. Yeah! Applause) besides how many of you have friends literally only spend time with their keyboard.  I have some of them, I love them deerly, occasionally I would like to talk to you not on IRC.  I don't know, seems like it could be fun.


More questions.


I feel like people have a deep need for caffeine, which I respect.


Nice human ...


Hi, thank you for sharing your points, I agree with most of the things that you said. But, the only thing that I would like to add is I think tech ‑‑ a technical can mean different things in different regions, I'm from Brazil, we have a special kind of course which we call technical course. So when you ask someone like are you technical, you can ask this for anyone and you just want to know if the person has a batch low degree or this kind of technical degree. In this case, I think it's not harmful they just want to know what kind of degree the person has in order to select kind of salary or something. But I totally agree this may cause like a division if you're in America or in Europe or if you near Brazil, would you have some suggestions on how to deal with this, in Brazil you don't have an alternative question ...


So, thank you for your question. This is not a part of my experience. So it is always great to learn about how folks around the world actually experience life I've not spent enough time in Brazil, clearly.  I don't have a suggestion, right at the moment, but I would like to think about that and get back to you, if that's okay. Cool beans. Okay.


Other nice human.


So you're talking to a group of people, for instance at this conference and someone says about someone else that they are not technical, how can you respond?


Well, excellent question, thank you. It depends on the kind of interaction I'm having where someone. If someone says I'm not technical, then usually I say, oh, okay, great, what brought you here today?  Then I typically hear something along the line I'm a program manager and I overvie the design of the software package. Or, I'm a user experience designer and I'm working on this project. Or etc., etc., etc.. And then I say, wow wow, that sounds pretty technical to me I've also had a lot of conversations with partners at conferences and sometimes gentleman are the plus one, just so everyone knows, I think this crowd is not the crowd I need to explain that too, and when they tell me that they are, I'm not technical but ... the number of them who will have had indepth conversations with their wives or husbands about the topics that they encounter every day is non‑trivial. Then I just smile and say, I think you're a lot more technical than you give yourself credit for, just so you know. Usually people take that pretty well and it encourages them to think better of themselves.


Cool, thank you. Anyone else.


Coffee, coffee, coffee.


Oh, wow, there's more.


You guys are dedicated, I want coffee. (Laughing)


Thanks for this talk.  I think it's very important to remind that what we say will frame the world. And I just want to comment with something, you know the comment about gender division ‑‑ that girl is for literature, and math and science for boys, I think it's very horrible and it's important that there is just knowledges and means to achieve something and whatever it is, it's as you said what you do that frame you, not what you know and not what you have studies .
thanks a lot.


Awesome plus one.


Let us go and have a deliciouses beverage of your choice, thank you for having me. (Applause)


Great, so we have a fifteen minute break, have a coffee,g go outside, fresh air, smoke a cigarette, get some polluted air, whatever you want to do. Please be back at 11:25. Thanks.


Testing one to three four, testing one two three four, testing town three four, testing one two three four, testing ‑‑

>>
>>
>>
>>
>>
>>
>>
>>
>>


Saturday ‑‑ after the first coffee break.


Okay, welcome back, everybody, take a seat. Hope you had a nice break. Okay. Let's get started with our second group of talks. Leading off we have Christof, who I met in India who gave this talk about Rubyconf India, Christoph is a founder of poor view, they do code review. He's also an organizer of Arrgh camp, pie rate and also Ruby conference, which should be great, that's beginning of October.


Yeah, October ‑‑


First and second or something.


Perfect in Belgium. In Ghent. And Christoph comes to us today from Brussels, we were talking about earlier a great protip for tomorrow morning, you doctor try this. The advice is the best time to brush your teeth is first thing in the morning right after you wake up. And the reason for this is because the bacteria, in your mouth, that have been growing there over night are really hungry. And if you eat breakfast before you brush your teeth then you're sort of feeding them and they explode all over the place, they start multiplying, if you brush your teeth right after you get up, it's clean and then you can have breakfast, we can all try it tomorrow morning (Laughing) thank Christoph knowing that we all have clean mouth and clean breath. So, without further adieu, Christoph talking about deep dive (Applause).


Thanks, Eric for the introduction, hopefully I have a fresh breath. So, hi everybody, I'm Christoph, I'm the founder of code review, ‑‑ pull review as was said. Also organize Ruby things in Belgium, like R camp, ‑‑ so what I propose today is to dive together. So because code has to be written, we forget that we read far more code than we write. Reading and understanding the code is by far the most common development activities. Still, we picture ourself while types on the keyboard when if you pose one minute and pay attention you don't write code, you're reading it. It could be the one you just typed or the one you typed two months ago or a colleague had or it's the code of a gem that you need to use. So, yes, we dream of us capable of continuous typing (laughing) of when most of the time it looks like that. Us looking at code trying to understand it, thinking about what we could write, but how much do we read?  So we can, at least, state the following, for each line that we have written, it has to be read at least once. We can do a quick estimation based on the number of changes we did on the code base, so, just take one example of mine, it's a project I spent 300 days on it to get about 15,000 lines.  I did change 600,000 lines, so it means that for every final line I changed 43 times more. So ‑‑ and I don't even count all the changes that I didn't commit neither the time I spent to understand, again, and again the code I've written before. Still it's a good estimation of the ratio between writing and reading. And indeed, we can accept that bottom line which is 85 percent of the development activities consist in reading. And if you discover a new project, it's even more, something like 95 percent of your time. So, if you consider a work day of 8 hour, you have barely 30 minutes to actually achieve something. So, if you want to write something in that time you need be quick, you need to find quickly what you need. So, you need to learn to dive deep into the project to find quickly the tremendous sure you're looking for. And use it in order to fix a bug or implement a feature, whatever. So, I like this analogy with scuba diving because in scuba diving when you dive on a wreck for instance, you cannot dive without any planning, without preparing your dive because it's the best way to get lost. To have a problem or even worse, to die. So from the easiest to the more complex dive you will prepare what you will do. It's the same when you code. Wondering with ‑‑ wandering without any goal or any plan is the best way to waste your time. It's the best way to not achieve something on day one. You don't need read the whole code base in order to achieve something, you can do it step‑by‑step, and at the same time write something. Achieve something like fixing a bug. Because it's what's really available, not reading just for reading the code base. So for me it's really like a journey and it needs to be planned. So, what I would like to do, today is really present the approach I use each time I need to discover a project to dive into it, and it's really about how to discover the project the important part you need to read and write some code at the same time. So, the plan consists in defining a goal, getting a map, using the right equipment and dive, I mean write code and do it again. So the first thing you need is really to get a reasonable goal, something that motivates you, that drives you. Something that you can plan for. That could be fix a bug, implement a feature or even add some documentation or just use it. So will illustrate the following with an example of mine. Two years ago I was processing stack overflow and I found that question about upon your array module. Normally when you pass force or ‑‑ to do option proxy the open meter should in your HTT proxy environment viable. As I did already use that option before, for me I was surprised that it didn't work anymore in Ruby .0. So the first thing I tried is to reproduce a problem, so I where a very small script that you see here. So very complicated. And I got that error tag, it was using the proxy variable environment when it shouldn't use it. So for me, fixing that if code was the first goal, I had a goal but a goal in itself is not enough. What you need is a map, I mean, to know where you need ogo because if you don't have a map you don't know how to reach a goal. So it's about of where is the project, where is the code, where is the documentation with all the basic information about the project, so for instance the read me file that explains how to install it, how to use it, write, communicate with other contributors and developers, and so on. So in my case this was let simple, something where on GitHub the tracker is still on read line ... this is it. It's great to have a map but you still need to read it to understand that map, so you need a Legend, a great one. (laughing) so the first you can look for the is contributing guideline, there you find plenty of information about how to contribute to the project like how to report a bug, how to submit a bug, which code convention you need to follow, which test you need to write, is there a CI and so on. Another less technical one is the code of conduct it will remind you how to behave with others. Both are important, not following them is rude. But don't be afraid, if you're not sure you do it correctly just ask and people will help you. So, in my case I found quickly the contributing guideline and it contains two links one two tracker and another to the Wiki of the MRI, so by reading those pages I learned how to build a patch, how to use it, how to test it and so on. Then the other thing you need to understand is the hierarchy of the directories because it's really about where you can find what in the code base. Where are the tests, where are the resources, where are the documentations and of course, where are the code source. You don't need to be exhaustive, just find what you need, if you just look for one file just look for that file and you will understand the role of the directory where the file is. So for instance many my case ‑‑ do you hear me.


So in my case I was looking for the file containing the open URI module so I just go for it. And then I found where all the other files of that module was stored. And also I looked for the documentation to check that what is officially expected for that module. So sometime it's hard to find the information. Then to to the people that know it they will give a quick overview of the project, whale help you and I think that's the easiest way to know about the code base. For Open Source software you will find them usually on the issue tracker, on the IRC or the mailing list. And for a job there are your colleagues just ask them during your coffee break or lunch of or send an e‑mail to ask. So in the case of MRI, all that information is in the readme file. So this probably p apply less for Open Source software, except maybe for bigger projects, but for job it's rally common to have a development meeting, and it's a great moment to listen and to learn how ‑‑ what are the current problems. How people work to kind ‑‑ the kind of work flow they follow, to ask questions if you do not understand something or to discuss what you can do if you don't have yet a goal. I think if you ‑‑ if you are blocked you need to ask someone to help you because if you ‑‑ you don't stay blocked the whole day you will waste your time, Open Source or not, people are ready to help because eventually you will do the same by contributing. So p apes you need to realize the importance of all the information. Someone has taken time to write them down, so it's nice to have the habit of doing so in return. So if you create a new project try to write and contribute to read me files and so on. So now you know where to go, you know more about the place, it's time to get the right equipment to dive into the project. So of course to read and edit code you need an editor.  I don't waste your time with that. Or maybe you have too much time for that. (Laughing) then you need to prepare your environment to check your requirements like do you need a database or data storage what are the dependencies. It will give you a better idea of the whole architecture of the project. If you have a gem file use bundle Viz. It will give you the graph of all the dependencies, for instance this is the deopinion densies for getlab, to just ‑‑ Git ofLab, this is a part of all the gems that GitLab is using. Running the test, I think the best way to check that you have all the minimum needed to develop. Also, check if the project user particular CI or do they run some tools like row bow cop and of course don't forget to sign up to the tracker (robocop) so I found that running the application is a great way to have a better feeling about the application, what it does. But sometimes it's very complicated to set up the whole environment, so more and more project provide virtual machine or container ready to run the App. So if there is one, it's very convenient, go for it. So in my case it was just ‑‑ it consists just into running ‑‑ in running that script. So the idea is that you just need to run what you need. You don't need to test every feature as possible in the project. So just use what makes sense according to your goal. So you have all this information still you ‑‑ we don't have dive into the project, so I mean we didn't read anything so, I think that's the right time to do I so thanks to all this information you know where to look for, but you don't know what to read. So if you look at the open‑URI module, which is a small module you can see there are a lot of things to read. You have two options, one is to read the whole code base, the second one is to just read what you need.  I prefer second option. And for that, the first thing you need ask yourself is what's your goal. In my case it was to understand where is the proxy management implemented?  To understand how does it interact with other part of the code. And also by doing so spotting the bug. So for me the best way to discover code base, to read it is to get the whole graph of the case, so for that I use trace point API, so the idea is to track every call that comes from your case and the scope of that code. So you can see there on the even line and call. The line will give you the scope of your call and the call will give you the location of the implementation of the of Mater ‑‑ so just apply that on my case and I get a very long list of all the possible codes that come from that case. So the first one is simply the call of the open meta. Then we can read that there's some part two parse string to make it a URI instance, then you have the creation of the URI instance itself. Then you have the management of all possible options that you can pass to the open metered. And then this is interesting because you have the call to open HTTP, we know that we will open an HTTP resource.  I know where the look, where to start my reading. Then you have several calls not very interesting, about requires, again and then we find something very interesting because they are related the management of proxy. So in blue you see the creation of the HTTP client then you have the test if there's a proxy. So with that have the location where to look to understand the different parts without opening any file. So I use that sequence, of course, to read my code, to follow the execution and thanks to that I can find important line where the bug is. So, that line consists in creating the HTTP client and normally when you create that instance you can pass an option to enable or disable the proxy. And in that case it wasn't disabled because by default it's enabled. So by tracing the calls you got a lot of information and like the location of the different calls. And you can, of course, use this information to search for some specific information. So you can use doctor good night for that. Like to look for ‑‑ Grep for that, like all the codes of Http or the definition of the meta. Or the definition of the con instructor of HTTP class. And so on. So it doesn't apply in that case, but if you have a gem file it's very easy to open the source of a particular gem by using a bundle open. So it's a very quick way to open the source of a gem. If you don't have a specific case I found what trace is really a nice context to start from. So just take get the call graph from a particular test. It will give you context to understand what you're reading. So it's a test of Gitlab, I just put my tracing of call graph on a particular test, and then I will get all those code graph and I can read the code in the context of this particular test and understand what I'm reading. So, I've read a lot, now it's time to edit the code and fix the bug. So the bug is in one like, the fix is in one line, and again I think I've read one hundred lines which is less than the whole module, but, still, it's a lot. So you have done everything, it's ‑‑ report what you did, support the bug, submit the patch I's about communicating what you plan for and what you have done. So ... in my case, I get that ‑‑ my first bug report in MRI, it took me two hours to learn how to contribute to MRI, to learn about the structure of the project, to find a bug, to fix it. Even if I didn't know about the MRI code base before and report a bug, submit the patch and answer the question so the problem was simple in a way, it helps me to discover the MRI code base and project and, in fact, it's an approach I use every time I need to dive into a project.  I found it very useful whatever language it is, using that approach it is for me, an efficient way to do. So, again, if you are stuck, just ask someone. Don't freeze, interact. So when you do it once, you can do it twice and I think it's a good moment to discuss what is a good goal to drive you to discover a code base. So the first question is how long does it take?  A good period is about a half a day. So it keeps you motivated because if it's too long it's difficult to stay motivated. If you don't know what to do you can just check the tracker, usually they list some bugs, some features you can do, also into the contributor guideline, usually contributors can list the kind of contribution you can do. You can run the static analysis tool, like relook up and check if there are any issues that you can check. It's a grate to navigate through the code vase, by doing something. So you are active, when you are active you learn more about a code base. So this is it, there are plenty of options to discover a code base, just keep it simple. You know how to plan it, you're free to discover what you want and just by doing and by writing code. And by respecting your limits. Again, if you Blog, just ask, people are always ready to help you. So as a recap, if you want to dive, just get a good goal, something that motivates you, like fixing a bug. Get a map in order to know where you can find the things you need, get the right equipment so you can ‑‑ efficiently read your code base, to efficiently write what you need to write, and just do it again and explain your reason. Thanks a lot for your attention. (Applause)


Okay, questions?  Anyone?  No questions?  There is a question. There you go.


Hi, I was wondering, you have this call graph technique, which I find very interesting, but how do you deal with understanding what these calls do when you haven't read the code yet ‑‑


Excuse me ‑‑ how do you deal with understanding the call graph when you haven't actually started reading the code yet. How does that work?


That's why it's important to have a context. Because you have a context specific use case or test you know what the code should do. And you can then infer things by reading the sequence of calls. When you start to read without any clue what it's about you need to read a lot before to figure out what is exactly about. So, I think the first starting point, a very important starting point is to have a clear context, a functionality, something that the code does. Of


Does that answer your question?  Good. Someone else?


Hi, this is the second time I've heard a metaphor about diving and the first time was a writer of children's fiction explaining how he came up with plots in his story. And the types of challenges he had. How did you come up with this metaphor?


So I just started a few months ago to do scuba diving and I like when I explain something technical to have something concrete I can relate to to have a story. And by learning how to dive correctly I found there were a lot of parallels between that practice and by the fact to dive into a code base. And diving is a lot of about process. To create habit and discipline and to ‑‑ so you don't have to wonder what you need to do in order to correctly do the thing, test the thing, that's why preparation is important, that's why to have that process is important. And I think it's not because we are smart that we can not follow some good practices. I understood, I realized that I used some processes to read code base so I frame it ‑‑ I didn't really change the thing I just put the process I used into the right case, the right box and it fit quite well so, for me it was a great way to present it.  I hope you enjoy it. (Chuckles) thanks.


One more quick question:  Only very long questions?  Okay, then, Eric?  (Applause)


I just want to make one small announcement after that talk, so in the talk it was great talk but there was a picture of someone being beaten for using the wrong white space which violates our code of conduct. It's okay, but I just want to say to everybody, this is not acceptable behavior, do not beat people for using the wrong white space, you can use any text editor that's fine, we just want to have, especially for the beginners in the room a sort of judgment free zone for white space and text editor. Just want to call that out.  I think it's a relatively minor violation, but it's a violation and just wanted to say something ‑‑ I know ‑‑ a note to future speakers and everyone here (Applause)


Also I don't want to be beaten for using Atom, to be honest.


A range of possibilities that becomes available using beacons, Mica will show us some of her prototypes that she built in Ruby and Rails and in JavaScript. Sometimes silly, mostly educational. Mica ‑‑ Meike is doing her masters in human computer interaction in northern Sweden and I've heard she also has some tips on camping, not sure if she'll share this in her talk, maybe you can grab her during the lunch and figure out how to become a better cammer as well. Are we almost set up.


One minute to set up. Cool. Who's camping?


And you know all about camping already. You're all set up, you don't need another mattress or blanket. It was cold last night. It was cold last night. Yes.  I know. It was even cold in the hotel, sorry.


Who has used Beacons before?  That's not many, that's sad, maybe after this talk we'll be using Beacons, right.


We have Kimler by here today. (Applause) (Kimberly)


Your spelled your name wrong.


Kimberly is providing speech to text service, speech to text service. And she's using some incredible fascinating equipment here, a keyboard like you've never seen before and she'll be doing an event at 1:00 in this room so after the last talk, you can get a quick bite to eat, come back here and Kimberly will do a little bit of an explanation of how she does what she does and the amazing service she provides. Thank you for providing the service and for doing the talk as well. That's great. (Applause)


Another rounds of applause for Meike.


Hello everyone, so, I have been working as a Ruby developer, and last year I decided to quit and move to northern Sweden to study human computer interaction. And during my studies I have got to play around with a technology called Beacons, and I thought that would be interesting to share today. So let's imagine we are at a large ‑‑ a much larger multitrack conference and I can think of a couple of questions I would be asking myself during the day. Like for example I would be wondering, is the next talk in the room I'm currently sitting in interesting for me or not. And I might decide I want to go somewhere else and look at another talk but then I need to find another room. Soive need some sort of map, navigation system. Or, as an organizer I might have some schedule changes and I want to inform everybody that is currently at the conference. It also might be that I want to make my talk a little bit more interactive and do some sort of group voting with the people in the room. All of this is, of course, possible today but it's a hassle to navigate through the webpage to find the information that is currently important for me. So Beacons can help improve these scenarios. And what are Beacons and how do they work?  I have some Beacons here. Little tiny devices, battery powered, and what they do is they constantly send out a signal and that is just like a lighthouse. So it pretty much works the same so that Beacon constantly sends out a signal and if you walk past it as soon as you're within range you can see the signal and then decide if you want to interact with it or not. If you don't want to interact with it, you can just walk past it and nothing happens, but if you do need local information you can look on your smartphone and then find whatever information is available there. So you might wonder location based services we already have GPS, but if you have it switched on your smartphone all the time it drains your battery and also it doesn't work indoors and it is also, for some cases, not precise enough so if you have a bus stop timetable prototype that I will show later it might be important to know on which side of the street is the person currently standing on. Okay, but what about QR codes, QR codes are a nice way to like ‑‑ that you don't have to type URL into your smartphone, but also it's quite a hassle to scan the QR code, you have to be really close and also you have to focus the camera and also I have never met anyone who likes QR code yet (Laughing) so technical facts. Beacons are based on blue tooth standard, more precisely on blue tooth low energy, so what that means is that it has a lower range than classical blue tooth and also lower throughput, so it's not for sending data back and forth, but it's just good for triggering notifications. And a Beacon costs around 10‑15‑dollars and the range is 10‑30 depending on what kind of Beacon you have, up to 50‑meters. And it doesn't drain your smartphone battery if you have it switched on all the time. So there are current of currently two major players on the market, the I Beacon standard has been around since 2013. It's controlled by Apple and targets iOS devices. And the Eddystone standard which has been released only 3 weeks ago is from Google. It's Open Source code and it targets all operating systems. And when we look at the Beacon payload, what kind of signal the Beacon sends out then it's I Beacon from a broader perspective, it's a UUID that's been sent out and the Eddystone sends out UUID URL and Telemetry, if you want to check the status of your Beacon like how much battery power is left ‑‑ Telemetry. What ESARIS does that mean?  I'll show on this slide. If you have an I Beacon it will broadcast UURID that is programmed to open up an App on your smartphone. So as soon as you're within range of an I Beacon it opens up an App that's been programmed for and there is some sort of interaction that is meant to happen then. And if you have an Eddystone Beacon it will also be ‑‑ it is also possible to wake up an App on iOS devices, but also on Andriod. And ‑‑ that I have been working with and that has been available earlier, not just three weeks ago is that Beacon's broadcast URL, so basically any smartphone can receive a URL and then it just opens up in your browser. That's the vision for now and you is to have an App installed that scans the environment for Beacon signal, but it's meant to be built into a browser. So how does that look like?  In my studies I built a bus stop prototype so it's pretty simple scenario.  ‑‑ just imagine you're standing at a bus stop where there's no digital information displays. In's information displays where you see how many minutes the next bus leaves, but it's not there at every bus stop, so I had a Beacon like this, you can push a button on it and then you can save a URL with your smartphone on it and then it offed ‑‑ and then you ‑‑ as soon as you are within range of the bus stop you can switch an your smartphone screen and then you will see the notification like this one saying departures from the bus top that you are currently at. And this is the physical Webapp or some sort of other App that is scanning the environment and that now shows up the notification. But it's a silent notification, you don't see it unless you switch on your screen. And then you click on it. And then you end up within the App that just shows the URL again, in the future it's supposed to open up directly in the browser. And then you just see a very simple Webapp that's just normal Webapp like any other App like Sinatra that pulls information from a public API about when the next bus will leave. Make use of the current time and the current place I'm at and show the information that could be important at that moment, at that place. Okay so bus stop seems to be a good case to use Beacons for. What else is there?  So first retail is of course interested in it, they want to send you discounts as soon as you enter their store. Also museums, you can make some sort of game like indoor navigation thing to make the whole museum experience much more fun. And also make information more accessible, of course. Airports, I built another prototype that as soon as you enter an airport you see a list of all the departing flights and then you can lick on it and then you can subscribe to updates on your flight. So you get a push notification as soon as the status of your flight changes. Then restaurants, so, you could walk into restaurant and then have the menu on your smartphone immediately, you click on it, order your food, get a notification as soon as it's ready instead of having these physical buzzers. Also of ‑‑ guiding, walking up to a walking trail and have the map available for the trail you want the hike on. And also bike or Karen tall, for example when you're in a foreign city you could just walk up to a car to go or bike, subscribe to the service and after you go. So for my master thesis, I did some user experience evaluation with these prototypes. And so what I did was I had the two prototypes that I talked about, the bus stop and the airport. And I also had another video of someone that was buying a snack from a vending machine by the same technology, clicking on the phone, ordering a snack. So what my participants did they compared it to other things that are already available, like for example bus App or timetable brochure or airport information displays. And what they came up with is they described the prototypes as very up to date, personal working instantly and easy to use. But they also noticed, of course, then they were highly dependent on their devices and the energy and they were also quite skeptical when payment was involved. So ... is this all relevant today?  Or what's the status of it?  So it's pretty much prototyping, status I would say. And I found some numbers 30,000 Beacons at the end of 2014 and 4.5 million by the end of 2018, but if that's going to happen, nobody knows. And what I can say is that the of Eddystone standard is only available for three weeks now, now it's possible to target all operating systems and not just iOS devices, and also the Chrome team has sneaked their way into iOS, so if you have the Chrome today widget you can activate it. It scans for Beacons, it's one step towards not having an App installed and making it available for everybody everyone. So that has been released a week ago. So there's a lot of movement in it and I'm excited to see what's going to happen in the future. So, 15 minutes are not much, so if you have anymore questions, you're welcome to ask me.  I also carry some Beacons with me, so if you want to, you can install an App and find out what's there. Thank you (Applause)


Questions?  All the way in the back, oh my Gosh.


I'm so sorry for making you walk all the way. Do you think that Beacons are really a web technology or not?


Well it depends. You can have Beacons to open up apps, then it is just not web development, obviously, but the Eddystone Beacons just send out the URL, so what you build with it is just web technology.  I think that's the more exciting thing about Beacons because that's going to work with everything and you don't need to have an App installed. And like you don't have to ‑‑ you probably don't have an App installed of your airport or something and you still might want to use some services like get updates on your flight.


Yeah, I understand the one thing that I've been wondering about is Beacons are really good like personally instant, but the load time of like a mobile webpage is anywhere between 5 seconds and 8 seconds. So do you feel like the future of Beacons is like the worldwide web or more integrating them into apps?


Well, I can't say which direction if it's going to be more popular in combination with apps or with the web, I don't really know so ... we'll see what's going to happen I suppose.


Okay, cool, thank you.


Thank you all ‑‑ next one. Okay. You're funny. I'm wearing the wrong dress for this.


Hi, I have the impression that we will have a similar problem to fishing males with Beacons, if there's an official vending machine or bus stop Beacon and I put my rogue Beacon close to it I can make people believe that they're talking to the bus company. Have you looked into that?


No, not yet.


Short and simple answer. (Laughing)


I'm wondering if Beacons take off and they're very popular and you're at a shopping mall and there's like 200 Beacons within 50‑meters, how does that work from an HCI standpoint?


I haven't tried it out yet so ... it would be interesting to study. And for like if everybody installs his or her own App then ‑‑ Google has some sort of sorting already so it sorts out the thing that is most close puts it on top, so you have some sort of ‑‑ yeah, sorting already. Yeah ... that's all I can say for that.


So for the ones that interact with apps you actually have to install an App before you phone will contact a Beacon, right?  Because I was wondering how does it work when you have the URL thing ‑‑ do you actually have to allow it to contact your phone and open a web site or something or will it just do it on it's own?


Well, for now you have to have an App installed or the chrome today widget on iOS, and also you have to actively click on it. So if you have the App installed it scans the environment, but it doesn't notify you actively. It just shows that there is some information and if you decide not to click on it, you don't do it. And it also made secure, at least the Eddystone from what I have read it doesn't track you, so ... did I answer the question.


Do you already know or have you tried it?  If it contacts you a URL how does that work?  Is it just gone and give you a notification I would like to open this web site or does it just open the browser or ...?  Do you just need this Google today?


You have to click on it to actively open it in the browser. And it is meant to be that it is built in to comb so that if you have home installed it would start showing this notification (Chrome) I'm sure you would be able to switch it off. On the chrome today widget you have to confirm you want to have this physical web thing activated. So you have to actively say, yes, I want my phone to scan the environment.


Okay, thank you.


One more question while Davy sets up.


So what's the payload that can go into the URL, the whole logic of the ‑‑ how large can the URL be?


For now the URL needs to be really short. And so what I did was I had pretty long U RL and then I also had the parameter which said at what location I'm currently at, then I just put it into a URL shortener and saved it on the Beacon, so it is limited.


Thank you, thank you Meike. (Applause (So on the healthy tips front there another announcement, which is we have a to be of Bananas, so ... so go crazy for Bananas, Lucas in charge of getting food for the conference ended up ordering tons of Bananas, so eat them, they're everywhere and deliciouses.


Banannas! (Applause) yeah so that's one announcement the other announcement is that there is ‑‑ this is a less healthy tip, but there is a new, fresh supply of the delicious cheesecake blueberry ice pops. So you can have those as well. Very important announcement. Just wanted to also plug Ruby week a bit while we have a second. So after this talk
Q'S going to be a four hour break and there's tons of great activities going on at that time, so you can go slack lining for example or learn how the live transcriptions work, there's bikes, I think we have 50 bikes and they'll sort of be in circulation, the first people that have bikes as soon as one is returned you can get a bike. Same story with the canoes, there's 8 or 5, but sure to sign up for canoes, sound Cloud is hosting a print your own t‑shirt activities, there's a J ruby contributor summit going on, that sounds like an interesting one. Debugging weird front end issues, you can learn how to do that with Florian, a sketch notes workshop. Pair programming for fun, learn about shoes with Toby, you can jump in the like, Mwine is doing that one too, not sure how that's going to work ‑‑ Malwine) canoeing is full, but I registered for that, I'm going to unregister because I'm not dressed appropriately.  ‑‑ of ‑‑ never mind. Meike just negotiated for my spot, so ‑‑ Ca inooing is full, but there's plenty of other great activities, be sure to check those out, Meike, thank you for letting me borrow your laptop, your reward is coo knewing. So, next up Davy Stevenson will be giving a get talk on orders of magnitude. We met for the first time was it at true north in Stockholm, which is a great conference, it's over now. The last one happened when we were there a couple years ago .
We were talking about benchmarking, I said there's this cool tool for benchmarking called benchmark IPS, yeah, I know I forked it I'm working on improving it and this orders of magnitude thing, maybe I'll give a talk about ‑‑


No that's not that talk, I gave that talk about Rubyconf, this is a similar but different talk about orders of magty Tuesday. Warm well I come for Davy Stevenson. (Applause).


So yes, if you want to know details about the benchmark to go gem, I gave that to be at Rubyconf, it's on the internet somewhere I'll be talking about numbers. Bignum pers and small numbers and a bunch of numbers in between and more importantly how our brain deals with those numbers. So first I'm going to talk a bit about something called number sense, that's an idea that certain animals have an innate understanding of numbers built into their brains. It might not be surprising know that animals such as elephants dolphins ant great happens have been shone to have number sense ‑‑ great Aps. It's been proven for birds, crows are one examples and even insects have been shone to have innate number sense such as honey bees and ants. It's been shown that these animals that have an innate ability to distinguish different numbers such as one verse two three verse four. Tends to break down at about five or six. Though there is some ability to distinguish numbers with a larger difference such as the difference between 8 and 12. And of course humans have number sense as well, this is not surprising, what you might be surprised to find out is that ours is not measure my better than that of most other animals, human groups that have not yet develop finger counting have a hard time distinguishing quantities above 4 so this comes to the very first lie that we think about ourselves that our brains inherently understand numbers. In fact it's very limited in scope. We basically can handle one three and four and above that we must learn how to count. So counting is something that human have had for a very long time, finger counting is the primary first step towards counting, but we have other ways of counting as well, such as using stacks of pebbles, notches on sticks or notes on a rope, this is a way for us to distinguish numbers larger than four before we have words to describe these numbers, so we can use pebbles to keep track of our heard of sheep without actually knowing the exact word for the number of sheep that we have. Next, of course, it does seem to be very useful to have names for the numbers themselves. So this' kind of the next step in human evolution in counting. However the very first way that humans developed names was very limited and we started out by just having names for numbers one, two and then many. And this still exists today in tribes such as the sand people of Mabia, various Aboriginal tribes in Australia and the Paraha tribe in Amazon. From there many humans tribes began having different names for different number words. So the Thimsian languagee wig from a tribe in British Columbia has different sets of names if for the number depending on the thing that you are counting. Before we spend much time thinking how silly this sounds notice that the English language bears the memory of a similar history from our past. So that brings us to our second lie that counting things is easy. Abstract number counting was in fact a very difficult thing for humans to discover and counting takes a lot of mental energy. Now that we have learned how to count and we have words to describe the various numbers we can begin to create NUMERAL systems to help us count larger and larger numbers. First numeral system we're going to talk about is the Roman numerals, so this is basically an improved tallying system. The characters that represent the different numbers I for one, V for five, X for ten L for 50, C for 100 and M for a thousand. These are positioned by values so we can see all of the I's are to the right and then they grow larger in value as we move to the left. They did add a little twist on there with subtractive notation so that means C that happens after the M really means to subtract one hundred from the one thousand. But this number system has it's draw backs which is ‑‑ can anyone say what number this is?  It's going to be hard. You still have to do a lot of math in your mind in order to try and figure out what number is being represented. So the next numeral system the Arabic numeral system was a much more successful ‑‑ in this numeral system each value in the base number, which in this case is base ten gets a rep evennational character. And on top of that we developed positional notation which means that the sequence of dints creates the number and the position of that number within the broader group indicates the positional increase in the order of magnitude. Once we have positional notation the concept of expo anyone seuation quickly follows ( ‑‑ now that numbers have a place we can now count that place, numbers such as one hundred thousand forty five can be represents one times ten to the fifth, four times ten to the one plus five times ten to the zero. Another way to represent this with the E notation, which I'm going to continue using for the rest of this talk because it's shorter and doesn't require me to make super script which is really irritating in keynote. So now we have our exponents. And clearly these exponents themselves need some names. So we have generated different ways to name these exponents here's just a couple of examples of ways that we have generated a way the name these numbers. These number systems allow us to community bigger and smaller numbers much manufacture easily and be able to share those numbers with others very quickly with the fewest amount of words we don't have to notch one million notches into a stick and try to share that with our friend. We can just say one million. It's much easier that way. But that comes to another lie that we tell ourselves which is that naming these numbers means that we actually understand the value that is represented by them, we can easily say one billion or one trillion, but internally do we have a good understanding of what does that number actually mean,and what does that number actually represent. For example did Uber just get an evaluation of 50 billion‑dollars, does anyone understand how many billions of dollars that is, how much different is that from one million dollars?  Don't really know. So now we have 3 truths, the first is that our number sense is limited to one, two, three and four. That counting is actually kind of hard and takes mental energy, and that just because we've named numbers does not mean that we understand them. So we can use this in our day‑to‑day lives as programmers. The first example I'm growing to give is in the user interface UX space. By limiting the way that we structure the display to our users to something that's much more easily accepted by our innate number sense dividing things into three sections, not five or seven. This allows people to better understand and better grasp the information that you're displaying to them. Similarly instead of displaying tables of numbers, so that you have to kind of parse and figure out what that means to the user, instead what's a much better way to do that is to actually analyze those values for yourself and to create representational displays via charts or graphs to more easily tell people what it actually means for these numbers that you're trying to display to people. It also help us understand some of the best practices that we talk about in programming, right. This urge to keep our methods short, right, to limit the number of lines of code within each method. This makes sense based on the fact that we're keying into our innate number sense and our being able to understand things at first glance rather than having to bring in our counting brain and trying to analyze things a little bit more deeply. And this also makes sense when we go into the testing arena why do we try and limit the number of insertions that we place in a particular test. It's the same sort of concept. However, you can also go too far into this direction and try to, you know, make each of method or each class too small.  I think there's a balance to play there, which is that if we're trying to track the business logic of a particular piece of code across a number of different classes we don't really want to be having to dig through fifteen different files or fifteen different classes to try and trace the logic being able to limit it to very particular spaces and being able to see it all in one screen helps us understand the code that we're writing. So in order to talk about what very big and very small numbers are, I'd first like to define a baseline for our shared human experience of numbers. And I'm going to do this for both distance and time. So the baseline for distance I'm going to claim is about one meter, this is the scale of our own human bodies and a scale for what we can gasp in the world around us. So that means 23 one meter is our baseline what is the very smallest thing that we can experience with our naked eye?  And this is about E to the negative four or the width of a human hair. The smallest thing that we can experience on a day‑to‑day scale. And what about the largest thing that we can see and touch and conceptualize?  I'm going to claim that's something on the scale of a mountain, we can see a mountain in a distance we can also climb up a mountain and experience it and the size and scale for ourselves. And this is about E to the 4. For time I'm going to claim that ourebis line is about one hour of experience. We divide up our lives into one hour chunks, that's a good baseline for time. So what's the smallest amount of time that we can ourselves experience?  It's about a blink of an eye, which is about E to the negative four. And what's the longest thing that weepers, well that's going to be our own life span, so that's about E to the five. So that brings us to another lie that e with like to tell ourselves which is that we have direct experience with very small and very large numbers. In fact our experience is limited to the width of a hair or a mountain or a blink of an eye to a life span, and in the grand scheme of things this is in the scale of thousand dollarths to thousands. Those are not very big ... numbers. How did we go from living in the thousands to larger scale?  Humans for a long time have known that curved lenses and surfaces magnify objects, the Nimrud lens dates to 750 BC in Syria, there were similar lenses in Egypt, grease Greece and Babylon, they were not super useful to humanity. The problems there being that the mathematics to control how light is being bent and refracted was not yet discovered. Optic theory is the study of such things, and mainly about how mirrors and lenses bend and focus light. The law of refraction is required to compute the shapes of lenses and mirrors that will focus the light at a particular point on an axis. And really the law of optics and the study therefore, you know, picked up steam really around the 1500s and and this maps to approximately when mic scopes were invented about 1590 and telescopes shortly after at 1608. So only at this point in time was our world allowed to expand beyond what we can experience ourselves on a day‑to‑day basis. Due to these inventions and others, it is allowed humanity to drastically increase our knowledge about the world. So going back to our baseline of one meter now that we have science to help us what can we see now?  So we can see things that are smaller. We can see bacteria at E to negative 6, we can create micro processor memory cell, 14 Nan no neater resolution shorted shipping in 2014, that's E to negative 8. We can produce gate length to five Nanometers, a 16 Nanometer processor, E to the negative nine, the size of Atoms themselves are not much smaller at E to the negative 106‑78‑9153 Pico meters is the size of the radius of a silver Atom, this is insane, right. And we can even determine the width of an electron. Which is E to the negative 15, these are massively tiny numbers compared to the width of a human hair which is a negative E to the negative 4. We can see things that are even bigger. We can go and I believe vest gait the moon and E to the 6, the sun at E to the 9. There are even stars bigger than sun such adds Rigel and Betelgeuse a read super giant in the con stilllation of Orion. We can see things such as the pillars of creation, this is a small subset of the picture of the eagle Nebula, these pillars are named because the gas and dust are busy creating brand new stars, the left most pillar in the picture is four light years in length which makes it E to 16, which makes it as big as compared to our one meter as an electron is small so what about time?  We can detect things that are even smaller than blink of an eye. Sin naps in our brain is about E to negative 7 that's one millisecond. The processor cycle of an 8186 or 8188 in 80s was five megahearts, E to the negative 10. Processor cycles E to the negative 13. And so we can discover things that happened much longer in scale as well. What's the organism that lives the longest it's a Bristlecon pine tree that lives about five thousand years, humanity itself has been around 200,000 years. It's E to the 9. And die sours lived for over hundred million years, which is E to the 12. So that brings us to another lie which is we've been able to explore the world in great detail for a long time. Not true only in the last couple hundred years of our hundred thousand years of existence is going beyond the thousands two thousandths. So our brains are also really good at estimating things, estimating the odds. And what is important here is that our brains are able to determine risk. We need to know whether or not we're about to die so we can prevent that from happening, it's kind of a bad thing. So really our ability to do the math on analyzing risk is really based on immediate danger. That of course means that our brains have somes in determining the differences between immediate risk and long‑term risk. Right. We are much more scared of a shark attack or a snakebite even though while yes those are very dangerous things if they happen to us, but it happens very infrequently, as posed to the longer term risks of smoking cigarettes or driving around in car, while they have tiny Inc. have risks they happen so often in their day‑to‑day lives they can build up to be massive dangers to ourselves. So our brains with not good at calculating odds. It's a lie that we tell ourselves, we think of ourselves as rational beings, we think of ourselves as being able to do this math and try to determine what's more likely to happen than something else. In fact that's not very true. Especially when we're dealing with numbers that are both very small and very large, our brains have a hard time determining what is most likely to happen. So we might say things to ourselves such as there is no way that a user will do a particular thing. Or no way that two users are going to be clicking that button at the exact same time, right, that's never going to happen, ever. Or, no way, could these two lines of code be executing at the same time, right. There's hundreds of thousands of lines in this code base, which's the chances that those two are going to be executing at the same time, don't have to worry about that right?  Don't have to protect against that case?  No, that's your brain trying to tell you that the risk of something happening is not very high, when in fact when you're dealing with computers that can process at such high rates, things are happening so often that we can't even do that math in our brains anymore. The chances of these things occurring rise dramatically. So what we need to remind ourselves is that extremely large around small numbers are new experiences to our brains. And calculating odds of something occurring is actually really hard. So how many times do people see something like this, right?  So this fellow is a German fellow is ‑‑ was in the Guinness book of world records for having the verify my longest legal name up until they actually took this out of the again nurse book of world record. He has 27 names, the first 26 start with each letter of the alphabet and then his last name is something like two thirds of this page. He goes by the name hubber Wolfstern. he he D. he's dead now.
Are other people that have similarly multitude of name and there are also people with single name, Cher legally has her name be Cher, no last name. And there's also the royal family of both Japan and Indonesia traditionally have a single name. And when you're build ago Webapp you don't want to piss off the 'em orer of Japan, if he want to sign up for your site you should let him. Then there are people with hyphen Nateed names, their names are told they're invalid. And non‑standard characters, a lot more here Europe. I'm looking for when Emoji of characters become more common names. I want my kid to have their middle name be an Emoji, are you going to be able to handle that input?  Probably not. E‑mail addresses similar problem, for those people who like to use the filtering or tagging mechanism of Gmail where you can add whatever you want after a plus sign it can be useful to sign up for mailing lists and ignore them if they decide to rogue spam you daily there's a lot of sites that won't let you do this, say you're an invalid e‑mail address, and the explosion of domain names how many old sites with particularly e‑mail rejectors that are trying to say that you can't have your fantastic fancy domain and it's totally not accurate. Those are just some examples. These are examples of valid e‑mail addresses as listed by Wikipedia. So do you think you can create a reject that will accept all of these, don't try, just send them an e‑mail, that's the way to do it, right, send them an e‑mail, make them click a link, then you know it's right or not, then it's good. That's just kind of the start, that's a lot of front face, user interfacing stuff. But validating input is one example, adding protections for the explicit expectations that educations will be hit is really important. Those are the case you need use the correct usetion of Newt Mutexex to make sure that what you're expecting to happen, happens you can protect against the case when the two users hit I want tougher of this ticket button at the exact same time, to ensure your financial business logic trying to make sure all the things are in a row for your financial flow happens, you don't get dangling shopping carts or people get charged five times for trying to buy something on your site. That will make them very unhappy. So in reality human experience has ‑‑ and the world view experience has increased drastically in 400 years. For the vast majority of human existence we've been thousandn'tth to two thousandn'tth range. Life span of a human, size of a mountain in the last couple hundred years we've moved to millionth, to billionth, and trillionth. And to write scalable code you must start by devalue ping developing for that millionth user, for the billionth request, and for the trillionth event. In this world the education is not the education, it's the certainty, assuming that these things are not going to happen because you think it's a rare event is follow, and that's going to be the that's going to cause you many sad nights later on in life. So, that is what I would like to share with you, keep in mind when you're trying to develop your code that you're brain is not as smart as it thinks it is and Bignum pers are very big and small numbers are very tiny. Thank you (Applause) and now we get to like have fun and stuff, exciting.


Not to can that ballies the time we have for activities, we have time for two quick questions, so who's going to be first.


Or we could just go eat the ice cream that's out there too.


No questions whatsoever?  Then Eric, I need you.


Okay, great, another round of applause for D aavy, that was great.  ‑‑ Davy, that was great. (Applause).


Thanks. Okay, a few quick announcements before you go to lunch. So Luca the Banana guy, if you have special dietary requirements find him and he will communicate those to the kitchen staff. Luca, waive your arms, great. That's Luca, otherwise there'll be separate lines for meat and vegetarian and Vegan, just sort yourself no into the right line. Go do activities that are happening now. They're starting now and yeah, so go do that and make sure to stay hydrated, it's hot out there, everyone should of gotten a watt ercontainer in their ‑‑ when they registered, so make sure to fill those up, stay hydrated and be back here at 5, the next talk starts at 5:00 p.m. sharp. Go have fun, have a nice Siesta:  (Applause) [THIS IS A CAPTIONING TEST] [THIS IS A CAPTIONING TEST] [THIS IS A CAPTIONING TEST]


Okay, now is the time for all good men to come to the aid of their country. Testing one two three four five. Someone want to talk a little bit.  I could make stuff up. Now is the time for all good men to come to aid of their country.


I notice that you left out swear words. Of.
>>


That with.


Testing wound to three four five. Now is time for all good men to come to aid of their country. :. Have have, a a I I 12346789 and it's adjustable.


old that ‑‑ testing one three four five, six seven eight nine. The the the the is p had had can are can can can canc can?
A.
S theseseseseseseses of p t p t t p pes z achieving seesories. Accessionorys. Of excessories. Accessory. Of p     7 ever the p had ever did can are of the are asktionen is evers can   Plover. Are with can p the theh are

f of Daniel Schweighofer, Daniel, Joseph Wilk, Joseph, Marta Paciorkoswka, Marta, Rebecca Poulson, Rebecca, Terence Lee, Terrence Lee. Terence Lee.

>>


Saturday ‑‑ after lunch session. Eurucamp
>>






Okay, great our next speaker will be Terence Lee, he comes all the way from Austin, Texas to speak with us today. He's one of the organizers of keep Ruby weird which is an Austin based weird Ruby conference. And yeah, does Ruby care owe I can and things like ‑‑ Karoki and things like this, this talk I'm looking forward to, I think, I wouldn't say originated but last year at Rubyconf Portugal we were having a talk about Ruby start up time and how for something like Rails okays maybe that doesn't matter so much, if it takes a few seconds to start up a server, an interactive command line interface or something like that, yeah, it's actually Ruby start up time is a big downside and you start seeing people looking into languages like Go or maybe Crystal as an alternative do that. Which is great, Crystal is very cool. Terns has this thought what if you could still use Ruby just make it faster with something like M Ruby, I guess that's what this talk is going to be about, warm welcome to Terrence. Tell us about M Ruby.


Thanks for the microphone and for the introduction. I'm here to talk about M Ruby like Eric was saying, but of course, if you've seen me talk before I'm a big Friday hug Evan Jacob list, and I know it's Saturday, but we just had a long break, I thought it would be great if we could capture a picture, I know we got one from JRuby, but eurucamp is it's own separate conference, I would like to have a picture of all of you hugging 2 the camera if we could all stand up. M


Oh, sorry messed up. Hold on. Yeah. Happy Friday Saturday thing. Oh, wow! Whatever. Thanks guys. (Applause) I know we're headed back to Berlin tomorrow for the party after eurucamp, so if you find PJ and I at that party, I think we're going to try to lead a group to go and do some Karaoke. So look forward to that. Like they were saying I'm Terence Lee, I go by Hon 02 on Twitter. We have amazing Tacos, if you're ever in town or passing through, reach out to me I'll be happy to take you out for awesome Tacos. We have keep Ruby weird on October the 3 this year. Davy helped me organize it this year along with the original crew from last year. Looking forward to seeing some you there this year. In lovely Austin Texas.  I work at Heroku. If you ever pushed a Ruby App to the platform that's code that I've written and if that has messed up for you then that is my fault. So you should come and talk to me about that (Laughing) so let's get on with the rest of the talk. So packaging in Ruby. Like Eric was saying, I think we've had a strong culture in building CLIs in Ruby there's been Thor, commander and a bunch of other stuff just as strong Ruby ecosystem for building command line application there. And I think if we go through kind of the Hero command line tool the story of where it started to today you can see the problems that I've run into as well as other people using Ruby to do this. So, to start it off way back in the day when we first released this it was actually just a Ruby gem. So one of the benefits of doing this was that we didn't have to build our own packaging system we could leverage Ruby, most of our time you could only run Ruby apps on the platform. It seemed to make sense, circumvented problems we had, problems we needed to solve but didn't have to by using Ruby gems, people updated and it worked out pretty okay, but then we realized that it actually required everyone to have Ruby on their laptops. And the other thing was that we couldn't actually guarantee or what version of Ruby are people running so all the versions of our stacks had for a long time, or even modern ones oncing Ruby 1.87. As Ruby moved forward our gem still had to support 1.87 because a lot of our users were Mac users and still running system Ruby to execute this gem and if we ever updated it, it would break and they wouldn't be able to use Heroku which isn't good for business. Then we moved, if you go to the tool belt her row cue.com you'll see a page like this. Moved over to packaging the Ruby Runtime into the packaging making basically offering specific packages, if you came to the page for window you would get a windows specific installer, if you came with Mac you get Mac. Then we realized packaging was a pain, every time you wanted to update because of security vulnerability or even just do a release it required like a special set up, we actually had like a Mac mini for a while in the office, the only job was to package the tool belt for Mac then we had a similar set up with VMs for windows, it was a pain in the butt to do each release. And I think doing ‑‑ updating Ruby gems is easy, we did more releases when it was just Heroku, the gem then when we firsted switched over. A few years ago a former employee Blake started working on this project called HK, it was an implementation of the Heroku clients, one of the main motivators when you Heroku ‑‑ return the virgin string of the constant in memory of what it was .
it took almost two seconds according to the benchmark and the go implementation that he did took about 16 milliseconds, you're talking about two orders of magnitude faster. This is not doing network calls, this is the baseline boot up time performance. And a huge part of that was because requiring Ruby, if you aren't familiar is actually pretty slow, so we, the CLI has gotten pretty come collated, support a lot of feature, in order to have any sustainability to development you had to refactor the code and flit stuff into separate files, it's grown over time and you kind of want to keep that clean refactorying and just develop it. But that didn't work in our favor for performance that meant it was harder to develop ‑‑ it was hard to boot up the App imbrues had to do a bunch of stuff. The owner at the time has done a ton of work to make it faster. Hopefully that's not something you is to do when building CLIs, you shouldn't have to work against the system to get clean code. You can compile binaries, and you can also cross compile on a single machine. When you're building HK we could build an OS version from Linux and windows without having special machines you could do it on your own host machine. That was a really powerful thing to be able to distribute it. So that was really cool. But there are some options if you want to stay with Ruby, like traveling Ruby, it handles kind of the packaging of the Runtime and native gems that you're dealing with, and packages into a single tar ball, you have the caveats, you're forced to deal with the Runtimes that they provide as well as the native extensions, so those are pretty big sticking points there. And in short, like I feel like MRI, Ruby doesn't have a great packaging story to be able to distribute CLIs even though it's actually easy and quick to build CLI from it. Which is a little unfortunate. If you're familiar with the gay grant project they went through the ‑‑ Vagrant project, if you go on Rubiment prompt ‑‑ it used to be distributed as a gem, if you go to GitHub pages it's just a go project. Like Eric was mentioning we met in Portugal I talked to him about this, he was talking about exploring Crystal and building CLIs in Crystal, in a way like all those things made me a little sad because I think Crystal and go are both great language wigs and bring a lot to the table, but there's something about this community, like the Ruby community and trying to build things in Ruby that makes me love like, you know, going to work every day and working on this stuff, so I want to build CLIs in Ruby and not in Crystal or go and see if it's possible. So basically I want to kind of solve this packaging problem and over the last two months for this talk I've been working on this project for Zachay Scot who has been helping me, it's called mruby‑CL to try to solve this problem. So here's the link to the GitHub page there's a readme with information and you can download it. So we had basically four goals for designing this application, or for this project . First of all we should be writing all same Ruby.  I talk about building stuff in Ruby, that means I want to continue writing stuff in Ruby, I don't want to write C or other things, inside of mruby CRR there's a Mrblib project you can stick as many files as you want and it will get compiled into the library.  ‑‑ as you can tell it has a handful of Ruby files that's basically the core code of what the CLI is. And the second thing is performance is a feature. And like Eric was saying it's boot time performance that we care about for CLIs, because you're running it, it's quick lived and you care about getting that information fast or making that network call and returning as fast as possible soft to kind of get baseline performance of what you can expect in MRI on Ruby 22 on my laptop, if we have the hello world App and time Itaú BBA takes about 40 milliseconds to run it. That's not insanely slow, but over time as you add requires it will get much shower. And using mruby CLI is the example of mruby it takes 3 milliseconds, that's like the order of magnitude performance difference. So that's within the ballpark of like what you can reasonably expect which seems good enough for me. The other thing that's really great about mruby is there's no require so you're not going to pay that penalty of having a bunch of files like that they get come biled down into the binary and get loaded. You won't see a huge degradation. The third thing I wanted I wanted a single binary for every major platform, like go, I want a single host that can compile all this stuff and not have a special set up. And that was, that's really important to me. When you run the compile task in mruby CLI it builds a binary for each host you have set up, so we have the host here, 65 bit Linux, it builds the buy mare hello. A single file you can pass around and excuse we have it for OX, so building a single binary is important for us. If you're packaging a whole Ruby in there the OSX binary only comes up to 421 K for hello world.  I think that's a pretty reasonable size for a binary that does not have any indeopinion densies. We don't want you to set up all these Compilers to get up and running, it's important for people the adopt the project since it's new easily get up and running and write and not spend all this time to try to get all the stuff set up. You want to write Ruby that's why you've come here. So we're leveraging Docker. The reason for this is I only want to solve basically the one path of going from one X to compiling binaries and compiling OSX windows and Linux and not cross compiling tool chains for all the operating systems. So we have a Docker container that has all the tools for the cross compile that you need. So all you have ‑‑ all you need is Docker plus a text editor to actually build mruby application, which I think is pretty cool. So to walk through a simple hello world of how you would use this and set it up you just ‑‑ you download the mruby binary put in your path run mruby CLI, takes the set up flag and you're passing the application name, in this case hello, it will generate hello folder with a bunch of files in it. We can run this compile task which is a Docker composed task and then it will build all the binaries for you. 32 and 64 bit for all the major operating system. With Docker Shell we can run a container inside of Linux, then we execute the Linux binary we actually get hello world back. You can do this today like we have shipped a project that you can actually do this on right now. And so I think to actually understand what is actually going on behind the scenes we have to look at all the files bee being generated during set up.  ‑‑ make up the set up that we talked before not going to cover those in more detail. If you don't understand the Docker stuff I'll answer them outside of the talk or talk to a lot of people here who have done Docker stuff. Let's step back and talk about mruby.  I found a rush pass log in covered a bunch of stuff with the CLI project. M ruby a lightweight implementation of the Ruby language that's targeted for being embedded in other languages. So if you're familiar with Lua, that's probably the closest like, I would say competitor in that space or something the most similar to it. So you can embed mruby and C and many other languages. But just because it's relatively new it doesn't mean it's a toy project like it is with sponsored by the Japanese government and this is the GitHub project to seem R&D lab in ‑‑ Ximenzi in Beijing, they have the mruby bits running and put this on firmware so that's pretty cool.  I's being used seriously, it's not just a toy project. Here are some pictures of some contributors, I'm sure you've heard of this Matz guy, he was the creator and question signer of this language.  I think he's a great language designer. I was excited to dive into this mruby stuff. What are the difference between MRI, what am I doing to actually use this other, basically subset or something lighter version of Ruby?  So one of the things that since it's meant to be embedded and targeted for other architectures and platforms there's no operating specific libraries built into the core, you don't have file, you don't have socket or any IO, that doesn't mean you can't get access, it's just built into the core part of mruby. That means it's not thread safe because the parent languages are supposed to handle that. There's no thread, no fork. But what you do get is a subset of Ruby 2.1 syntax, you get a lot of the things you come to love and familiar with. That means you have Procs, blocks, freedom patching, literals things like that, a lot of things that make Ruby feel like Ruby. And so once you've actually written an mruby script how do you execute any of this code?  So like Ruby there's interpreter, binary of that is built when you compile it and you can pass any Ruby script and run it. So you get that same write and run flow. One of the things that made Ruby feel great to me was that rubble. There's also an IRB rebel that you can get that really fast feedback loop. Where it starts getting interesting is when you start talking about the mruby byte code Compiler, this allows you to pass in a Ruby script and then when you run it through you get an M R B file which is the bite code rep evennation of the script you put in that means you don't have to did it during Runtime if you run it through Ruby interpreter pass the already B you get that bite coat. You can now embed this stuff in other languages, you can actually make a C representation of it. Doesn't matter what the C code is, you get some C code you can call in a wrapper C program that will allow you to compile et to a single binary. So inside of mruby CLI we actually have a C wrapper that we generate for you that you don't have to touch at all that gets generated for the project so you can just not worry about C and just write Ruby. So, the only caveat is that we need a way to hook into your Ruby Code so we basically call this underscore underscore main function underscore underscore. We pass this any of the arguments that are passed into the C code. So you get access to all that stuff. And then you can basically do whatever you want here. And then you can lay as many files as you want mruby Lib the only restriction is it doesn't support directories currently. You can basically just write Ruby and worry about the Ruby stuff. And the entire build system for mruby is mruby so it uses rake, all the compile tasks, if you pop on mruby project you can see how mruby actually compiles and does all this stuff, which is really cool. One of the things, since this is a compiled language there's a build config file that allows you to con fight your the different builds, you can specify the different tools you want the use, it has a bunch of pre‑existing one GCC is a common Compiler you would use. This build sets up the host build. In our case it's the Linux Docker container so these what we're using as the host. And for gem config I'll come back to that later. And as well as we're allowed to set up basically cross builds for OSX we can set up like stuff for chain Clang and you can set up the tools that go to that. When you compile it you get the binaries for that inside of M Jew by recommend rake, it's basically Ruby gems and MRI you have the meta data, the only thing important in the top meta data is probably the bins, determines the binaries that will be come biled this should match the C wrapper. We autoer generate that when you run the CLI command .
where it starts getting interesting, if where you do dependency management and mruby. It takes the name of what you're doing and basically where you get it. Two arguments. For core it actually mean the core libraries and what that is inside of mruby there's an M R B gems directory and a set of core libraries that are a part of it
are no IO built in but you need mruby print to get the puts method that does just standard IO and that's part of the core library. So by default none of that stuff is compiled in you can keep the binary as small as possible and only require the things that you actually run your CLI. The next thing is M gem, there's an M gem listing on GitHub, it's a list of known third party mruby gems you pull from. You can just gem install Rails and it knows where to find it. And it's the same thing, locations of other M gems out there, M or B gems, and the third thing if you ever want to build your own fork you can pull straight for get up, you can put up a project, fork a project and link to the GitHub and they have a short hand that's how you do dependencies, it's simple to add stuff. And then so I'm coming back to this gem config thing, so as part of it you need to actually include your own gem that you're building for the CLI so it actually compiles the Mrb Lib stuff,but the second line I have here, if there's ever a conflict, like say you depend on, like mruby M L but you want to use your fork or two different sources it's going from, build config allows you to override it you can say I actually want this version that way it only uses that and it's always using the one you actually want for compile. So that's nice. Because that's something in bundler we get a request a lot. How can I override the bundler to use my specific fork of something and not have to go rewrite the parent gem that depends on it. And of course since we're Rubyist like testing is an important thing. So we have built in unit testing, there's an mruby gem for it. It allows you to do kind of mini test style test. And what idoneity is all the stuff gets compiled down into a separate binary, it's not include in the the actual CLI that you ship to your users, it's step rate binary that gets run. And then there's bin tasks, as you can see there's require here. This code is actually written MRI, these tests get basically run around the binary that you've built, you can run tests against it to make sure that it's doing the things that you expect it to. So there's a sample of that so some Gotchas, one of the things that sucks you can't leverage the huge CLI ecosystem that are in Ruby gems. It's not always the easiest thing to port an a Ruby gem over to mruby a lot of gems assume that you have all these standard library libs that may or nay not exist in mruby and some of the mruby libraries a trim down to be smaller. So that's kind of a down side. And the other thing is if you're using any C extensions you have the make sure they cross compile cleanly on all three operating systems I've done a ton of work ‑‑ but there's a ton of only gem Ruby gems that work fine out of the box. The road map for this project, I would love to add a lease tasks that goes and builds tar balls of each specific architecture that you're building for so you don't have to look around in the build fold   to find them. They come in a nice thing and you can just ship them immediately from there. Maybe we'll support Rpm Lynn you can specific thing Dmg package or a windows installer, I think having that baked in would make it super easy to ship all this stuff. Next thing is upgrading, as we add features it would be nice to have a command to upgrade and have features in place and not have to monkey patch or pull in stuff on your own as we add features to mruby CLI. Being able to compile for a single architecture we'd love to did, that's coming in the pipeline. As we build out a set of MRB gems that makes sense to build M ruby ‑‑ it would be nice to have a cure rated set to get up and running as soon as possible. Similar to like a Rails gem file that has default gem in there. We want up to stream as much of the stuff as we can do the mruby project so other people can take advantage of the work we've done.  I think this might be a separate MRB gem but some kind of documentation like R or R dock or man pages and have that built into part of the project you can easily document the CLI itself. And so for the last session, what can you do with mruby CLI, how do you proceed from here today?  So the community is real young. Zach and I shipped the first release this last Monday and this' when I started working on slides for this talk. So it's a pretty young ecosystem and I would love help in building out the MRB gems and things that people would want to use to build CLIs. There's a handful of stuff out there, but for option parsing I'm using like getops which is not my favorite option parser out there.  I would love help building something better there as well as other things. Like I sad we shipped a release, if you go to the GitHub page you can go to release's page and there's a binary for your operating system, you can download that and run it. If you don't have Docker, Docker compos, there's links in the readme to get the tools to get it up and running you can run Ruby CLI, generate a hello world compile it and keep compiling on it. If anyone actually building anything that's really cool or it doesn't even have to be amazing, like if you're using it and building something I'd love to hear about I. So, yeah, thank you. (Applause) I also have these blue hat stickers if anyone would like one. Say hi and I'm happy to hand them out.


Great, we have time for a couple questions and we're sharing the microphone, if you have one, if you would come down to the front of the steps please. Do we have one on this side, nope, good fake out, nice move. Okay, any questions?


Thank you for the talk. Have you run it against benchmark toes have an idea how it compress with other languages?


Besides, I didn't really benchmark beyond the boot up time, to me that was the most important thing.  I think hampering Ruby as a CLI.  I think the performance in general is similar to MRI itself, so if you're okay with that performance that's around like once it's booted up that's around the performance you'll see, there's some special stuff they've done with floating point numbers, if you're doing floating point math it's faster than mruby.


Any other questions?  Going once ... going twice ... gone. Okay. Thanks Terrence. ((Applause)) so one quick announcement before the next break please, if you have a bottle, just take it down, I can demonstrate actually or any trash I should say. If you have a bottle, don't leave it at your seat, take it and put it here, just like that. If you have any trash, you can bring it down and put it here, that'll make it easier to keep the room clean so whoever sits in your seat after you will have a nice clean place to sit without bottles or trash, please help us out by doing that. Yeah, we have a fifteen minute break, so please be back here at five minutes past 6:00. Thanks.


And there's cupcakes.


Testing town three four


Please take your seats.


Okay, let's take our seats and settle in, all the Shhhhs ‑‑ okay, great. Welcome back a few quick announcements before we get started again. So in Luis' talk this morning he mechanicsed that he was giving away a ticket to Rubyconf Portugal in mid September .
it was great conference, it's in northern Portugal. It was my first time in Portugal. It's a beautiful country, beautiful city, great conference, I highly recommend going, and you is a ‑‑ you have a chance to win, all you have to do is tweet with this Hashtag, the drawing will be sometime tomorrow after one of the breaks, so everyone you have just do this, yeah, you'll get a free ticket to Rubyconf Portugal. I'm going to do it, I want to win the ticket, it's great. And Moritz, do you mind coming up to the front. (Applause) (Applause) Moritz is one of the organizers of this conference, working so hard to make such a great conference for you on his birthday, so as a reward for this, we're all going to sing to him. Hopefully you know the words, if not they're up in the corner there. Maybe some ‑‑ Oooo wait, hold on, audio?  What do I need to plug‑in, wait for it. Okay, maybe I can make it bigger. Yeah. More power. (Singing happy birthday) of (Applause).


Thank you, thank you so much everyone, I can not tell in words right now what it means to me and what it means for me to be part of this committee or this organizing team and having you all here with this conference, thank you so much!


So all silliness aside, next talk by Rebecca, she's going to tell us how to better on board new engineers, how to craft better mentorship programs for that. She recently joined the Jango girls team, what better way to board new engineers. She is part of the kick starter team and yeah ‑‑ I'll hand it over to you right awhat
you go (Applause)


Hi. I'm Rebecca and this is the injuryon jump and we're going to talk about mentoring junior engineering talent. And can we start by raising a couple of hands how many of you all wrote Ruby at your first job? ‑‑ cool, quite a few people.


As a developer. Absolutely your first programming job. And how many of you have interviewed someone for what would become their first technical job?  Cool. Is anybody looking for for their first programming job right now?  Awesome would you have like a ‑‑ we have a couple of hands, so you all find those people. But, this conversation is particularly relevant for us to have as Rubyists because over the past several years we've become the welcome gait to programming community for a lot of people, including myself. And the Ruby community is really good at getting people excited about programming. We have rails Girls and try Ruby and all of these resources that have done what is really an unprecedented job of convincing people who never thought writing code could be for them, that they should give it a shot. And that's a lot of responsibility for us because not only are we training the engineers that we have to work with, but it's very likely that we're on boarding engineers who will probably train future engineers. And if you didn't raise your hand at the beginning of the talk. These are a few of the reasons your team might consider investing in engineers at the very beginning of their career. It can be really scary, but really rewarding. We get excited about the 20 percent of the work that's so boring that the rest of the team doesn't really want to do it. This is true. And it's because we're smart ambition people who like to be able to do things on our own. And when you're get into a large code base for the first time, that's not necessarily a lot of things, and that's in the necessarily the stuff that people with even three to five years experience find even fun. We're a little bit easier to find. This is true, particularly for diverse engineers. Diverse engineers can be really difficult to hire laterally. If you're looking to diversify your engineering leadership, you might find the best way to do that is hiring a diverse person and growing them into the engineering leader that you need over several years. And teaching grows both teachers and learners, the best learns ask mart questions and and have the team reconsider old opinion and try new things. However, June your Dev is not a Chia pet, you have to help them grow. I want to talk specifically about preparing to bring a June juror developer on to your team because I started thinking about this talk about a year ago when I was interviewing for my first tech job, everyone was asking me the same question, which was what kind of resources do you need to succeed here?  And that question is really scary. Don't ask it. What you're basically saying to the candidate is we think you're super cool and all, but the work we do here is really hard, how are you going to pull this off?  Nobody can answer that not at their first job. You're the person who has experience coding in a production environment. You know what kind of resources are practical for your company. When you ask candidates this question you're kind of asking them to have psychic abilities. They don't have access to that information. What they do have access to is the self awareness of how they learn best. And that's totally a valid question to ask. Because when you're hiring at the junior level you're not just hiring for coding ability, you're hiring for how enjoyable that person will be to teach. It's really hard when you're first starting out to know what resources are appropriate to ask for. These are some things that I came up with in my own experience in some of the interviews I did while preparing for this talk. Books, books can be great. Buying a Jr. developer a book ‑‑ conferences send your Jr. developers here put them in a community that makes them feel really glad that they made this professional choice. Meet ups are great as well. And if you are perhaps in the position where you have a really great space and a very senior team hosting meet ups can surround your junior engineers with a little bit of a peer group they might not be getting on the day‑to‑day. Face time, which can often be pairing if you have a pairing culture. I was lucky enough to join my team at a time when we were just barely small enough that I got to set aside 30 minutes with every single person on my team for them to just talk about whatever they thought it was important for me to know. And you learn a lot about the values of your team members in conversations like that. You can also ask to pair and you can also make yourself available to pair. And explicit time to learn, I was a bartender before itches a program in Manhattan at a very, very busy bar. And so if you weren't physically selling a drink you weren't doing your job and you weren't making any money. It was ‑‑ it took me like quite a while to figure out that learning was part of my job now.  I got really into design patterns. When I'd been working for like two or three months and I Satoshi down with my manager and was like is it okay if I take like, an hour a week to just read about the stuff that I really like?  And he actually laughed in my face and told me to take an hour a day instead. And the last things is transcripts.  I was really, really lucky to come on to a team that did transcriptions and they weren't there for me, they were there for someone else but they're extraordinarily useful. When you don't have a lot of context you can really only listen to your iOS engineer talking about functional swift for so long before it starts to go over your head a little bit but you can learn so much by going back and looking at documents like that. before you're hiring a junior engineer you need to get your documentation game on point. Ask the guy who wrote it is not on point. You should generate a lot of paper when preparing for new engineers and then after they get a little bit of experience they should generate that paper. This is important for not only all the very good reasons that having well documented code is important for everyone, but social reasons as well. When you're transitioning into a production environment written documentation gives you something to do while you're waiting to be told what to do. And it gives you hope that the answer is somewhere out there. Good documentation allows your junior developer to become more self sufficient and less reliant on the mentorship of more senior members of your team. The second part of preparing for a new engineer might be the most technically difficult and that's planning an appropriate first project. Have you all ever heard of a round Tuit as when to when are you going to document that process?  I'll get around to it. It's really cheesy but my high school English teacher had one of these on her wall.  I think it's helpful when it comes to thinking about how to assign work to new engineers. Assuming you have the resource to mentor the new engineer for the first 30 days, the first project shouldn't necessarily be the easiest work. You're assigning work to a pair, a pair which hopefully includes one of your more seen your engineers, that senior engineer is a around to it. Give them the work that you meant to give to them but isn't mission critical that it has to be done on really quick turn around. What you're trying to do is balance exciting work that has to be done with supervision that makes you excited to show up every day and just boring stuff that fosters independence. Don't feel guilty about assigne signing boring stuff as long as it's not the only thing your junior is doing. Not only do you get to out source the work that doesn't thrill you, even if it is objectively really dull, productivity and the ability to contribute independently is incredibly empowering. It's particularly useful if these kind of tasks involve interacting with broad section of your product because then they can serve provide overview and context. And when we're talking about projects it's important to talk about admin tools. And how your admin tools can be a great resource for finding work for new engineers. I eve noticed just anecdotally from talking to people and reading industry Blogs that teams that tend to role their own and build things internally also tend to be really committed to growing talent. And I don't think those two things are unrelated. Internal facing tools are a great place to look for property projects for junior Devs.  ‑‑ when you build a lot of internal tools you really creating a sand box for both the mentoring of new engineers and for more established Devs to experiment.  I built that is easier to explain to your grandfather than a string extraction. It's important to give your juniors a story to tell when people ask what did you do today at your new job. Visible work is important. And that brings us to mentorship, which is probably the most difficult part of integrating a new person into an engineering team. The most available thing that a mentor can do is to lower the cost of asking questions. Most people who care about being good at something feel like they're failing at that thing almost all of the time. Communicating with people who know more than you is really the only way to get rid of that feeling. Even if your organization is just you and the person you're hiring, write it in to your on boarding guy that every new engineer will be assigned a mentor to meet with once a week .
some people will taken have a of that resource more than others, but the ones that need it the most are the ones that would be least likely to ask for it. Making it explicit and default alleviates a lot of pressure for new engineers. Of when you're ready to make an offer to a new engineer your team needs to ask these three questions:  What kind of resources can we give this person?  How can we best help them?  And how can they help us help them?  And the answer to those second two questions should be made explicit in your teams' documentation. How many people here did not have a mentor in their first engineering job?  This is actually pretty good. Usually like it's a pretty scary number of people. But that's ‑‑ it's a pretty common situation. Israelly lucky in that my first job was at a pretty established company that could prioritize mentoring me. But some organizations might not be in that position when they decide to invest in junior talent. And that's okay too. If the only resource you can really offer a candidate is time to get up to speed, our community is full of really independent self motivated lerpers that might be great for ‑‑ learns that might be great for. Make investment of that time explicit. Clarify those expectations. And also don't discount the value of peer and early stage mentorship. Really effective model that I seen work in small start‑ups is hiring two junior engineers that pair with each other all the time. It's hard to on board a junior engineer. It's actually not that much harder to on board two of them. Supply your junior Dev with peers can be just as meaningful as giving them role models. As your junior Devs get ready to take on more responsibility within our organization one of the concrete ways you can demonstrate that growth is by giving them an intern to mentor. But if you're in the other situation and you have an embarsment of mentorship riches you might want to look at U 2 we can debate their musiccal merit all you want but their public persona is a pretty great metaphor for a team you need a Bono, this is the explicit mentor you assigned your new engineer, much like Bono is the interface with the public, thisment is the new engineer's interface with all of the group need them to acquire. Mentoring your gnaw Dev is part of this person's job. It's important that they concept to be evaluated on that. This person meets with your new Dev regularly in the early days on the job. A big part of Bono's job is to answer the question how do I internet with passing too much judgment?  One of the most difficult parts of being a new developer is that you haven't developed the level of discernment to know which parts of your code base are specific to your company and like what you can actually get out of Google. It's this mentor's job to help the junior Dev cultivate that ability. The second person on the mentorship team is the edge, still really important, but not quite as public. You might not get all the face time with this person during the day‑to‑day. The supervisor or maybe yore mentors mentor might fill the role. People that are really great at filling this role are available to the new developer as an alternative perspective and happy to provide help in the vent that you've driven your primary mentor just a little bit insane. And then the last person on your team is a Larry Mullen. No one knows who Larry Mullen is.  I mean, I do because I Google pictured of him, but I'm not going to tell you which one of these guy s is Larry Mullen, being the Larry Mullen of a mentorship team is a thankless and incredibly important job. When you're a Mullen you do not get mentioned at the developer ship at the academy awards, he's simply a colleague that doesn't roll her eyes when a junior Dev asks questions .
these roles don't have to be articulated they don't have to be the same person every day, Larry Mullen might have something in common with the junior Dev, a project, gender a mutual fondness for rock climbing, it's not a prerequisite you you're never too experienced to be Larry Mullen, everyone in the room has the pow tore be Larry Mullen. The people on your mentorship team is an explicit mentor you meet every day, an additional mentor that provides support to that mentor and a team of engineers that understands that developing talent is just as important as writing clean code. So just to recap really quick. Planning work with your new engineer to develop your on boarding plan. It is awesome to be ready to invest in helping someone launch a career in programming, work with them to support that investment. Projects look at assigning work to your new engineers as an opportunity, they're around to it .
give them projects with visible impact. Balance exciting work with boring independent work. Lower the cost of asking questions, and empower yourself to be everybody's Larry Mullen. Thanks all, you've been great (Applause)


Yet, great talk. Questions?


You mentioned that transcripts were really helpful. It impsn't year if you meant transcripts of conferences ‑‑ it wasn't clear if you meant transcripts of conferences or within your team there were transcripts made ‑‑


I have a death colleague so we have transcripts at all of our engineering meeting and product Dev talks and some of our larger meetings, an then when we're in small groups we tend to transcript ourselves in Google Docs. Yeah.


Okay. Thank you.


So cool to watch that question be transcribed in real‑time by Kimberly.


More questions for Rebecca?  Anyone?


Yeah, so this is actually advice for I guess HR people and whoever will be hiring the junior Devs. Do you actually have any advice for the junior developers who have been hired and for example have not been assigned a mentor?  Sort of ‑‑ yeah ... how to ... get them to ... or how to get HR people to ...


I feel like the junior Devs I know who have been happiest in their positions and have, like, found a lot of mentorship available to them made contacts with their company through the engineering department. It's hard because a lot of it is like very much about that personal connection. Yeah ... how ... I mean sometimes I do think that you have to seek that influence outside of your company, if you're in a city like New York or Berlin where there are a lot of user groups and you can find that mentorship elsewhere. Also slack can be great. There's like a lot of communities kind of coming up there where you might be able to get mentorship from people that, you know, derive drives many, many miles from you. That's a really difficult question.


Thank you.


More questions?


Yeah, I was wondering if you could say something about how mentors can get feedback from junior developers or trainees or something because when you ask someone who's really inexperienced am I doing a good job at teaching you, I don't think you get a very useful answer out of that and I'm usually wondering I'm actually good at mentoring someone and I can't really tell.


Totally because we're so grateful to being mentored so it's like anyone who is taking the time out of their day to invest in someone at the junior level, like usually you're so excited about that that it's very difficult to be like well this could be better in this way and also when we're talking about people very early in their career they don't have a lot to compare that to. This is something that we're kind of working on now at my company ‑‑ like I'm mentoring a summer intern with more senior developer and there's several of us. We've kind of had to talk about the difference between ourself, the different ways we mentor and what our expectations are of each other. And then you can present, like, that kind of template to your junior as things that might be realistic expectations of them. That's kind of the best way that we've ‑‑ like having more conversations like this and like discussing different mentorship models, I think is kind of the best way to deal with that.


Question on this side.


A lot of this stuff that we do as engineers ‑‑ the technology debuts are ultimately solutions to problems that are very contextual so how to strike the right balance between explaining the solution to problem and on the other hand letting people experience problems on their own because it's very hard to understand a solution if you don't know the problem itself. It's actually hard for me to strike this balance, do you a suggestion?


Yeah, yeah, so we're talking about of striking a ambulance between being like perhaps a little bit too helpful because a lot of ‑‑ a lot of cultivating good engineering practice is coming up with the ability to answer those questions on your own.  I actually got a really awesome ancedote about this from my boyfriend last night who kind of helped teach me to code and many other people, he was liking at ‑‑ oh I walked around too much.  ‑‑ the slide on documentation and he said that when he's mentored junior engineers that he will ‑‑ and they're stuck on something that isn't well documented ‑‑ he will be like give me a minute then go and write the documentation and then tell them to look in the documentation. And I thought that was pretty great.


Thank you, another round of applause for Rebecca (Applause) so the next talk is a talk I've been very much looking forward to becoming a parent changes a lot in your life but certainly not the ability to work or want to work, it's just very exhausting at times. But Daniel is going to explain to us how we can create better workplaces that better facilitate parents and are more welcoming to parents. I'm very curious to find out how that might look like. We're just setting up. I'm giving him my microphone because ... who in the audience is a parent?  Anyone has a kid in day care today?


Good experiences?  Yes, of course, good experiences.


We can take it away.


Daniel Schweighofer:


Thank you for coming it's awesome to be here. Thank you. Really nice. Okay, yeah, well we're talking about programming parents and I'm for myself I'm a programming parent well I'm 35 years old head. Hetro white Cis‑man. Father of one little child, if you hear someone out screaming, it should be mine.  I think we have to leave soon (Laughing) well, I'm also working for the institute since 2000, the last two years I've been working as a parent and totally happy that I've actually found a family friendly work space at POS pulse, it's really awesome because I have searched for a long time to do it. Yeah, I'm also a political person, I'm doing a lot of political thing, I'm using in a self organized housing project. I'm from Berlin, you know us. Okay, what do I need to do ‑‑ we're going to do ‑‑ I billion tell you a little bit about what it means to be a developer, what it means to be a parent. We will talk a little bit about work life. When I'm talking about what it means to be a developer parent, we will have some intermissions after each of the parts, then a little bit about start up culture and then we're going to family friendly work spaces. And in the end I will tell you how I am doing it. Well, how I am trying to do it. Okay,let's start, what it means to be a developer, well I know every one of you kind of have an idea but of let's just sum it up. For me it's a craft you really have to learn how to do things because literally we just ‑‑ . There's a will the of thicks to keep in mind so ‑‑ there's a lot of things to keep in mind so it's hard to concentrate when you're doing this because all these things are coming up, well, I found that awesome work ‑‑ it's really fun to do it, it's highly rewarding, it's really nice. And, yeah. It's really, it's a good thing to do, I think. And also we have to keep in mind that it's important for our social identification because well, it's a fundamental part, I mean you will know that when you meet somebody new at a party and they say, okay, what are you?  You just at first most time say what is your job because we identify ourselves, with our job. And the interesting fact of developers is that in the beginning of the '60s and '7s it was done by women ‑‑ '70s ‑‑ it somehow shifted and nowadays it's well, mostly done by men but as we see in the Ruby community it's going to change, that's really fine, it's really good, we need that. Yeah. Of because it's mostly done by men we have to also think about well I have kind of toxic work climate because people tend to do ‑‑ to say, okay, we all work this way, we work really hard ‑‑ coding as I mentioned before needs a lot of concentration ‑‑ you have to keep track of a lot of different things at the same time, you don't want to be distracted because human task switching isn't a fine thing and if you get into apps you need a lot of time to get back in the flow and it's sometimes really grinding and nagging especially if you're doing debugging, it's not nice. But it's awesome and it works. Okay so now I have a another idea whats to be a develop E. next we'll do what it's like the be a parent. But first we'll have an intermission, a short story about work. What is work. The interesting thing is when you first find work in the old ages it's just sum of missions ander and tasks that you somewhat get ‑‑ somehow get ‑‑ somebody give it to you or you require it for yourself and it gets redefined in the age of information with the Protestant it's the work, we identify ourself with our work nowadays, it wasn't always this way, yeah really interesting thing if you want to know more there's an interesting book from Max Webber, already done a talk last year, I will link it in the slides when I publish them on‑line. Okaye okay, so let's start what it means to be a parent. Well funny, it's also a craft. You have to somehow acquire what it mean for you to be a parent how you handle it, how you handle your child because each child is different from each other and each child is developing and you have to evolve your craft to do parenting .
and it's really a complex thing to do. And well it's extremely important because you don't want to Fuck it up because this was ‑‑ there is no full disaster recovery for parenting and there's no roll back, so you have to do it right the first time, but you will make mistakes it's just this way. And the funny thing is, it's also social identification because of it's ‑‑ well, somehow relevant where we have to say it's not so relevant if you are the father because, yeah, okay, you the fat er, you have this attribute, you tier father, but, well, most times we didn't expect anything about it besides the father because traditionally the mother stays home, the father could just continue his life and welcome home, pats the baby and then doing other work and that is obviously wrong because we have 2015 and I think we should evolve. Yeah, it was done by a womaned now a day, yeah, it's luckily there's father who are doing it and the bad thing is that we're giving them cookies, oh, nice, you're a fat their stays at home, you're cool, man.  I mean sure you could encourage them, but you could also give all these mother's cookies who didn't get any cookie. So parenting itself it's a task which needs a lot of concentration because we have to be really fast, especially when they're really young because they could be really fast and they could be surprising really fast if you don't expect it and the ability to do tasks is somehow restrained because would youn't concentrate because all the time you have to think about, okay, what does this child do?  Oh, didn't hear anything, u‑oh, that's bad (Laughing) and yeah, it's a task with which also limits your time you have because you have to ‑‑ so you have to concentrate so much on it that you didn't ‑‑ well you could do some homework, maybe, but you know it's just shrinks the time and it's also, well, often grinding and nagging, I mean you could just imagine how it is when somebody screams at you, literally screams at you for an hour. We have it from time to time. Well, let's go to the next intermission, it's about care work, and care work is really interesting because it's everything which is related to, well you could say from a capital listic point of view to keep the family running. It's doing the laundry, it's a lot of work and well if you want it's a lot of work which has to be done because there has to be food, there has to be clean space, there has to be clean clothes, everything like this. And it's somehow you can't wait for it. And of the thing is if you just live for you alone, it's not so much work because you don't make so many things dirty, you don't have so many clothes you're going through in the week and it's not a problem, but if you are a parent it is a lot of work. And if you want to, like how much ‑‑ I invite you everybody you you could have a free week of what is care work at my place, it's no problem, just send me an e‑mail (Laughing) I would appreciate it, it would be an interesting experience for you I guarantee you. And the sad thing about it's not accepted as real work by society even if it's real hard work to do. And which we have to keep in mind at the moment when somebody says, okay, I can work 40 hours or so. And I'm also a parent that means that somebody else is doing the care work because it has to be done and for me it's ‑‑ I don't think it's right, I think it's totally false that somebody is doing all this work and didn't get any of ‑‑ anything out of it and somebody else gets all the well social status and cookies and stuff. What is the price?  Okay. Let's talk a little bit about work‑life balance. It's a shiny new thing. New because we have this like a few years to say, okay we are a generation of work‑life balance. We want to have a real good life and the funny thing is that sometimes I don't ‑‑ I don't have the feeling that people will think about that when they use this work ‑‑ because for me it's a little bit more than just all these perks we get which are well most of you would be used when you're working for start up because it's ‑‑ yeah, it's not the same for everybody. So it's really cool to have beer in the fridge when you could make some parties in the afternoon, but the problem is that parents couldn't attend parties in the afternoon because somebody has to bring the child to bed. And it couldn't always be one person ‑‑ well if it's always one person, I think it's ‑‑ I think it's obviously wrong. And for me it's also accepting that ‑‑ well ... there's just more to do you also have to keep in mind that if you have party each ‑‑ so you go to party each Wednesday and there's always this one person who couldn't attend, and this person who couldn't attend, it's a parent. So for me work‑life balance is about balance and the thing is it's about balancing the amount of time we're doing for work and you're doing for your life and for parents it's more important because we didn't have so much time because we have not in our time amount on the day is just well shrinked. So we starting to compensate, we're starting to be extremely efficient what we do in our time, but in our culture we're not used to value the time of others. We're used value everything but not time.  I mean you could think about how strict are the meeting times in your company. And what it says if somebody just starts a meeting at 50 or 30 minutes later, I find it really disturbing sometimes. And there are places where you could have where this work‑life balance is a little bit better or extremely better. There are places where people have the flexible of log times or identification times it makes people really happy. Employees could have breaks when they need them without having big struggle to do this. Okay. So let's talk a little bit about start‑ups. Of and talking about start‑ups because I think most of Ruby's ‑‑ what things are done in start‑ups or companies that have a start up‑ish culture.  I don't know many companies that would do ‑‑ well, to be fair I don't know any company who do a real big Rails or Ruby installations and has a start up culture. If you know any, please tell me. So let's talk a little bit of start up concepts because most times start‑ups are just founder related. The thing with this founders are often young, they're often without children and they have most times little experience about leadership so they just can't think about what it means to be a parent and while often start‑ups have often tied plans and ‑‑ tight plans and low budgets, I have this feeling that start‑ups often ‑‑ well I have experienced from time to time this context where okay, you have 40 hour, 40 hour contract and if you work more you don't get a compensation for it. Quick information for you if you work in Germany and you is a contract with say if you work overtime you don't get compensated for it, it's illegal you could just go to your union or go to some judges could just say, okay I want this money because it's legal for you to get the money from overtime. Just some information.  I think it's important because I have a feeling not many people know it. Yeah, maybe you should somehow do a talk about well worker's right and information thing. But that will be another talk. And, yeah, start‑ups most times didn't have structures, so they don't have ‑‑ they had flat hierarchies and that means if you have a flat hierarchy everybody has to talk with everybody because there's no defined way with information flows. And this is totally perfect if you have the time to be there all the time, but it's not if you have other things to do with the time. Start up culture is often work really hard ‑‑ work long shifts and some magic happens and you just sell the shop and everybody gets lucky because everybody has his share of the company and will get next and it's really motivation I can tell you that. And also start‑ups tend to do things at first we just do it shiny so customers are happy and all the things which have to do ‑‑ which have to do ‑‑ has to happen automatically in the background we do it first by hand because we just have to sell it and then we make the magic happen afterwards. And this is totally fine you have all this time to be there, but if you are a parent and can't participate you somehow get a little bit isolated. It's also important to think about the culture fit thing.  I mean you know it from work, where culture fits in it ‑‑ culture fit anyone?  I've seen it from time to time, I have people who send me oh we have this fine culture we're doing things like, I don't know we're doing things like with races and circles and stuff and we have some parties and look at the pictures and all these guys like Whhoo oh, no will not answer them. But that's ‑‑ ‑‑ two minutes okay ‑‑ maybe there.


Okay, I'm going to my normal speed.


Okay. Let's go to the ‑‑ let's talk about family friendly work spaces. Most times to have a family friendly work space it's about meeting activity times. It's about schedule them early, it's about to let people know when the meeting time is and the best thing is when you work asynchronously .
so doing home office is perfect thing to do. And if you do remote office because you is to work asynchronously. And if you work from home you can also well code distraction free is the child somewhere else and also has this thing that you can work at times when other people don't work because sometimes this happens that you will be woken in the night, you get the baby to sleep and then you're awake and say, okay, time fresh, what I I'm doing, okay, I'll do some coding, why not that's very good. It's also very good when people just have the understanding that bad things can happen, so you say, okay, I understand that this code is broken but my kid has woken their leg and there's no roll back for that, so sorry I have to fix it now. And it can be hard, but the thing is, I think work‑life balance is really better in places where you have family friendly thing because while everybody can profit if it and it's ‑‑ it's really rewarding even if ‑‑ also if you don't ‑‑ if you aren't a parent. Well then people tell me, okay, how you doing this so I tell you a little bit, it's mostly about organization. So we do a 50/50 split of our time. We have this complex shift system if you want to know there's a German article on my Blog about it. We try to even out the care work also have to say while I'm socialized as a man so it's somehow not so easy for me to see tall care work. It's definitely ‑‑ sometimes it's really hard to see okay, I have to tidy up all these things even though I know I have to tidy up all those things (applause)


Found a workplace where you can work 35 hours a week, which is really fine, it sounds maybe strange for you, but for me 35 hours a week solves a lot of problems. And I can do home office when I need it. And that helps a lot. So let's do some summary. If developing and parenting is both hard and rewarding both together is also hard and it's also damn rewarding. And also parenting help has a lot of work but it also shrinks the time and I think we want a lot more family friendly work spaces because it's better for everybody and start up culture for me it's mostly toxic and Patriachic, I think we just better fix it. Thank you (Applause)

Had Bozhidar Batsov, Katherine Wu, Kinsey Ann Durham, Kinsey Ann Durham Opal


JavaScript. JavaScript, Ruby. .




...


...


...


...


...


...


...


...


.


...


...


...


...


...


...


...


...


...


...


...


...


...


...


...
>>


Okay. We got a tight schedule today, so let's get started. Yeah, just want to run through the schedule and then we'll jump right into it . So we have a few talks in the morning. Then a break, then another talk and then lightening talks, so a few of you signed up, I think there are eight or nine slots. It was great to see those fill up so fast, so thank you to everyone who proposed a lightening talk, sorry if you wanted to propose one and you couldn't get one in on time, but, yeah, that's going to be happening around noon, then we have an hour for lunch. We have quite a tight schedule today. We're going to run a bit tighter than yesterday where we had the big break in the middle of the day. We could be a bit more flexible. Yeah, and then more great talk in the afternoon and to the evening and yeah, I don't know whatever, there's a schedule on the web site if you want to see what it looks like you have a familiar let in your bag, we don't need to waste time on it


Floor. Our first speaker today is Bozhidar Batsov. If you're not a particularly a fan of JavaScript or coffee script or any of the front kind script, open open might be the thing for you if you want to code both your back end and front end in Ruby. Just before we start, I want to know who brushed their teeth just after waking up?  Very good. You're very good students. Cool. Give it up for Bozhidar Batsov. (Applause)


Bozhidar Batsov. . Okay, so last evening we concluded our first day of talks on a very positive note, literally a positive note and I'm pretty sure that I won't be able to deliver as exciting performance as Joseph did, but, I'll do my best, thank you for joining me and let's get this party started. So my name is Bozhidar Batsov, you probably cannot pronounce this, but do not be alarmed, do not be afraid.  I come from Sofia Bulgaria, I work at Toptal and I'm very thankful they made it possible for me to come here and you can call me Bug just as my friends do, and I know what you're thinking, but I have been known as Bug for 20 years way before I became a software engineer, so presumably this has nothing to do with the quality of my code (Laughing) before we get to the gist of the talk, I'd like to set the proper scenery. So you can get an idea of where everything started. So a few things about me. The most important thing I'm very fond of bears and I hear that everyone in Berlin is, so that's cool. I'm an Emacs fanatic, I'm generally open to everything in life, but nobody in this world can convince me there is an editor better than Emacs, you saw the gips of the power of Emacs, if I no we were going do live coding I would have done a totally different talk. The tool that Joseph was using to do the live coding was written by me, I didn't hope somebody could use it in this way, this was mind blowing for me. So this is how I see myself, you probably don't see me like this. Any way I do a bit of Open Source work, mostly related Ruby closure and Tmax, if you're into these sort of things you can check out my GitHub profile. Most importantly for you perhaps, I love Ruby very, very much, and I'm not very fond of JavaScript, I could talk all day about myism imagine of JavaScript, I won't, I'll just show you an image. Clearly there are issues with JavaScript. If if that doesn't convince you can check out this web site, which has all the arguments in the world so no need for me to reiterate them. So why am I here?  The first two things that I said are part of the reason, my love for JavaScript ... my lack of love for JavaScript and my love of Ruby. But the other thing that actually drove me to come here was this survey about the recent state of the Ruby community. According to it 96 percent of all Rubyists are doing only web development in Ruby. And of them 90 percent are using Ruby on Rails. It's kind of sad, but absolutely everyone seems to be using Ruby only to do Rails web development. And this is kind of worry some because it seems that our beloved community has a bust factor of one if something were to happen to Rails if there's another cool framework in another language, Ruby seems to be dead in the water. And even more troubling for me Rails is so omni present in our community that it is actually driving the development of the Ruby language, which is kind of insane, this is the charge work for Ruby 2.2 the latest release, let us count how many times the word Rails appears in it, one, two, three, four, four, five.  I don't know about you, but I have yet to see another language which is so dominated by a single web framework. This is pretty worry some, my good friend Jan Uzi, his suitcase is worried and I'm worried, because it is worry some. And what is even more disappointing is the amazing members of our community have been working for years on tools like JRuby Andrew by motion which allows you to do so much more than web development in Ruby, you can right RUS, desktop applications, you can be doing machine learning, but no, we are rail, rail, Rails, we are so attached to Rails. And we love to make fun of JavaScript, we love to emphasize how much better Ruby is and the Ruby community but let us have a look at all the things that the JavaScript people are doing with it. So we see that they are doing client side applications, they're doing server side applications, they're doing native iOS and android applications, windows phone applications and they're doing a ton of desktop pub application. Imagine in ten years back. Something is going right in the JavaScript community and right now possibilities of JavaScript are truly infinite
is just one tiny bit of an issue, nobody really loves JavaScript, nobody ever said that JavaScript made them happy, right. And there has been this U.S. to step into the shoes of JavaScript and bring balance to the JavaScript programming world. You're all familiar with one of those attempts, most of you are familiar with coffee script. Other worthy challenges would be pure script and Dart more recent. lm.  I encourage you to check it out because I do feel that Elm is pretty legit. And perhaps more importantly for this particular talk there has been attempts to port established languages that normally do not run in JavaScript environments like Scala and closure ... closure is super legit, you should definitely check it out to JavaScript. And why would somebody be doing something like this?  Nobody put it better than famous creator of Clojure when asked about importing in JavaScript, because Clojure rocks and JavaScript reaches. And this is so, so true. And you know what I can think of at least one more language that kind of rocks, Andrewmore has it that it is also better than JavaScript. And I have the numbers to prove it, I Googled for Ruby sucks, 1.7 million results then I Googled for JavaScript sucks and you know I have an education in statistics, so I know this is scientifically correct. But, on a more serious note there are plenty of advantages of ‑‑ that Ruby has overJavaScript, some of them are we don't have this, so we do not have any of these related issues, we have the same Boolen semantics, there hasn't been a need for the book Ruby the good parts yet, though I do have a talk Ruby the bad parts, it's not only rain boys and unicorns in Ruby land either there, is no WTFruby.com yet. We have a solid core library, which makes the existence of library underscore Js a nonissue for the Ruby community. We have an extensive standard library which adds a ton of power to the Ruby language. And do you really need more?  You should be convinced that ruby a better programming language and I guess I've been preaching to choir so far, so let's get down to business .
without any further adieu, I present the hero of this presentation OPAL.rb, replaces JavaScript with Ruby where you norly would use JavaScript I'll start with a brief history of OPAL. Most people haven't heard about OPAL so far, but it's not a young project, it's an ‑‑ it's release was over five years ago, there have been applications in production for at least three years now. OPAL's popularity recently spiked when the vote ‑‑ web framework was introduced in at the end of the previous year. Truly imaginecal piece of software ‑‑ Volt ‑‑ it allows you to share the same model view controller code on the server side and on the client side, people were so impressed by its capabilities, but they didn't think very hard about where this power comes from and it comes from OPAL.rb which is at the core of the framework. The development of OPAL is very active. It's team is pretty energic. And the latest release landed just a few weeks ago, so, cool things are happening there. The value proption of OPAL is pretty simple. You don't have to write JavaScript anymore you can replace every single usage of JavaScript with the beautiful Ruby Code that you know and love. How do we achieve this?  Well, OPAL is at its heart a Ruby to JavaScript source to source Compiler AKA a trance piler, and this means that you feed it Ruby Code and it produces the equivalent JavaScript code. There is no new VM
is no new byte code
are no translation layers. You just running JavaScript code on a JavaScript virtual machine and, you know, you didn't introduce much additional complexity in the process. OPAL throw in the mix an implementation of Ruby's core library and a partial implementation of the standard library and I really feel that this is of a very, very strong value proposition.  I know that some of you right now are thinking, but we already have coffee script DHH has blessed it. So it has to be the true way, the true successor of JavaScript, but, let me quickly of walk through some issues that I have with coffee script myself, so first of all, it doesn't have a different core library. It has the same basic rather spartanly briar that JavaScript has so this really limits you to what you can do out of the box with it. There is no equivalent of Ruby's extensive standard library. And let's face it, no way we sugar coat it coffee script is Ruby, only Ruby is Ruby. This is deep, profound and simple and we have to come to gripts with it. So here's a very basic example of what OPAL program looks like. It's Ruby. No need to explain what is going on here. This beautiful Ruby Code gets compiles to this pretty ugly JavaScript code, don't try to read it, it's not worth your while. The important part of this code is here, let me zoom this for you. If you make the effort to read it you see that although it's a bit ugly it is actually pretty readable. Unfortunately I have a ton of ground to cover so I'll be skimming over the implementation details just trust me that this code is comprehensible. Although initially it doesn't look like this. So the magic in OPAL happens in the OPAL compile, you feed it a Ruby string and it produces an ugly JavaScript string. But we can pretty this up so it looks like a real program right now. And the essence of this program is just a small portion of it which is really really easy to understand. It is easy to understand because Ruby and JavaScript are not a million miles apart and mapping the concepts of Ruby to concepts in JavaScript is not the hardest endeavor in the world. Usually OPAL maps self to this. It maps Ruby methods Andrew by blocks to JS functions. It maps Ruby strings to JS strings, etc., etc.. And if this isn't enough for you, you can always drop down to the bare metal and invoke native JavaScript code if you feel the need to do so. Perhaps you want to interact with a third party library which doesn't have a native OPAL wrapper right now this is super easy to do. OPAL have basically acquired the syntax use in the Ruby to Shell out to external programs for JavaScript interrupt. In hindsight this was a rather bad solution because originally OPAL was envisioned as something that would be used only in the browser, now you can use OPAL with no GS, IO G S, etc., so this will probably be change in the the future, for now it's a reasonable compromise. This is how you can use this in practice this is an actual snit et, the imimplementation of array length. Simply delegate to the length implementation of the backing JavaScript RE, pretty simple, more importantly pretty fast. You can do more complex interrupt, you can have multilines of JavaScript code, you can interpolate Ruby Code into the string which will be evaluated on the JavaScript side and this will work as expected. If you want to play more with a particular JavaScript object it is a good idea to wrap it in a native OPAL object, which allows you to retrieve properties like the members of Ruby ‑‑ like the element of Ruby hash or you can invoke metals in a let simple straightforward manner on this subject. And in OPAL 0.9 we have a very exciting development coming along a brand new JavaScript interrupt, which makes it even more simpler to invoke JavaScript methods on Ruby objects. It makes it pretty simple to use ‑‑ in method innovations, you can use rather some advance things like passing a block in place of JavaScript function argument. You can quickly interact with properties and indexes. You can quickly invoke JavaScript operators. And even global functions are wrapped in a pretty uniform and pretty from ‑‑ Ruby API. To top this off you can actually code Ruby Code generated by OPAL from JavaScript so if we have this very simple bar method in the full class calling kit from JavaScript program is a simple as this. You exteniate an object and call the bar method on it. Every Ruby method is ‑‑ every Ruby met's name is prefixed with a door sign in the JavaScript code. So the question that is really important is not how OPAL works because it really works more or less like Ruby. The question is:  Whether it is any good?  And this boils down to a simpler question is the program written in OPAL simpler than the equivalent written in JavaScript. Assuming that the complexity of a typical JavaScript program looks something like this, what would be the complexity of the OPAL program?  Most people believe it would be this. The performance would be parabematic, the file size of OPAL would be problematic, debugging will be crazy complex. The Ruby compatibility would be ‑‑ so, so, and you know you have to deal with the issues of the host language itself. And if you compare those it seems that you're not actually gaining anything. If the real comparison is something like this, probably you should be sticking with JavaScript, right. But let me alleviate some of your concerns. First of all OPAL is fast, I do not have time for fancy benchmarks, trust me it is blazingly fast
is some issue with performance for instance we cannot map to native JavaScript operator, so there is some performance issues there, there is no native JavaScript ‑‑ type, but over all the performance differences are negligible. The file size, not a concern. So OPAL minute and J G is just under 50 kilobyte, you get the power of the core library, a portion of the standard library, this is a pretty sweet deal, debugging, well, at the very worst case you have to deal with JavaScript. You saw that the generated JavaScript code is not the uglyist JavaScript code in the world, trust me, I've seen worse written by humans. So if you're familiar with JavaScript, most of the time you'll be able to do the mental mapping of JavaScript to Ruby script in your heads. If you're not familiar with JavaScript we have your back, we have source maps, and when you're using the source maps you'll be getting Ruby stack traces in your browsers, you'll be able to click on the lines of those stack traces and you'll get into the Ruby Code straight into your browser. It doesn't get much better than this, right. So, sure, there is some overhead to debugging, but it is not what most people would expect it to be. Andst as far as compatibility goes there has been a tone of efforts to ensure the best possible compatibility. Right now OPAL is Ruby 2.0 compatible, it is tested against the same Ruby Spec that MRI and JRuby are tested against. Let's be honest a lot more tests are failing for OPAL and that for MRI and JRuby. But we'll get there eventually. We implement most of the core library, which is pretty neat. We haven't implemented much of the standard library, but, you know, there is plenty of room for contribution from you, right. And there are some notable differences that everybody should be aware of so true and false are translated to JavaScript Boolean type. All numbers in OPAL get mapped to JavaScript floats. Strings are immutable, symbols are strings. Etc., etc.. Most of those are pretty small and there aren't a huge issue in practice when porting code from Ruby to OPAL, generally people have to just remove the usages of my stating string operations. And to some extent you can argue then immutable strings are actually an improvement. All of those compromises were done in the name of performance. Everything could have been wrapped in a more Ruby‑friendly way, but this would have come at a terrible performance cost. So for performances sake there are some compatibility hurdles. But in the end of the day, allow me to speculate that OPAL's actual complexity looks something like this. And if you put it in to perspective it seems that there is some benefit to using OPAL over JavaScript.  I know that my friend Juan is very impressed, his suitcase is impressed and hope that some of you would be interested enough to explore OPAL further. So let me give you a few pointers for your journey towards OPAL mastery. If you want to get sense of the power that OPAL gives you in the browser, you check out the OPAL‑irb project. It is something like Irb that runs in a browser, a web council in a way, pretty sweet. If you're a Rails lover and not a big cough free script love   just drop this gem into your Rails application and you can replace every single usage of coffee script with OPAL and it is going to work, trust me about this. It's pretty sweet. It hooks into the aside pipeline and does Mac edge. We have a pretty cool gem ‑‑ wraps entire set of APIs into a Ruby API and allows you to write code like this. Which is allegedly better than JavaScript code. And if you still want to use JK ‑‑ you don't have do this, we have your back as well. There is an OPAL Jquery gem, this is how using Juery looks like, pretty sweet, right. And we have wrappers for react, react native and for a ton of other popular JavaScript libraries. And because our beloved community leader DHH feels that no Ruby implementation is worth his time until it has an active support implementation we have this as well. (Laughing) so let me close by sharing a few thoughts about the future of the project. Where are we heading or at least where should we be heading. So first of all, we should implement all the missing things, I'd really love us to get a bigger feature parity with MRI and the other popular Ruby implementations. And this is going to happen, but we need your help. We need much better documentation. Getting started with OPAL is kind of hard, mostly because the documentation is pretty scarce. So this is one really good way to get involved into the project. There are rumors that a book on OPAL is in the works, I really hope that the rue mores are true because this will be so, so sweet. But one can only hope. We need more OPAL wrappers of popular JavaScript libraries because it is easier to use an idiomatic Ruby API than to drop down to native JavaScript code. And there is this brand new web assembly project which was announced recently. Assembly language for JavaScript virtual machines and if we were to eventually target it OPAL and JavaScript will be on the very same footing as far as the JavaScript virtual machine is concerned.  I don't know if you can comprehend it, but this is ground breaking, this means that JavaScript will no longer be the dominating language in the web. So I hope this is going to happen, but it is at least five years away into the future. And in the meantime, just contribute to OPAL in any way that you'd like. There is really a ton of work, a ton of simple beginner friendly tasks and a ton of challenging tasks, there's something for everyone, you can visit the official GitHub organization, pick an issue and start hacking, the project is pretty inviting and I think that many of the issues that have to be resolved are pretty interesting. And I'm going to conclude with basic slide of just a few resources to get you started. It was an honor for me to be here, thanks for your attention, thanks for having me. (Applause)


Okay, we have time for two or three questions, who's got one?  Raise it high.


Hi, great presentation, is it all right to use gems with OPAL?


Can you repeat this louder?


Can you use gems with OPAL, Ruby gems?


Yes, you can use Ruby gems with OPAL, but the problem is that the Ruby gems have code which is compliant with OPAL, and most of the gems don't do it so ‑‑ the only way to do it right now is to have conditional code in the gem. If you're on OPAL don't do something which will break OPAL, so this is totally viable and simple gems will run out of the box, they'll just be compile to JavaScript code that works, as far as you're not doing something which is not supported on OPAL, so this is also pretty sweet.


More questions?


Thanks a lot, that was great. Which JavaScript standard is OPAL targeting now what are the plans to keep up with upcoming standards?


So it is targeting JavaScript 3, I think, so the generated code is compatible with browsers as old as internet explorer six. Which is a feet of its own. And I'm guessing that we won't have to support this for the foreseeable future, but this is the current state of affairs. The JavaScript code compiled, generated by OPAL will run on pretty old browsers.


Okay, we have time for one more, maybe ...


Hi, thanks for your talk.  I actually heard about an incident this year at OPAL ‑‑ at the GitHub Repository, so do you have a code of conduct right now?  Or do you develop one?


Yes, the project has a code of conduct, the incident is unfortunate, but it is behind us.  I do believe that both parties involved share some of the blame for how this was handled. Trust me, the project is welcoming ‑‑ this was really unfortunate incident.


Great, thanks again, Bozhidar Batsov (Applause)


We can throw some foxes. We're throwing some foxes.


Should we explain why?


Because foxes are awesome.


So maybe if you ask a question you get a fox so ... ‑‑ yeah ‑‑ close enough.


Okay, so that will teach you next time ask a lot of questions and you get a lot of foxes. Cool. Katherine Wu is an engineer at Nuraleage, she worked at Google for five years. She's going to tell us today a little bit about a difference in culture and how that can affect communication
is difference in culture meaning difference if you're from an Ask Culture or a Guess Culture I've seen this and it's taught me how to better communicate with people.  I hope she can do a similar thing for you. Anyone who saw her at R camp already and super excited to see it again. Because everybody else can also learn about the differences in culture. Very good. Maybe we can throw foxes at the people excited, look, we have at least one person that would be happy with the fox
I think you've never seen me throwing, there's a reason why I did not participate in any sport activities yesterday. Let's start with a warm round of applause (Applause)


Katherine Wu:  Wow, of it would be helpful to have shorter hair if I speak next year, pockets and if you grow a little taller too, so I can see a cross. So I'm Kwu, it's short for Katherine Wu, I'm a software engineer at New Relic on the Ruby agent team. And I'm here today to talk about my favorite frame for examining differences in communication styles, which is known as ask versus Guess Cultures. It's a difference that can cause a fair amount of tension so my goal today is to help everyone understand this culture clash a little bit better and hopefully be able to do better in communicating as a result. Will's start with an example. So here's the situation this is you. And this is your friend say Jamie and gentlemen my has a friend who you've never met named tailor. Tailor is going to visit your city and needs a place to stay. But you would rather not host a stranger. And so your friend asks you can tailor stay with you?  What's the instingual reaction in your head. Not out loud just in your head. Is it oh! I'll just tell them no ... or sit something more like Ugh this kind of puts me in a difficult position. If it was the first one then you are most likely from Ask Culture. And if instead the situation would make you feel really uncomfortable you're most likely from Guess Culture instead so show of hands who identifies more with Ask Culture. Oh, okay, less than I expected being in Germany. Who I debtfies more with Guess Culture. A fair amount, cool, cool, who's maybe not sure yet, that's okay answer as well. Cool, I have more. So that was a really quick litmus test, I'm going do a little bit of an overview of each of these cultures with additional examples to illustrate which what they mean. Then I'd like to talk a little bit about the pros and cons of each as well as some further considerations and then get in some practicalities around strategies for handling these differences particularly in the workplace. So as far as I can tell this ask versus Guess Culture description first came out on an asked ‑‑ post in 2007. The way it's described there is in some families you go up with the expectation that it's okay to ask for anything because you're okay with getting no for an answer. This is Ask Culture. In Guess Culture on the other hand it's much more about avoiding asking unless you're pretty sure the answer will be yes. And the way that you do that is to extend out delicate feelers so that if it's done really well you don't even have to specificically ask for something you'll just get an offer. And then even then you have to use your judgment because if you accept, you imposing too much, maybe they were just being polite. And ultimately Guess Culture is really about the idea about putting idea in the position of having to say no ‑‑ putting others in the position of having to say no is rude. This this is a spectrum, not a dichotomy. Computers are at the further extreme, you where you have to spell out everything for them. But for people on the other hand based on my own experience, at least, different region in the US are probably at different points along this scale.  I am from the Northeast near New York where if a stranger talks to you our instingual reaction is what do you want from me?! So I probably place somewhere along the lines here. The places that have a strong reputation for being nice tend to be Guess Culture, maybe like the mid‑west, somewhere along here. Now, I was actually going to get rid of this very US‑centric section all together.  I overheard a conversation at the party on Friday between two of the speaker this week that gave me another example to use. Because once you start seeing this ask versus guess thing it's hard to turn off. So what happened was Joe was talking to terns about how Joe's been givingen this 12 factor App talk, he also has this byte code talk that he would really like to give at conferences adds well. And Terrence was like should just ask if you can give the byte code one instead, but Joe was kind of like Ehhhh, I don't know about that.  I kid you not two minutes later Joe was like, he mentioned that he is from Missouri, which is in the Midwest. And then I cornered Terrence yesterday, I think he thought I was being a little bit weird asking him where he was from and then he said he mostly grew up on the east coast. So these are just kind of patterns that you see often times, definitely individuals will vary a lot so when we look at it on a more global scale we Americans are probably somewhere along the line here. Where as what I've known for Japanese culture, for example it's probably a little bit more over here where as British folks are maybe somewhere in the middle and as far as I can tell from people that I've worked with in the past and people I've met here, Germans are probably somewhere along the line here (laughing) (Applause) hope I'm not causing an expensive stereotype, but at least one German I spoke with yesterday said, yes, that's definitely true. Even though I use the word versus, I really only mean it in terms of comparing and contrasting. Not that one is better than the other. Because I think just because you feel for comfortable in one doesn't automatically make it better for everybody else. Even if you still sometimes secretly think that yours is the better way to go, I confess I do a little bit as well. It's ultimately pretty useful and practical for understanding this difference. So let's go through a couple more examples, here's one from my personal life. So normally on the weekends my husband Dan and I each cook one big meal so that we have left overs for the week. One of these weekends I was thinking through and I just said out loud I don't think I have time to make lunch for next week. And the thing I was just talking out loud about how I would need to figure something out for lunch, but he interpreted that as could you make some extra food so so that I have lunch for the week. So he says in response, oh, I'm going to cook two meals this weekend, I'm over here thinking that's kind of weird, Dan's planning to make an extra meal this weekend, but, okay, whatever, that's fine, that's his prerogative. But what he's expecting me to say if I wanted to refuse his offer and I seen it as connected to the statement I had made would have been something along the lines of oh, you don't have to did that. So at the end of the weekend I'm over here thinking why do we have so much food in the fridge and he's over there thinking, I'm such a good husband. (Laughing) here's another example. I was thinking about cutting this section I wanted to make sure to help stay on time, but then I actually saw this happen right in front of me on Friday at the party, so I figured I'd keep it so let's say you have this goal of finding out if a new apartment's rent is a good deal. You're looking to move to a new city city, what happened was on Friday I was waiting if line to get a drink, not really paying attention, oh, like the beer is right over there and I hear the two guys in front of me talking about how they both live in Berlin. And then all of a sudden one of the guys just turns to the other and just says directly, what is your rent?  In my head I was like oh my God, I'm so in Germany, this is amazing (Laughing) but this isn't something that, you know, if it's not something that you're used to might feel a bit too much. Another way to say that perhaps, if you're interested would be something like I'm looking at this place, is that rent reason  ?  It's a little bit better but the person might not be comfortable telling you you are wasting your money ‑‑ unless we're here in Berlin, maybe then they're fine telling you that. But a Guess Culture on the other hand the way they would try the ask for this information, just kind of generally sort of say, oh, yeah, I'm looking for an apartment, because they're just going to float the idea out there and kind of hope that people pick up on that signal that they are interested in having a conversation about looking at and apartments which include rents, but if this were me I would just completely ‑‑ it would go right over my head, I would have no idea that was the goal they had in mind. Maybe something that's a bit more in the middle would be do you know what the range tends to be. That gives people a bit of space to volunteer what they're comfortable with. It's also clear what it is you want to know. So I want to talk a little bit about the pros and cons of asking and Guess Cultures each. My aim is to be as fair as possible to both you can let me know afterwards how well I succeeded at that. Ask Culture is one that really prioritizes efficiency and knowing exactly where you stand because there's no ambiguity. There's no interpretation needed for what you meant. So it helps you get what you want, at least in the short term. But it can end up feeling a little bit more confrontation sometimes and end up making people feel a little uncomfortable maybe even ail enuate them. Guess Culture really prioritizes avoiding hurt feeling from direct confrontation, it's generally considered more plight, depending on the culture that you're in (Polite.  ) it does depend on a shared tight net of shared expectation. You have to be able to recognize subtle singles that people are sending and receiving back and forth. If   you're like me not great at reading social cue queues sometimes that can be hard. On the flip side, if other people don't share your expectations you can end up feeling like no one is listening do you at all. Some further considerations I'd like to bring your attention are, well, why are people the way they are in the first place, right?  I have no idea, I double majored in psychology in college because I'm a giant nerd, and I don't understand why people do what they do, so instead of actually talking to people more, I was like I'll just read some books about it and take some classes. But, you know, if you think about ‑‑ probably most of us have some innate preferences here which is then molded by family and then perhaps the larger culture that we grew up in as well. And in the workplace, you know, I think companies and teams often have different standards as well I've been told that Intel for example is really really strongly Ask Culture where people won't reach out to you to see if you need help, you have to be the one to bring it up. Start‑ups on the other hand can be a lot more loose, maybeless processes people know each other a bit better. It also depends on how fast that start up might be moving, if they're trying to get things done in the short term and everything is very transactional it might end up being a bit more Ask Culture. One thing I've gotten a response to versions of this tall I've give Minnesota the past,oh, yeah, my mom is just like that. Ohe my mother‑in‑law it's so hard to tell what she wants, and so completely anecdotally I do think women tend to be socialized to be a little bit more in the Guess Culture mode. Maybe a bit more accommodating, less confrontational, so if you personally don't match people's expectations and I feel like I fall into this category, you can often get a different reaction, maybe getting labeled as abrasive or aggressive as a result. And it goes both ways, it affects men too if they don't match up to this image of sort of gun hoe Manley man, they can end up getting labeled as timid in a kind of negative sense. And so what I'd like to remind everyone is that I think that people do the best they can with the methods that they know how. It's really helpful to do what you can to bridge any gaps or divide there is might be. And so if you still can't categorize yourself then I'm going to tell you that probably lean guess, because you're not going to want to tell me no. But I think Ask Culture people tend to recognize this frustration and not understanding what it is that other people want. On top of like just being told directly you're really direct person. This has happened to me lots and lots of times. But, again it can also be a matter of context, you may very well be one way with your family with all of your shared history and then a different way with friends or at work for how you get things done there. So it is true, also I think that different styles can be more appropriate for different situations. Such as when you're not really sure about the relationship between you and somebody else. On the one hand I think you be a little bit more Ask Culture at either end of how well you know someone because if it's someone that's just really a stringer, it's much more brief and transactional you have less of a long‑term concern about that relationship versus people that know you really well, they really get you, and you can kind of maybe feel a little bit more comfortable and drop your guard a little bit at times. It's all the meme in between that's a little bit of an Ify gray shown, kind of like if you have a work friend that you're not quite sure if you're actually friends outside of work just yet, and so you don't know if they like you as much as you like them and you don't want to cause embarrassment so you can try to be a little bit more call your attention when it's in the middle there ‑‑ Cautios ‑‑ ‑‑) I think you can live in harmony. My husband and I are at opposite ends of the spectrum for sure and we've been together for over ten years now. That's worked out pretty well, I'd say. Generally speaking it's really about trying to step a bit more into the other culture so that your message is clear, and people are comfortable. And now that you can recognize the difference at least you're most of the way there. So if you're from Ask Culture, my very first tip is to make a Guess Culture friend who can be a little bit of a guide and interpreter for you because this is what Dan is for me, I'm confused by some interaction I'll bring it home and he'll help me dissect it to sort of see what was being said between the lines. Another item is to remember that it's not just what people say, but what they don't say as welt. Because you might not have actually heard an explicit no in there, but it wasn't an enthusiastic yes, either, so pay attention if there is any hesitation when people are responding to you. And finally, we all make mistakes, you know, so if you realize too late that what you said might be misinterpreted that you maybe sent out a Guess Culture signal that wasn't what you intended go ahead and apologize. If you're from Guess Culture, which seems like a fair number of people in this room, when I was practicing this presentation and asking my husband for advice. He was like Guess Culture people don't need to hear this, they already understand what's going on here. But I couldn't answer the acemetery for leading the slide blank so there's a couple quick points. If you're angry or frustrated someone because it seems like they're in your face all the time, remember that they might be unaware of the rule, because it might take a little bit of education to bring them on board. Consider also that softening a no with an excuse can also end up hurting people if in fact they didn't understand that what you said was a no. So for my last section here I'd like to talk a little bit about how you can handle this culture clash in work situation. First I'm really huge fan, of course, of course, of discussing up front communication styles. For me when I have a new manager or a mentor I'll often keep asking questions and try to gauge how strong the responses might be. This is something I would often say to new managers of mine when I was particularly focused on improving my communication skills. But if you're from Guess Culture, perhaps, maybe you or your manager has a goal for you to participate more vocally in meetings, so in ‑‑ you could perhaps say something along these lines to try to make progress towards that goal in a safe and comfortable way. And from the manager's point of view, you can offer up several opses to chose from versus having to ‑‑ putting someone in the position of having to decline. When you say, oh, yeah, we have a few options that would work AB or C try be enthuse yaysic for all of these options if you feel equally open to any of these three. There's one particular situation to be a little bit wary of and that is if you're in Ask Culture person managing a Guess Culture person.  I think it's really important to constantly remind them that they can say no when you ask them to take something on and give that positive reinforcement. no, it's rally okay if you don't want to take on this particular task. If you near a sitwhere you're given someone the illusion of choice you get their input but later reverse the decision without explanation they will never say no to you again even if you want them to. Another thing that helps is not to set up processes where people have to ask because it can end up penalizing some folks. For example a conference travel policy where people always have to bring it up themselves and make the suggestion and make a case for it. Or like Rebecca said yesterday like a formal mentorship program that junior engineers have to ask about joining versus defaulting people in because as Rebecca said the people that need the most help are often also the ones least likely to ask for fit. Ultimately if you have a report that's ‑‑ you think is really Guess Culture and they rarely make direct requests. If they do, pay attention to that because it's a really rare event. And so, another technique that if you're a Guess Culture person that you can use is to reference back to old conversations. So this happened with a friend of mine, she wanted to ask for a raise after she gotten new responsibilities as we were talking it through and kind of going back and forth with wording she might use she mentioned that she actually gotten feedback in her last performance review that her boss wanted her to be a little bit more assertive. So I suggested that she reference back to that conversation and it totally worked. She totally got a raise. Because I'm such a good friend I did not ask for a cut of that raise. And so you know one thing that you can do is go ahead and use this talk as an excuse for starting some of these conversations. For example I went to this amazing talk at eurucamp and then fill in the blank for yourself afterwards. Another common area this might come up at work is in getting and giving help. It's again, something when I have mentors formal or informal that I really like to have a conversation about beforehand. Talking about things like what's a good way, what's the best way to interrupt, is it through ‑‑ send an e‑mail tap someone on the shoulder, what's the frequency we should check in, weekly one‑on‑one or should I know signal that headphones on means don't bother them till the headphones are off again. And in general what's the guideline I should give for myself of how much time I should let myself be stuck until I reach out to someone and say something. And so again, once we have that conversation to start we can go back and reference what we had agreed upon there. So, you know, this might come up in certain situations like a stand up where a junior engineer update might be something like I'm not sure I rally understand this feature because what they're doing is that they're hoping people will see that they don't understand and then step up to offer help. So, you know, Christoph mentioned this in his talk yesterday on diving into a code base that it's totally key to ask for help when you're stuck. And I completely agree with that. What I'd like to point out here is that for this person they are asking for help, even if they're not exactly saying can you help me. And so it's good to try to pay attention subtle differences like that. And you know if you're in the position, you can go ahead anginal for yourself whether the way you're communicating is effective or not. Are you getting the help that you need. If not, it could be that people are missing your signals and you can either try alternate a little bit how you send those signals out or have a conversation with people to help them pick them up a little bit better for you. And on the mentor side, I think a really important point is to rib that just because no one has specifically said this is not working for me doesn't mean that everything is okay. You can go ahead and ask questions, you know, maybe really gently to try to find a little bit more about what's going on. So this is kind of like that really good question somebody had yesterday which is how can I get honest feedback about whether I'm being a good mentor or not. So, you know, a lot of people might say something like this. Do you have any questions for me, which is not bad, at least you're asking and showing interest rather than just waiting for someone to come to you. But, another way to try to draw that out might be using that offering options thing again. Where can I help more in this area or this area or maybe some other suggestion there. Starting from the standpoint that assuming, yes, there are areas where you can improve and help people say this is the starting point that we are work off of. And pairing, of course, often involve communication and people have different styles for that. Something I find that hems with that is to have a little bit of a pairing retro especially when things haven't gone well or you're having a hard time working with each other. So it can be really available to do this sort of analysis. For example I have a good friend at work Katie, she's Canadians, they're known as being really nice and they're often very Guess Culture as well. Chef said something like oh, I'm not sure I absorbed enough out of that last pairing session.  I could look at this and think, oh, well she's telling me she didn't get enough out of it, that doesn't have anything to do with me.  I try paying attention, oh, yeah, what would work better here. It's good that I picked up she was expressing a concern there. This could have used a bit of improvement.  I could of instead said hadding like oh, yeah, we were in an exploratory phase maybe next time we can save pairing for a little bit later. Offering up options how we can try it differently, opening it to a discussion about different potential solutions there. One phrase that I often end up using is something like, hey, I have a question, but it is totally okay to say no to that. It's just something you can say before you ask people for something. And it works for Guess Culture people as well. Because you can use this to remind yourself that other people can say no to you as well if you're feeling uncomfortable about something you need oask. Thanks to some of my expert Guess Culture friends that I practice thinks talk with this can be further improved. We can page it a little bit more 'em pathetic, maybe changing the last clause to like it's okay if you're busy, I understand if you're busy, and leaving an opening for people to say that, they'll get back to you at another time. And so over all I really like to impress all of us that I think it's really important to be thoughtful and try to help each other out. For example in meetings if you're a Guess Culture person you can go ahead and enlist and Ask Culture type of person to help advocate for your point of view in a more confrontational setting. You can step in mene when you know that certain situations might need a little bit different approach. Be thoughtful and be the one to call it out to carve out space for everyone to feel a little more comfortable. So, ultimately this is a topic that I'm a little obsessed with. And I love to talk to people about I, so if you ever have any questions for me, please just ask. (Applause)


We have time for two real quick questions.


So thanks for the talk, I really liked it. I was wondering about in a classroom situation like how would you handle it. It's really easy to tell people if you have any doubts about what I'm explaining you can ask, but if they're from the Guess Culture, they might not how would you apreach that situation.


That's a good question how what to do in a classroom situation. It's one of these things where I think it's good to offer a lot of different venues to approach you with question questions you might have.  I remember even for me, even being Ask Culture in college I would make really good use of office hours or reaching out to the TAs instead where I might be able to ask a question one‑on‑one versus in front of the entire lecture hall there. Another thing I think that would help with those situations is again sort of assuming that people do in fact have questions and opening up to give them options of where they might be confused in. We just reviewed this topic based on past experience as a teacher I know these are common areas where people are a little bit confuse Chad of these three areas should we spend some more time reviewing a little bit. Then people can offer you information that way.


Cool.


One more.


Looks like a very enthusiastic ...


Hi, I don't have a really great way of phrasing this but as a guess person I have a really hard time getting answers of ‑‑ out of people who I kind of identify to be guess people as well. You know like we're both kind of being polite around each other and I can never get an answer. What would you recommend for that kind of situation.


So this touches on another really pet topic of mine which is something I've been working on over the last few years is really trying to be more comfortable with letting myself be vulnerable to other people. Have you seen that really often Ted talk by Brene Brown the power of vulnerability. It's totally work it. I'm not a huge Ted talk, it's a good use of 10 or 20 minutes of your time. In those situations where you're both dancing around a topic and you're feeling a little bit concerned about, you know, causing someone else embarrassment, or feeling embarrassed yourself as well.  I think try trying to practice to being vulnerable and open yourself to making mistake or hurting someone or being hurt yourself can maybe help you get through that a little bit more. It's kind of scary, something to practice over time B.e, but it's really helped me in my relationships. I'm just sort of an awkward person, sorry about that, but we can work it out.


Thank you that swatches an amazing talk.


Cool. All right, thank you everyone. (Applause)


Great, while we're setting up, I'll introduce our next speaker. So Kinsey Ann Durham comes here all the way from Denver Colorado. And she has many accomplishments, she works for a company called go spot check as a software engineer. Also on the board of bridge foundry, which is sort of the parent organization that organizes Rails I believe be and closure bridge.  I think there's a few other ones, maybe mobile written ‑‑ teaching Angular mostly to women and she's founded her own start up called Coo which focuses on teaching women, giving them some digital literacy and teaching them to code and things like that. We can give away more foxes while we wait whom wants a fox. Should we explain a fox, is there any explanation necessary.


So there's a company called HitFox that is one of the sponsors of this conference and they had a gift for some of the speakers so everyone who spoke got one of these foxes in their speaker gift bag but then there were some extra so now we're just throwing foxes.  I don't know if that's a good explanation or makes sense, that's what's happening.


One more fox, all the way in the back. That's the best I can throw. Warm welcome for Kinsey Ann Durham. (Applause)


Kinsey Ann Durham:  Thank you. All right so the title of my talk today is the struggle to stay in tech. I'm Kinsey Ann Durham, I'm from Denver, Colorado. Joanne had a lot of awesome pictures of the mountain, it's this beautiful in person you should come and visit us, I'm a software helping near at go spot check. We're always hiring. And a couple years ago I was giving a talk at different Ruby conferences one in which I met Eric at and talked about breaking down the barriers to entry and getting more people of diverse backgrounds into tech, but there's a much bigger issue. We've heard about this in two other talks and in the co‑documentary if you had the pleasure of seeing that last night. How p people went to that?  So most of the people in the room, cool. So to quickly reiterate 56 percent of women end up leaving the tech industry compared to 17 percent of men. And out of those 56 percent of women, 97 percent of them are never coming back. So it's awesome we have some awesome organizations that are working really hard, really hard to get more women and minorities into tech, here's some of them, I learned a couple more in the documentary last night, compared to the organizations what are working on keeping women in the industry, very few. So during my research I decided to screen shot articles about women leaving the tech industry. Three years ago when I was first getting introduced to programming and the tech industry I would have been so discouraged after reading these. And documentary yesterday one of the women in the video talked about how she feels guilt about encouraging women to get into tech because sometimes it's not the best place to be. So yesterday Leslie mentioned the issue of the leaky pipe and I'm using the same analogy calling it a leaky bucket mostly because that's what I could find on Google. We have this ‑‑ over half of the women that successfully break the beariers to entry end up leaving. So I was curious why. Why are women packing their bags and leaving?  So I did a bunch offerer of both on‑line and I also got to interview so much really awesome ladies in the Ruby community to understand why. So I will dive into you know the reasons that I found through all my research.  I refer to them as trends. The first trend I found is a lack of flexibility. Lack of progressive maternity leave policies, but it's better here, Germany gets 14 weeks of paid maternity leave, so I realize it's a lot better than US, we have very bad policies. But I think it's important to mention because ultimately that isn't the reason why women are leaving, many women cited inflexible work schedules as the reason they left. Tech industries, especially start‑ups are notorious for maintaining crave simpler work hours, this affects both genders, but family responsibilities usually fall on women. We're stuck in our gender specific roles even to this day. Men more often than not don't have the same issue of choosing between a family and a career in tech. And if they chose family it's really hard to come back, especially in tech because things are moving so fast by the time they came back there would be ten new JavaScript frameworks they would have to learn. So women are still getting more maternity paid leave than fathers do. My company one time told me we have really progressive maternity leave policy.  I asked what it was 3 months paid, that's awesome for the US, when I asked how many weeks fathers get, they said two, I don't think that's progressive because we're still reinforcing those gender stereotypes. So flexible scheduling is essential for retaining women who often face unique work‑life challenges. The second trend that I found was biased evaluations. They kept, they just kept asking me to prove myself over and over again. Like now ... when people ask me what I'm talking about allot conferences often I feel embarrassed oh, keeping women in tech, I feel like I should be giving a technical talk, but this is what I feel passionate about it shouldn't make Mimi feel less of an engineer, but I feel had way sometimes. A study of performance review in fortune magazine from 28 companies all over the world with 248 reviews found that nearly 88 percent of women received critical feedback versus 59 percent of men. The word abrasive appeared on reviews frequently for women where the word was totally answer sent for men's reviews, bossy, referring to women who are powerful and assertive. There are a lot of theme in women's reviews centered around being quite, you don't let other people shine as much as you should, you should be less judgmental about so and so's contributions et. The third trend were less technical roles. We have a lot awesome female junior developers entering the scene. A lot of these women have previous careers in other industries and have other things they're good at. They ultimately get pull intoed non‑technical roles this make sense because a lot of small companies employee haves to wear many hats.  I experienced this I was working at a start up in Denver I was told I would get to write code and do all this awesome tech stuff. Ultimately I got pull intoed other jobs, I had to leave this very high awesome paying job and quit without a job writing code. Ultimately I chose to quit the high paying job and write code and I'm really glad that I did, it was the best decision I have ever made. So I talked with a will the of other women that are struggling with the same issue, it isn't just me. Mid level developers are getting pull intoed more management positions and eventually stop writing code. Men also experience this issue. The fourth trend was a sense of isolation this was a big one.  I got to talk with Sandy she said feeling of not belonging in a homogeneous group is one of the reasons why women lead. You feel like a fraud, a novelty, and you don't deserve a seat at the table. Eventually you get tired of being the odd duck. Eileen an awesome engineer at base camp she wouldn't feel alone if more women gave technical talks. We've seen a lot of talks by women at this conference, which is rare. Only one percent of Open Source contributors are women. Pamela Vic Vikers you remember felt like she should reach out to per manage about how she was struggling but didn't want to feel the odd person out. Someone to talk to a lot of times would be really helpful.  I feel at times too, I'm the only female on an all male engineering team. The fifth trend are the little things I'll let you read this quote, I don't want to reed everything. There are a lot of things that pile up over the years not knowing how to move forward. Things so small you never complain about them but they're happening day after day. It makes you think, hey, is this the right career path for me. The ‑‑ ‑‑ the main reason why women lever the tech industry is death by a thousand paper cuts. The thousand tiny paper cuts that make up life as a woman in the industry. So Joanne Cheng our keynote speaker says it gets exhausting to constantly explain you're a senior developer, for the first goe few years ‑‑ after ten years it's ridiculous. More often than not people think I'm brand new or more junior than I am, Kyle. She feels this way a lot at meet ups. They are usually newer to the community, those that ask her this, and apologize and take it back when they find out she works at big nerd ranch. What do these all have in common?  They all come down to company culture. A Macoo culture, ‑‑ especially in start‑ups ‑‑ and old boys club. Lack of support and micro aggressions. Women are leaving tech because they're unhappy with their work environments and PR N ‑‑ NPR did a big big study found women lever because of the environments they work in. Pamela said she dreaded going into work every day and felt stupid. Once she changed jobs and found a company where they had a better culture. It completely changed her way of thinking. Company culture was responsible for feeling miserable but also for her feeling great. The CEO of air B and N was asking Petr field was what's the single most important piece of invice, his advice was don'tfuck the culture. The culture is what creates the foundation for all future innovation. Company culture is root cause of this problem. So what can we do about it?  I've seen a lot of quotes like this from prominent community members and I really think that isn't true. Also, I think that men are crucial for creating this environment. There are a lot of women in the tech industry fighting for gender equality but saying much they hate men. We are not going to achieve equality this way, we're only going to make it worse. All of us are responsible for holding these stereotypes in our head. It's everyone's issue and we need to solve the problems together. So all of us need the have a culture where we acknowledge there's a problem. If we can't talk about it openly, then we ‑‑ we have no hope. We also recognize our biases, Sarah Allen talked about this recently that if we think about our bias s is, recognize them they will start to radiate into our daily actions. Google has been doing unconscious bias workshops for their employees. research shows raising awareness about unconscious bias can lead to more conscious decision making. We have open casual conversations, something that offends me might not necessarily offend you. So we need to be able to discuss this. We have aual where we sink and question swim, where it's okay to make mistakes as long as we learn from them. We educate ourselves on these issues. We mentor and on board, we make mentoring matter. We heard really great talk about this yesterday as well. I'm really impressed with what sound Cloud is doing, they're very invested in mentorship, they give employees 20 percent time each week to do this. They also have Rails Girls, fallows in the office and do internships with them for three months, which is really cool. We have flexible work schedules and equal maternity paternity leave policies.
vision C I has 25 days of required paid time off. It's required and also vacation days, sick days, moving days, etc. don't count.  I think it's awesome because it's really flexible to make sure people take the time off and breaks that they need for a healthy work life balance. Develop a reputation for being a company that acknowledges health and well being of it's employees. So we invest in learning, this is super important. Investing in professional development is the most profitable step high‑tech companies can take to advance technical women and retain all if he can thinkcal talent. Google pays for it's employees to go to classes, conferences that are all geared toward your career advancement. Offed so why?  Why should we be doing this?  Why should we care?  Improving company cull hour will solve this problem. Teams with greater gender diversity is twice as likely to exceed performance expectations, they make better decisions, and they out perform homogenous groups. But it's bigger than this. Women are still fighting for equal rights the, women make 75‑cents to the dollar of a man. We are still defined by our general.  I hope that one day I can be a programmer not a female programmer. Not to mention globally. We have made some progress in developed countries but many of our fellow human beings face atrocities based on their vend E. such as gender base violence, female general till mutilation. Change change can start with all of us, we node to be the role models, we are the builders of the programs that we spend hours a day on. When are you not your Honor computer or phone, we have an opportunity to create this culture, this culture that we have dreamt about for decades. We are the future of innovation, especially in the tech industry, we need to perform at our best because we are the future of solving problems that are dire. So we can change this, we need to change this, and always say to yourself, I really like this quote, if not me then who if not now when?  Because in the end we're a culture. We are the innovators of the world. So let's not Fuck it up. (Applause)


Thank you. So it's coffee break time, if anyone has any questions, I went a little bit over so you can tweet at me or e‑mail me but enjoy the coffee break.


And stay hydrated. Thank you so much for a very important talk. (Applause)


Comes to us from parse low that ‑‑ been in Berlin for the past few years, Berlin Ruby community, as well as the Berlin ...


He'll be giving a talk about the power of small abstractions, he's also an organizer of what used to be called Baruco and futures JS in bars low, that two great conferences, actually gotten merged with one this year called Fulsat ‑‑ the you want to see the line up, it's an amazing conference, I've been there the last three years, it's all great. Many of amazing speakers will be there. So check it out if you can, the tickets are already completely gone, you can still get one for future JS ‑‑ any way, without further adieu TXUS. (Applause)


TXUS:  Of so well, welcome, um ... I'm Txus, this is how you pronounce my name, for those of you that can read phonetics, I can't, and this is me, but with some hair, that I don't have anymore.  I work at Codegram, we ordinary care nice ‑‑ FEST, M ‑‑ and do some other cool stuff. But you're here to hear about abstraction. Abstraction is a loaded term. It's controversial, that's why I picked it.  I love abstraction and you've probably heard many times this code is too abstract. Or even maybe you've said it as well. However, I want to make the case that when judging abstraction, we're incredibly biased. Look at these two pictures. What are they?  A machine would have a bit of a problem.  I mean, maybe not today's machines, but, my programs, I couldn't possibly write a program that tells me what there is in this pictures. But you already know, it's both just dogs. Although they're seen from different perspective, they're different breeds even, similar control color, but within has a collar, the other one not. It's different, but you know it's dogs, your brain just sees this. And then you know a lot of stuff about dogs, so you just pull that out of your of secure cell map tick knowledge in your brain about dogs, so you know that dogs go for walks, and you know how the feed a dog. So that's kind of useful. You've never seen these two dogs before, but you know they are dogs. Now my favorite writer is Joorge Borhes an Argentinian writer, amazing writer, just go buy all of his books, he wrote a book called Fumas Memoris, one of my favorite stories N this story he talks about a young man who fell off a horse, and from that moment on his memory became perfect. He could no longer forget anything. So everything he sensed, it was permanently there in his brain. And, of course, he became a bit of an excentric and started taking on bizarre projects like he would try and reconstruct right down an entire day of his life with full detail and of course that would take him at least one entire day, but, ‑‑ and then he also, he got a bit weirder and started thinking ‑‑ he told Borjes, who is a character in the story, look I started working on a numeric system, I invent add numeric system, and Borjes tell me about it. Well Funes said I assign to every number a name, so the number 7 is Cher, and the number 200,000 five hundred thirty one is dog. And so on, and he would just write down all these names for over number. And Borjes said isn't that the opposite of a numerical system. You cannot reason about numbers this way if every single number has a name. But Funes wasn't interested in his arguments he kept on designing the system, he really liked it. Borjes went on and said, look, Jon Locke the philosopher once envisioned an impossible idiom where everything had it's own unique name, every instance of every branch of every tree had a unique name. Of course he discarded the idea because he thought this is stupid idea, you cannot think about anything if everything has it's own unique name, you cannot talk about anything with anyone because you cannot communicate a generic concept to some other person who has never seen it. But Funes he was, he was bored by this system. He thought this system was too general because toFunes not only everything deserve it's own name, but every ‑‑ like if he saw a dog at 3:00 p.m. from the side that dog doesn'tster of the same name from the same dog seen from the front one minute later. It's a different thing. It looks completely different and you sense it in a completely different way. So it needs it's own name. So Funes couldn't abstract over time of the we abstract over time all the time, we have this notion of identity. We look at a thing and a second later we know that it's the same thing or we think it's the same thing, and we talk about it as if it was the same thing. But to Funes that's just losing detail. It's funny because of course you all think that Funes seems like quite a brilliant individual, a weird guy, but quite brilliant, but Borjes suspected that Funes wasn't really capable of thinking. He said the thing is to forget differences, to generalize, to abstract. And Funes could not do that, wasn't interested at all in generalizing. So ... of course we've talked about Dogs and this' unfair, even if two dogs are dogs, they are different, they are different in an infinity of ways. So let's go to a more basic domain. For example addition, addition is something we can grabs much Bert than what a dog is. We know how to add numbers. We've beening it since forever. And we as programmers have this special power of adding strings as well because to us it's basically the same thing. You just connect two strings. We could go further and say we can also add lists together. Of so we could say that we take one thing and add it to another thing you get another thing back of the same kind. You don't get the same thing, but you get something of the same kind. Another property of addition is associativity. So it doesn't matter where we put the parens it always gives the same result. Same applies for strings, and the same applies for lists. So we other seeing a pattern here. For anything you take, no matter the parens where they are, it always gives the same result. Now addition gets more interesting with a special element that it's only been around for a few hundred years. And this' zero. It's a magical number. If you add one to zero, you get one. It's as if it didn't do anything of. We also have the same for strings, it's the empty string. And the same for lists. So you're seeing a pattern here. If you take a thing and you add it to a thing that's special that we call it the neutral thing you get a thing back of the same kind. Actually in this instance you get the same thing back. So we have these two properties that we've seen of addition no matter if it's about integers or strings or lists. Associativity and a neutral element. That's interesting to know, but how useful is it?  Well one instance where it is useful is if knowing something about something ‑‑ you can fold over list of things. So in this case you fold over list of integers, which in Ruby it's reduce or inject. And because it's associative it doesn't really matter if you fold left or fold right. That's kind of a knew answer, but you can use either. And you get the number back. The same for strings if you have a list of strings, you can fold, starting from the empty string. And the same for lists. So we can say that if we know we have a neutral element and something that adds associatively we can fold over a list of it, and we adopt care what it is. Now ‑‑ and we don't care what it is. Of course numbers, strings lists, these are primitive things, it's a coincidence that it works this way. Of course that's not useful in my program where I use complex objects and structures and that doesn't apply to my day‑to‑day. But I dare you to think of a data type more opaque and weird than functions. Functions are kind of a collection of code to be run later. Can we do the same with functions?  Let's see. We can add functions together if we understand add as composing functions. So we can compose F and G and apply it to X and it's the same as applying first G and then F to the result of that. Do they add associatively?  Well, as it turns out, they do. But what about the neutral element?  Do we have a zero for functions?  Is there a function that does nothing?  Well the identity function does nothing it returns its argument fair enough. Let's see, oh, that holds, you can compos F with the identity function and you get F back. So if everything I've said is true, you could fold a over list of functions and get the composition of all of them. So we've seen just by knowing these two things about functions, about a thing, we can fold over list of those things and we can do much more stuff but folding is just an example. Now it's not only about function number strings and lists. You should go through your own code base at work and look for things that look like this, that add associatively and have a neutral element. And you need to think abstractly to recognize this pattern. Now that you've seen it, you'll probably see a lot of things that look like that. Maybe validation errors, you can add them together, they just become a bigger   report. And you have a neutral element which maybe is a lack of errors, a success, a value that represents no errors. Think for yourself in your code basis and you'll find a lot of examples that behave like that. So because it's a bit Clunky to aassociative division and neutral element people don't talk like that, someone gave it a name Monoids. Now let's talk about things in pleur. We use arrays lists and sets in our day‑to‑day, all the time but we're not interested in the knew answers of each of these types so we'll just talk about collections. Collections of things. Doesn't matter if it's an array or something else. Collection is something that has a notion of zero or more things. And what can we do with collections?  Well, in Ruby we're pretty used to map, we map over collection, we do something for each element, right. That's actually more interesting than it looks what if the collection is empty, we know that map doesn't do anything, it just returns an empty collection. So this is how it works, the code is stupid code, don't look at it, don't take it seriously. It's not closure or anything like that. So we see that it works for a list of things and for an empty list. Now there's a special kind of list, a list of one element, if you will, which Macon train either one element or non. And in some languages they call that optional or maybe. It's literally just a special kind of list, right. Either zero or one element, but not more than one. So if it's so similar to a list, could we map over it?  If we map over it, then it just applies a function to the only element that there is or in's none then it just returns none, just like an empty list. Okay, now there's something a bit different. A future. How many of you have used futures in your day‑to‑day?  Okay. A future encapsulates the notion of eventually something. So not now,it doesn't exist right now, but at some point in time there will be something. Or not, maybe there's an error, so it also encapsulates the notion of an error. Futures, you can map over as well. You're telling them, apply this function to a value eventually when it exists, and if it doesn't then just don't do it, just give me back the error wrapped in a future. So you're probably seeing the pattern that futures optionals and lists can be mapped over. And they are very different things, but and mapping has different semantics. But maybe not so different. If we look at these things as boxes, just kind of boxes containers of things. Let's call them boxes, instead of collections futures and optionals we'll just talk about boxes. If we look at it just more abstractly as a box what would be the semantics of map?  Mapping a function over box applies F to whatever's inside the box and the way the box sees fit. If it's a future it will do it later, if it's a list it'll do it for each element and returns the same kind of box, be it a list, future or option.  I cannot stress enough, it will apply it in the way it sees fit. So a future has it's own way, a list has it's own way, an option has it's own way, however many times it wants, exactly when it wants, if at all. That's a lot of power. We just give it the function and magic happens. You probably thinking that sounds an awful liken capsulation, I'm used to that, it's like an object, Jo us tell it something, do this in whatever way you want, maybe. And of course it's not good reach into objects, and it's not good reach into boxes either. If you try and get the first element of a list, and it's empty, what do you get?  Nil an error?  Dependinges on your language, that's not a good thing. If you try to unwrap an optional and nothing is there, what do you get?  Nil or an error?  That's scary. You should be scared ofnil. If you try to unrap a future, basically need to wait until it exists right, that blocks the thread, that's not a good thing. So you're better off telling the box, look, do this when ever you want in which ever way you want, let the box decide. These boxes, abortion is kind of a stupid name, so other people gave it a smart name Functors. But you can keep calling it boxes, it's better. Now it's fine, but this kind of ‑‑ can Jo us use map for everything?  Can you just map over things?  Sometimes our functions are not that simple. There's a kind of function that are very hard to compose with these boxes. If you have a box of a type T, a box of integers and then a function from T to box of U be it something else. This kind of shape it's hard to ‑‑ you cannot use map with that, you end up with nested things, let's get to the more concrete things. If we have a collection of string and a function of string to collection of string then if we keep mapping over the collection we just get nested and nested collect collection of strings and that's maybe not what we want, probably. For an example, if we start off this string and we split by comma we get three elements. If we want to split by dot to each element we end up with a nested collection. What's wrong with that?  Well, if we wanted to keep on processing the elements of the list, we need to know the depth at which they are. And that's a knowledge that we don't want because that doesn't compos. If we pass this to something else it needs to know the depth of the data structure. And that's a lot of informs that it doesn't need. So there's, of course, another function called Flatmap, you also have it in Ruby which just applies the function to every element in the collection and then concord Nate the results into a flattened collection. So Flatmap does exactly what we want. Again ignore the code. So we get a platenned collection. The same problem arises when we have an optional and a function that yields further optional that's a lot of uncertainty, from a user you get an address, maybe, maybe it's not there, maybe a you user does vice‑president an address, maybe the address has a street number maybe not. We end up with the same nested structure that we don't want plat map works for options. That's not surprising. Plat map seems to work as well. We end up with a nice flattened optional. If any of the intermediate steps yields none then we just get none. Now with futures that's even more common you make an API call, grab a resource, depends on the result of the resource you need call some other APIs and get more things, if we were like calling the GitHub API and we get a repand come back we need to get the follower of the the repo. You would start off with a user, we get the followers with map you get a nested future not what you want. With Flatmap you get a single flattened future. So for all boxes, all kinds of boxes, plat map does the same like map but then it platens the result into a single flat box of the same kind. So when ever you see this you have a box of T U V, a nor mall value to a box and you need to keep composing them plat map is what you want this gives us a lot of power. If you see map was kind of stupid in the sense that if something depended on the result of a previous competition you couldn't do anything. But in this case you can have functions that do something depending on the value of some other box value. And when you see this, and you want to use Flatmap you can actually say that you're using Monads that's what Monads are. These boxes that you can use Flatmap with these kind of functions. so as a recap we know that by knowing two things of something we can fold over list of them and do many more things that are out of scope for this talk. We can use map to go from a box to the same kind of box doing something in between. We can use Flatmap when our shape is like that, when you have a nested box. So now that you've seen these and you have names for them be it the smart names or the normal understandable names now you're going to look at your code and you're going to see these things. And then you'll have very powerful and general ways of dealing with this, namely flat and Flatmap. Just two functions to do everything. Not everything. But most of the things. So I dare you to go on Monday to your code bases and try to look for these patterns because now that you've seen them and you can name them, you can think about them. I'd like to give a special thanks to Jessica Kerr, who helped me a lot with the structure ‑‑ the way to approach the teaching.  I know it's a hard topic to teach. So I hope, hopefully you got a better insight into the world of this really powerful structures and functions. Thank you (Applause)


Is there ... can you hear me?  There we go. Questions?  We have a few minutes you all get a fox ... if you want a fox ...


Hi


Thank cru for your talk it was brilliant. I have a more personal question.  I mean I've been using some concepts of ‑‑ and I've seen some colleagues that they have some difficult ‑‑ to submit ideas to their bosses, they say, oh we don't need this. So what are some suggestions to people make more frequent use of this?


So, yeah, that's a good point, but then I'm of the opinion that you don't need to sell this to your boss in the same we you don't need sell the strategy pattern to your bosses, you don't go asking, can I use the strategy pattern is it fine?  You just do it, it's your choice, you're a programmer, you just use the tools you know and try to learn new and better tools. So I would say you just go with it. And I mean, it's better to ask for forgiveness. If anyone ever says what is this code, that happened to me actually. But if it makes the code clean E. and it usually does, people will thank you. And your bosses don't need to know. (Laughing)


Great. Anymore questions?  Of get a fox.


Hey, thank you for your talk. So yeah, thinking about this is really rewarding in a way it's like it caters to your human instinct to like abstracting things and thinking about higher level abstractions rite. But it still ‑‑ let's say sometimes it's actually hard for people who are not used to these kind of things and you were saying before that we are heavily biased towards abstractions, well, I assume you think that most people ‑‑ well, biased I assume you think most people have problems with ‑‑ judge them not necessary, so what do you think is the best argument for convincing that actually it's not that hard to make the step to thinking in these terms and actually make good use of them.


In the same way that you probably, at some point, someone sees a visitor pattern and they're like what, what is this and they need to learn it and it's natural to them and they see it everywhere.  I think it's no different from this kind of abstractions, but there seems to be something different about them, right. They're scary, everyone is scared about them, that's only because people suck at teaching them. Myself included. It just ‑‑ there seems to be even a hidden interest to never teach that to anyone, like just use opaque words so that people never actually learn these powerful constructs, I think it's just removing all the mystery about that, and just teaching them is just normal things. And not making them scary. But that's easier said than done, of course.  I think a lot of people are trying to do that. And I think it's good, we've done a lot of progress .


Great, another round of applause for Txus. ( applause) so next up we have lightening talks. So if you are one of the speaker who will be giving a lightening talk please come up to the front. You can ‑‑ why don't you sit in this front row right here in these seats, all the speakers. Make your way up. And before the first lightning talk we're going to be doing a special raffle, we mentioned this yesterday, so this is the give away the Ruby Con Portugal.  I think it's going to be sort of, yeah, done live here on stage by Luis. Yeah, we'll try it. So if you haven't entered the raffle yet, it's not too late. If you want to go to Ruby Conf Portugal, you can still sweet, just make a tweet with the Hashtag eurucamp the number 2 and PT the two letter ISO code for the country Portugal and you'll enter yourself to win a ticket to Ruby Conf Portugal. A lovely conference in Braga.


Yeah, show the code, we have a minute. So one sort of cool thing is Luis actually implemented this in Crystal, obviously, so the code that actually choses the winner he will demo now.  I guess you need a microphone.


Okay, thanks, so just really fast. Okay, thanks. So yeah, so I was ‑‑ I was challenged to do this yesterday so I spent the night doing it. So using your code as well, so Props for that, you can get that tweeter gem or chart. And so really what I did is get tweets with the Hashtag which you can still use because it's going to be live of. Using this ‑‑ most of it is hidden you can see the J son mapping that happens in Crystal. You can savvy the J son I'm getting for instance we have the status key that comes from Twitter and I seem saying it's an ray of Twitter tweets and this is something that was here and it has a lot more stuff that ‑‑ retweeted could want, I just added this, which is a retweeted status it can be Nil it means it's an actual tweet, if there's something there it's a retweet, I'm rejecting that here, retweets do not count. I'm happening over it, saying I know this user is not Nil because it might be that the main user might be there or not. Let's assume there's always a use erand getting the name of the user. Yeah, then I just have the client, so hopefully this will work. And then Sam   to get a random name and wherever sample uses will be a lucky winner of the raffle.


Did you call unique or ‑‑ I found a bug, that will probably break it. Okay, good. Okay, bug fixed now all you cheaters have been foiled. So you can still enter, enter as many times as you want. Only one counts. And the hear tag again is final reminder any tweet that has the Hashtag your cam 2pt get them in Eurucamp 2pt. Crystal code runs fast so be quick.


I'm going to build again so it's unique, should be fast enough. So Twitter raffle. Hey. It's Alex Cole. (Applause) congratlation to Alex.  I ever let's give it away run it again. Alex is refusing, despite entering the contest.


I told him he could give it to someone else, I'm going to do it again then ‑‑ .
of of okay, why, wow! So Alex is incredibly lucky. Who is Bastian?  Okay. Talk to Luis to get the ticket. Okay, congratulations you won (Applause) Alex is suspiciously lucky. Not sure about that. Okay, so, I don't actually have the list in front of me of lightening speakers, hopefully you know your order are you sitting in order?  Wow, that's rally well planned, thank you. Okay, yeah, so yeah we're going to just sort of go as fast as we can between these things, perhaps I'll throw foxes to distract the crowd. Okay, so Phil who spoke at JRubyconf will give us a lightening talk about Twilio Twilio


I'm ‑‑ Twilio is a Cloud communication platform that allows you to make and receive phone calls on send and receive text messages using the tools the framework languages you already know.  I just want to show you a quick pit about how it works today. I'm not much for slides so I have this browser and some code and I would like to write an App for you right now. Before I do start that,i liked you to grab your phones get those out and tethering is on, because I think that's more fun. So everything in Twilio starts with a phone number. And I'm just going to buy one right now. I'm not going to buy one in the UK, that's not where we R. that's boring, let's get one in Germany, and I'm going to get a mobile number, then I can do texts and calling. So, I'm just going to buy this number. And now it is mine. Cool. It is now I'm going to set it up. What happens in Twilio when you have this number when someone sends a text message or makes a phone call to a number you can send a request URL here for voice and text that Twilio will send an HTTP request, to a web hook it'll give you all the details about the SMS or the call and you tell Twilio what to do with that so I'm go dog that right now and set it up to an application that's running on my machine. Use Ingrot to tunnel through. That's set up, let's build that App because it's here right now. Make that side a bit morement cool, So, I'm going to build a quick Sinatra application because it's easy hopefully we know what we're talking about. Make a post request to messages, and when we receive that message we need to return some XML because that's what Twilio likes to talk. We like to call it Twiel, because that's cute I think. And all Twimpo starts with a response and then you can do stuff with it. It's for a text message I can send a message back, I can say hi, thanks for watching. Here's and I got a little primary code for Twilio here. Which will get you 20‑dollars of free credit if you use the pro mow code eurucamp 15 angle in that message there. And this' that. So I'm going back here and start that application. And if you grab your phones as we had them out earlier and send a message to that number, you read that, cool, I'm going to do so too, Jo hulled get that response back. So ... I'll read this out in just a second as I'm doing it. That's plus 49, I guess it's probably just 0,i'm international so I'm going to plus 49, 157359863476. That's a lot of numbers. And so we're seeing some responses ‑‑ we're seeing some things come in behind, which is a good sign, means something is working. And if you get a response, if you're getting a text back give me a shout yes, we have some text back, good stuff that's exciting. It's quite a lot of them, sorry, did we miss that, there's number. And so while things are still coming in I can tell you other things we can do with this, we have a rest AI to get the details of the messages and I'm going to jump out to that now. So I'm just going to start off a quick IRB session and require the Twilio gem, Twilio‑ruby. We have helper library in several languages but Ruby is the only one thrallly patters right . I need to build a Crystal one, obviously, we'll see about this sometime later. And I'm just going to make myself a client with my account SID, basically the user name and password. Those things stuck in my environment there so you can't use my account, which has a lot more privileges and then I can go get those messages that you sent. Just by calling client up, messages.list and I get them, the messages that were sent to that number. And there I have them. So now what I can do with that is probably ‑‑ hold on I can steel your numbers for a start, that's a good start, map over the ‑‑ sorry I won't do anything bad with them, I promise ‑‑ (Little evil laugh) and I can put in the body of the message, I hope no one sent anything against the code of conduct because it's about to go on the screen. So I can map out and get the message. Hello, hi everyone, XXS, into the terminal is also an interesting idea. (Applause) but I have your numbers that's the important thing and with those I can just run over them and call you back. Which is quite ‑‑ should be fun. So I can do thatw the same client.calls.create. Make a call from the number I bought ‑‑ ten seconds ‑‑ Huh?  Ten seconds


Type quickly.


That's definite lit not happening, you want to get this call, right.


Five, ‑‑ these are long seconds, these are very long seconds, I could run that so I'm going to quickly do something to add the voice end point here probably not send you a message back, there's bunches of stuff we can do here like saying stuff plaining stuff I'm just going to dial us into a conference call because it's a very social conference and that's all I have time for so offed ‑‑ doesn't map whareyou call it as long as it's some sort of ID. Of pressure, under pressure now. ... Ah some sort of weird completion there. Brilliant that all looks right. You have more XML send back, hit back your phone should start to wring, dropped into a conference call together and have a chat it'll be great fun. Anybody ringing yet?  Someone's ringing of all right, cool. While I let those go that is how quickly it is to get started with Twilio if you have any questions, come find me I'm in a red t‑shirt I'll be here for the rest of eurucamp thank you for listening ((Applause))


Okay, so thank you to the organizers for bringing it. The second lightening talk will be from of (Phone ringing) hopefully that's you.


Oh, my watch is ringing. Okay. Good. Totally worked good demo Phil.


Hello?


Hello my name is Isaiah, today I'm going to talk about buff protocol buffers on JRuby. The first question is so what is protocol buffers, protocol buffers is a Google language‑neutral platform independent format for structured data. So you can think ‑‑ XML but it's faster and smaller, so, you can see this is an example for a protocol buffer scheme. Use of your system. What's the use of this of protocol buffer format you can use it to replace JSON within your macro services API. The disadvantage is that the ‑‑ you need to know the scheme in order to disablize the binary ‑‑ you can generate the client and the ‑‑ code for you based on the scheme so you don't have boilerplate code when you're trying to parse JSON, also it's faster, stabilization and de‑stabilization. Also supports code for ‑‑ languages, Java code, so it's an advantage that you can use it on your mobile client without ‑‑ client codes. So the latest version has official support from Google, for Ruby before there was no official support. The problem now is that the official library is written as a C extension so it cannot be ‑‑ it doesn't work on JRuby. What I did is that I ported this to JRuby with a wrap for the ‑‑ Java client. So probably you heard about Ruby knave extension written in C you can do that in Java as well.  I think the JRuby team is quite how do I say ‑‑ of ‑‑ this BFFI so you can get the same code that runs on post M MI and JRuby. You can do this with of ‑‑ you have Java code and link that to Ruby. And the performance ‑‑ you see actually faster than C extension based on this benchmark Ruby ‑‑ the red‑black tree ... yeah, so there is ‑‑ yeah, what we did is basically on the existing specs I ‑‑ Java reflection API for the dynamic message if you know the ‑‑ ‑‑ library. How to do this thing, there is no document ton JRuby side. You have to ‑‑ the code how JRuby is implemented actually so all the standard library stuff are implement in the Java and they use this notation to generate the code that can be code for the Ruby side. If you are using lot of ‑‑ services and you want to save some time writing you check this out. There's another project called GRPC based on HTP 2 and the protocol buffers. Definitely worth checking out so thank you. (Applause)


Next up we Rubicorns. ((Applause) (


This lightening talk has a hash tack which is Hashtag Rubicorns rule. If you wish to tweet.


You're on the clock.


Can I get the microphone?


You absolutely can.


I say start and then ...


Okay, so um you might have been wondering with all the tattoos on everyone what is even a Rubycorn and the answer to your questions are that they are member of the Rubycorns study group, some examples of which you can see here. Hear tag Rubycorsrule. So you might be asking what is even a study group. And I have a very, like, our only code example, basically. Yeah, a study group has many members. Members come in like different shapes and sizes and they might, at some point chose to wear a Wonsie to a conference, but you never know.


Also a study group has many coaches and coaches just basically make everything better. Which means they make the students build, they help the students during their first little steps in Ruby with a little bit of map, later on also a bit of mentorship by teaching you also improve yourself a lot.  I think everyone who has ever coached can say yeah to that, and so dear companies also if you want to make your developers better go send them to be coaches and teach.


Also like the list goes on a study group belongs to a meeting place. Meeting place also come in different shapes and sizes and one cool thing is that your company could be such a meeting place. And give learners like a place to learn and share and just have a good time. And one thing that is very important is that study group has a regular time this is important, you have a schedule that people can adjust to and just yeah, make it a habit out of learning and being together and having fun. Which leads to the over all concept of a study group being a supportive safe space to learn, which is important to like make our community a better place. So ... which comes to your part ‑‑ yes, so why do we even due it?  Because it's a lot of fun, much learn, very cake, we love cake, all of the error message on our App have something to do with cake. And also it's for everyone everywhere anyone can be a part of a study group and you make it want what you want to be, it can be silly, serious, we like having silly fun, you can do it however you want and we're also a community where a community of Rubycorns, we're also a project group community, can I get a show of hands who here is in a project group or has at some point been in a project group?  That's awesome. And who here wants to be in a project group?  Perfect. Okay, so walk around, find each other. And go towarg ‑‑ Rorganize, sign up for project groups, if you don't see one that you want to join or there isn't one in your city then make one yourself. Or you can come find a Rubycorn and ask us how to do that. You can ask us questions, and we have both guess and Ask Culture people, so just come up to us. And this is the page for our group and you can see there we meet at bit crowd Tuesday's at 9:00 and ‑‑ 7:00 sorry 19 of the 00 and our Twitter handle isrubycorns. (Applause)


So to finish off we wanted to thank Toby and the fox Onsie and ‑‑ there he is (Applause) of yeah
for giving us so many of their Tuesday evenings and also a lot of time out of that to manage our pull request. And also bit crowd for hosting   us every week and being really patient so (Applause) and these are all our Rubycorns that can't be on the stage with us. Oh ‑‑ and we want to give you some tattoos and we're going to hand them out now. Applause. Is


For what it's worth I'm also here representing one of the Ruby Rails lerper groups in Berlin, rubies on the Cloud. We don't have these type of out fits but we do have lovely t‑shirts and, yeah, it's Rorganize. It's an amazing program, I highly encourage people to ‑‑ and ... shout out ‑‑


Shout out to Ruby monsters, we have our button, you can come and talk to us ( applause) ready to go.


Does anyone know how to full screen chrome?  Command shift F perfect. Okay.


Okay. Five minutes, go. Okay, so first big shout out to Samsung who lets me know that I'm roaming and I'm 24 hours off my home time, that e would explain the jet lag, that's rest of my home screen, thank you Florian for reminding me that I should have put quote of you ‑‑ that's the quote. It's not about shotman ship, let's talk a bit of Ruby. Big hat tip to all the conferences that sends tickets for Ruby Summer of Code, there is also a Rossconf code that goes back to this at the end of the talk, all of those conferences send out tickets for the participants. So who goes there?  Let's say we have this set of information, we have some conferences we have some names, thanks to the gem, I didn't have to invade anyone's pry have a is, we get to see who goes where. We can have the name keyed hash, we can have Conf‑keyed hash, we can have a logical metrics, and oh, of course can you please just remind us what that is. That's a rectangular table that has Boone yen values true or false whether the relationship is there or not . We can query the matrix just by indexes of the conference and whether somebody goes to a given conference. Okay, but it's not like super efficient if we had very many participants, which we want to did at every conference, then, every conference ‑‑ and every participant adds a column, this is the number of bytes or actually like objects that we will create in Ruby. So how about United Stating zeros and ones instead, instead of logical matrix, let's have a bit matrix when somebody goes to a conference and zeros if they don't. Instead of that we can have this in Ruby which is binary rep evennation of integers this way we can have one integer per row not one array of how many participants are there. And this matrix is in practice, a matrix of integers, so how much better that is, now we have only one fix now for each conference. So Fixnum go to in wonderful number, you learned this way of specifying numbers yesterday. This is the numbers spelled out, obviously we all have more or less the idea that it might be enough, like to cover everybody, maybe, who knows. That's actually four Quintillion. How do we query this?  We query the Bo olean metrics by indexing into it the whole point of this talk is this wonderful message it's integer square brackets square back et method on integers and we index into the bit of the integer, so if we, for example, 29, which is 11101 in bynary, the right most ‑‑ the zero indexed integer, is one, next one is zero, the next one one it returns the N‑Th least significant bit. We can query just as well into this matrix as we did with Boolean matrix. But let's try to figure out how many participants go to each Conf. In the Boolean we can count the number of trues for every row. But in this case we can just take the string representation and count how many ones are in the binary representation of this of number. But, that's also not very efficient, this is called population count and there are even better ways of counting population counts, let's freedom patch the integer class and add the pop count to add our basic simplest implementation that we have. We can do better. We can go through the number, shift it one bit to the right and check whether the right most bit after shifting is one or zero. We can do even better. We can have this implementation.  I won't go be details here, it's maybe more efficient, we don't know yet, probably, people say this, maybe, we can have this lovely implementation, a really suggest that you go to the slides later and figure out how it works, it's wonderful. We can drop down to see without leaving Ruby, awesome, we can implement this only this many numbers ‑‑ or we can actually realize our processors have thispopcount function built in and we can build down through assembly through C from Ruby which is awesome of the we can figure out that maybe if we have the numbers counted then we can have the pop counts for all the numbers up to 0xfffff and then shift that number and count the number of bits. We created a simple benchmark, failooops if the method don't work guess how many times I gotooops, then benchmark with benchmark IPS, sudden let's interesting, we see the built in one is by far the fastes B. the ‑‑ is only 25 times shower, which is surprisingly fast maybe we should stick to the quick one. The bit elimination one is slower than 2 S to 1, ‑‑ please, please, please always bench mash. And if this pattern rings a bell I'm kind of sympathizing to some extent also I'm really in awe because that's the pattern from game of life, if you click that you will read up what that means, and of course, game of life can also be implemented as areas of integers, once again big shout out to the conferences RoSSConf is free, but the organizers ask for a deposit if you cannot cover the deposit please use that code, if you can the deposit will be returned to you if you show up this can be used by somebody else who is for some other reason cannot use it. The slides are here, thank you so much (Applause)


Next up we have a talk with Ruby issues I'll distract you with Boogoolao



can you sit Boogaloo. Indifference, can you lie down Awe (Applause))


Does he neath, maybe he'll get a fox later. Boogaloo likes the fox.


Without further adieu, the next talk on Ruby issues .


Come on.


(Applause)


Hello Ruby camp, you put the thank you slide to the end, right. But this time I've flip the order of my slides and yeah, because I want to say thank you for all the organizers doing awesome stuff today and last days. And preparing this conference and ‑‑ thank you for (Applause) thank you for this awesome conference. Thank you. (Applause) places the second part of the lightening talk is about the Ruby issues. Which is a mailing newsletter sent own bimonthly. And if you subscribe and all of you should, you will receive an e‑mail or two e‑mails a month with issues related to Ruby ‑‑ Open Source Ruby issues collected from GitHub. We go through GitHub issues, read through them and collect them to a list and decide whether or not if we put them to the next Ruby issues, issue. And yeah ... the ambitious behind this thing is to provide an entry level for not only for beginners, also for intermediate developers or more experienced Ruby developers to get in touch with Open Source to, yeah, write something like an easy step to get involved and to contribute because GitHub is that big and you maybe sit there and think, okay, where could I start?  And I got told from many people not knowing offed where should I start and this might be a thing where you could read about some issues and get started, getting involved into Open Source. This is the URL here, Ruby issues.on good bits.com. And this is believe me or not it's time consuming collecting all these issues and then reading through them. This is only possible because it's sponsored by Odin or better known as Parallels, maybe you have heard about them so my ‑‑ also I think I'm very thankful them and my name is Robin, this is my company magic labs and ‑‑ on on Twitter, and that's it.  I hope you subscribe. (Applause) next up Pico games.


Wait for it ... anyone want a fox that doesn't have one yet.


All right. So the conference started off with a talk about Awe, and Whoa ‑‑ what you don't see is the keynote just crashed on me this is brilliant.


I'm in Awe of that ... Aaaaawww ‑‑ we heard about Awe, and one of the hinges that make me awe or get better at this to feel it more often is trying to figure out how to build games. And we had a few talks about game development throughout the last your cam for example last year Ren was talking about Gosu, which is a Ruby library to build games. And this is all very well.  I also like to try out new things and I do Ruby for a living so. Let's try something different there's a thing called love and you write games in Lua, it's awesome, it's this big gaming framework, 3‑D games 2‑D games.  I find these things overwhelming because there are so many possibilities so I found something I wanted to share with you because it's been my happy place the last few weeks, and I've been doing a lot of stuff in it's called Pico‑8, by a guy called Zep, a fantasy console a Runtime for something that could also be a gaming console like, you know, something like this. And it has awesome specs it has 127 by 127 fix els, 16 colors 4 channel retro sound. If you boot it up it looks like this. And this looks familiar to me because I grew up with a C 64 this is awesome, if you press escape you enter this and you suddenly can right LUA code so you program LUA this is kind of cool because everything you need to edit a game, to build a game is built into the system. So this is ‑‑ you write Lua code, but you also can create sprites and they are 8 by 8 Pixels, that's not a lot of Pixels to figure out even a stupid programmer like me can do awesome Pixels with this you have a map editor, most 2 D games need a map where you can navigate as a player on the screen, you create a map, there's also a sound editor that allows you to create these retro bleeps and blood pressures, you put them together you get music, there's a music editor, I've been making music in trackers during the '90s, this is kind of cool, I used the spare time at this conference to build a game, you've probably seen that before. It took me about I would say something between three and four hours in total to build this game. And if you ‑‑ so that's kind of amazing, to me. That's not my awesome skills that's just because it's so simple. And then you have something called a cartridge because you have this console metaphor and you save it as a file it has a P 8 extension for Pico 8, I guess. And it's a text file which is awesome because you can edit in your favorite text editor. There's a segment that started with LUA if anyone is wondering what is going on with my Twitter handle
is the graphics in there, not as editable as the code, but the cool thing about it is you can basically work together on a game and then joust copy pits and pieces together. You can save it as a PNG file which is weird, but the PNG file cob contain it is whole game, you is the screen shot and the meta info then you can up load it to Pico‑8.com and it looks like this and there's ally button and you can play the game on the web, H HTML 5 plyer to compile all this Lua into JavaScript. You can find the game there if you want to look at it, I decided not to use the Pixel font for the URL. It costs a little bit of money, it's not Open Source, which is a bummer, for me it has been, like I said, it has been my happy place because it's so easy, the constraints really force you to be really creative. And I loved it so I wanted to share it with you thank you very much (Applause) okay next um Jason Clark talks about Shooooos, with at least three O's, is there a con noncal number of 0's ‑‑


The Twitter number has five or six, just keep typing 00000s until you find the Twitter account. Ready?


Almost. It billion not be ready to play ... well ... Hmmm ... I got a little sound to it but ... let's just go, it'll be fine. All right, welcome, my name is Jason Clark I work for New Relic, high here to talk about shoes, so what is shoes. Shoes is a G U I library built in Ruby, cross platform it lets you write desktop applications that you can run on all the major operating system, windows, Linux and Mac. It was originally written by why the lucky stiff. Who did a lot of different things you might have heard of his poignant guide to Ruby a few other frameworks he wrote, but shoes was one of his biggest contributions he used it to write a beginning programming environment called hack etty hack. So this is the Gment I he used to build this and also the framework you use in hackty hack to little desktop applications this was aimed at beginners and kids to make an accessible way to run Ruby directly on your PC but those who were in the community at the time now why disappeared, he took his code off the internet. He went away, and a lot of people probably thought that was the end of shoes, well I'm here to tell you that that's not case but before I get into further detail, I want to make a small digression. One of the things that was brilliant about why is that he was kind of weird. Things were strange, the ideas that he came up with were off the wall. And I feel like I'm not him, I'm not that weird, but, I can't have a presentation without having something that sort of calls out to that. And so in my university I had a ‑‑ one of my friends in my software engineering class maked Mike Larson when he would learn something proposal the professor would balk like a chicken. And he called this the learning chicken. And so today I have include in the our presentation a learning chicken. So if you shout out give me a chicken, I well give you a learning chicken. Can somebody ‑‑


Give me a chicken. (If clucking chicken) if you feel like I've taught you something some interesting fact some little bit give me a chicken and you will have a chicken. All right, back to shoes, so after why sort of disappeared and left his code behind it was difficult for people to work with Itaú BBA had a lot of native UI bindings and the community came around to rewriting it. And we're ray writing it right now using JRuby.  I feel like that's a chicken moment (Clucking chicken) so JRuby is awesome for this because it provides us a cross platform G U I that somebody else has to take care of. We get to write Ruby Code on top of that, it makes the shoes project very accessible and easy. If you write Ruby you can read pretty much all of shoes and it will make sense. So let's look at a few quick demos. There's animations there's drawing, there's text, a lot of different ways to make things easy to layout. There's games. This is one of the big things that draws people in, let's see here can I ‑‑ I kind of suck at mine sweep E. I guess I should of practice better. You can do other sorts of games like the snake game, I also suck at that, but maybe you can do better. And my favorite contribution completely unbuy as in the the entire Open Source world, this is a program that went back as a sample into the shoes project that I wrote with my then five‑year‑old daughter, it looks like this.


I feel like that's economicken wore think. Shoes is awesome you should get involved. There's lots of issues out there we're pushing for a full release, it's compatible with the old shoes that came from Why people of any level in Ruby can get involved in this we would love to have you reach out but everybody has their own project, their own thing that they want. And I want you to go away with this thought. This is why I care about shoes. This is my daughter. Teaching my dad the program that she wrote when my dad taught me to program. This is three generations of programming here that shoes is making possible. So if you want to see a little more of this shapeless plug there's a presentation that I did, my daughter demoed her shoes code live, I have never demoed my code live, she has, it's awesome of the check it out. Thank you (Applause)


We have a familiar face back on stage, you nay remember T X U S ‑‑


I'm not the same person. (Laughing)


Okay.


Well, this is going to be a brief one so I know there's lunch waiting. So I hope that this resonates with some of you or a lot of you. Hopefully, I once decided that I wanted to level up and learn type systems. And so I bought this book. Types and perhaps languages, what I expected was more like this. Two pages one for types one for programming languages. But I found this. Of it was terrible. I accidentally in my pants. Of really bad. Then I started doubting myself, as you do, people do that and you start thinking, is this for me, maybe this is really too hard, this is too hard, then I started thinking we are our worst enemies when we're trying to level up. We tell ourselves a couple of lives mostly, this is not for me. That's not true, I mean people learn this stuff. It's just they don't tell you what happened when they tried to learn it and they kind of ‑‑ they got really scared. But everyone opens the book for the first time and go Whoa no, I'm still like that with that book, I'm halfway through book. Then second one is even worse. But I'm not like ... this other person who learned this. This is extremely harmful because especially for minorities this tends to look even more true like I literally don't look like that other person, probably I can't really do it. And this is really bad, it's good have Idols, I have lots of Idols, but you need to build your own path. You definitely don't need be like them that's defeating the point of progress. So a couple of tips, find strength in inspiring people. Definitely look up to people and find strength in them. But don't ‑‑ don't feel small when looking at them. Be patient because it's a long way and it's really hard. But that's fine. And go level up. Thank you. (Applause) if next talk will be about the rail girls Summer of Code. Spoiler alert. How do you do full screen ‑‑ that did something crazy.


Thanks so much. (Applause).


Well, okay, hi, we are Alster Hamburgs, I'm studying computer science and economy and I was really bored with the languages I was learning at universetive at that time so I was only learning Java and C and I wanted to try out something new so I started to learn some Ruby and I got to know Anke.


So I'm Anke a long time ago I got a masters degree in something truly non‑technical and it was culture history and then awrote a master thesis about witch persecutions and then went on to work nothing related to that again, my jobs became more and more technical. I was a product undereat Google.  I image to Germany and decided I want to learn some more technical skills myself because I have some intense coding envy working with engineer understanding what they were trying to do but not being able to do it.


We've been talking about Rails Girls a lot, but what is it really Rails Girl Summer of Code. It's a fellowship program that aims to bring more diversity into Open Source and it means that selected teams get three months scholarship to just work on an Open Source project and have coaches and mentors. And Anke and me we are one of the lucky ones that got accepted, so that's really nice. And we have 40 students, 67 coaches 26 project mentors and 16 supervisors worldwide and it's from July until September. And because it's much easier to learn something new when you have people around you who know what they're doing. Every team gets a coaching company and some mentors and coaches. So you can see those up there. We have a team of five coaches as well as two mentors in our office at thought works so it's a great situation to be in. Not only do they help us and teach us lots of new skills but also feel like we were part of the team from day one, so we went canoeing on our first week, and yeah, it's great to be there.


Yay, what is our Open Source project really about. It's called LEAP, and it aims to give all internet users access to secure communication and we decided to dedicate our summer to building a token based user registration on their web site, on the sign up page. And so this is going to be our first project. We chose leap because we find it really important that people can chose who they communicate with out wondering who might be like looking into their e‑mails or like wondering who might be eavesdropping on their conversations what so ever. So yeah that's why we chose Leap.


And so of what we've done so far, so far we haven't actually touched the real code yet, but we're getting really really close to doing that. We've tried to make friends with a lot of things with Ruby, Rails H HTML a lot of things we came across and we'll find more one along the way. With coaches we worked a lot on project organization. You can see in the picture our board and a box with all our done stories will end up at some point. So we have a plan and hopefully that is a big step towards using our summer well.


Yep.


So please come and talk to us. We'd love to talk to like‑minded people, if you have interesting hack a tons coming up or any event that might be interesting for us, we're happy to talk about it with you and of since we've been talking about hamburgers so much, let's get lunch! Applause)


We have one final lightening talk for the second year in a row, Patrick is going to come up and give us inspiration (
>>Yeah! (Applause)


Yeah, it's good be here once again.  I always feel at home because you guys are beautiful and happy people I need some live from you guys, raise up your hands and name some if you canning noise ‑‑ fucking noise! (Applause)


Yes ... that's what it's all about, you know. You guys are future hopes, and you guys are ‑‑ you guys are our greater tomorrow. You guys are on the move, any way, you guys are justlike gold. And you guys are making the world worth living once again. Some people are living only for today, but you guys are living for tomorrow because you guys are ahead of today's people. I'm just here to encourage your guys to tell you guys that ain't no stopping you guys forward ever backward never. You guys are just like gold! You guys are just like gold! Because if you don't know the worth of gold, if you see gold you can tram   on it, you know, if you're not a gold miner you will never know the worth of gold, you guys are going to go through processes before shining, there is no easy way to the top! No pain, no gain! No pain, no gain! I'm a living witness, you know. That no pain no gain! No easy way to the top. Gold has to pass through processes, so many processes even to pass through fire before becoming gold before shining to be gold. There is lots of ups and downs. Lots of up and downs but you adopt have to give up. Boogaloo chill out. You don't have to give up, you know. You have to try as much as you can to be what you want to be. And to get what you want! It's in your hand. It's in your hand because you guys are making the world to be a better place. Right now you can never say oh I'm bored, no way. Based on what you guys are doing you can be at home playing TV game, sending messages to people doing whatever you want to do. You must not come out from your house ... so don't say, oh ... it's too hard, it's too hard, it's too hard. But don't get discouraged never you get discouraged. Doing what you love is very, very necessary. And you guys are here because you guys love programming. That's why you guys are here. That's why I said that there's in easy way to the top, once you're doing what you love it doesn't matter, there must be ups and downs, but you don't have to give up ... you know. So ... you guys are going to get there, you're now passing through fire ... through processes to become what you really want to be and you guys will be there. You guys are getting there, maybe in few weeks, you guys will be well‑known guys, but there's one thing that I have to tell you guys, a tree can never make a forest. You guys have to keep on working together. You guys have to keep on giving helping hand to one another. That's the way to achieve your goal. Of that's why we're human beings ... left hand got to wash right hand and the right hand got to wash the left one. So ... I thank you guys for coming out any way.  I thank you guys for everything, most especially the organizers and the participants, you guys are highly ‑‑ I don't know welcome and you guys are on the move. So, forward ever backward never! Forward ever, backward never! Of (Applause) bless up, bless up.


Now we have lunch, we refer running a bit behind schedule, about 30 minutes behind, please be back here for the next talk at 2:15. When you line up for lunch two lines one for the cold food and one for the hot food, it will go faster.


After the lunch break.


Kylie Stradley, Elise Huard. . Eamon Huidobro, Hanneli Tavante, Boris Bugling.


...


...


...


...


...


...


...


...


...


... of


Welcome back after lunch. Did you all have a good lunch?  (Applause)


Thank you food people, it was awesome lunch. Next up is Kylie, she's a software engineer at big nerd ranch. She taught herself visual basic before moving on to Ruby on Rails. She will present today a talk if sort of a story book style and with that Kylie Stradley, please get started. (Applause)


Kylie Stradley .
. Hi, hello, okay. Can everyone hear me well?  Just before I get too far in. Okay, perfect. This talk is called Amelia Bedelia learns to code. My name is Kylie Stradley, I'm a developer, I live in at that, Georgia, in the United States, not the country Georgia, that would be cool.  I love making and eating pizza so much this is my work photo, if you go to my company's web site, that's my photo, this is my Twitter handle if for any reason you want to reach me or tweet at me. I'm very excited to be here because this conference comes very highly recommended and I have had such a good time here so far in every single talk that I've been to has been such an overwhelmingly enjoyable positive experience. So that's been really great. I'm not here to tell you about me though, and how much I love Ruby camp. I'm here to talk about a character from my childhood. Her name is Amelia Bedelia. She is a children's story book character. But before I get too for ahead of myself, could I get a show of hands ‑‑ anyone here currently or at any time in the past ever been a child?  (laughing) okay, some of you are laughing, but not everyone raised their hand. So I just wanted to gauge that number in the spirit of inclusiveness to find out what the demographic is here today. So, yeah, like said, let's meet Amelia Bedelia. In make this character is used to teach young, grade school age children about idioms and figures of speech. And the children really identify with the mistakes and mix ups that she makes because like a child she doesn't realize like until she's told that the phrases have more meaning than the such of their parts, she takes them literally.  I might said it I don't mean a lot, makes be sure we're on the same page an Idiom is a phrase who's meaning is more than the sum of it's parts in America someone might say take a hike and that does not literally mean the sum of those words, do not take a hike, although you're more than welcome to. The whole phrase is more Akin to something like go away or get out than it is to literally to take a hike. And we have a lot of phrases in programming that summing their parents seem to mean one thing, but really it actually mean very different thing that you might not guess if you don't have all the context. Amelia like a new programmer is very eager to please so when she isn't sure what a phrase called a date cake is she does the best job that she can with the information that she has.  I guess she can't find the fruit dates, which are a bit like raisins, I think, and maybe she doesn't know what they are, instead she cuts of acal even dare and uses those dates and mixes them into the cake batter.  I assume the time of writing this book that would be an acceptable cake substitute, all the people are smiling while they're eating the cake.  I don't claim to be an expert on that, but it does seem like she does her best and she saves the day. Does this sound familiar to anyone?  I think so. Someone is using the language that they're new to, they don't understand all of the phrases that they hear, but some of them sound very familiar. Unfortunately those phrases have completely different meanings than the meanings that they know. Amelia is eager to do a good job and she is a hard worker and tries really really hard even though she doesn't understand all the phrases in the language she's using. That is why I think Amelia Bedelia is a great lens to look at the kind of mistakes that beginning programmers make. This is why I'm here, I know after lunch spot is not usually a popular one with speakers, but I am very glad that eurucamp has given me the after lunch spot.  I think the best way to talk to you about this, about learning Idioms and phrases and the kind of mistakes they cause for beginning programmers is to read you a book as you might at a library summer camp. If you don't mind I'm going to sit here and I'm going to read to you. (Applause) you haven't heard it yet, so it might not be ‑‑ you may want to take that back, I'll allow you, if you chose to. The name of the book is Amelia Bedelia learns to code write by strad strad, illustrated by San Smith, and inspired by the works of Peggy and Hermann parish. Amelid is speaking with her employer's the Roger's family, it's time for an annual review, Mr. Roger says, Amelia you've always done good work, once we've managed to get on the same page, we deaf lit appreciate your unique approach to problem solving, you're so litter Al, you drive me insane, it's like talking to a robot or a computer. Talking to a computer, now that sounds like fun. Hey, where are you going?  Group want know what your raise will be shouts Mr. Rogers?  Amelia doesn't hear him all she can think about is how much fun it will be to talk to computers. Amelia reads to talk to a computer you have to speak their language, but it looks like there's quite a few languages to talk to them. Amelia's new friends, some Rails Girls mention she might enjoy a language called Ruby, Amelia thinks that sounds nice enough, but why Ruby specifically?  Why Ruby?  Why not Ruby?  Shout two strange foxes who have mysteriously appeared. Ruby has elegant syntax it's natural to read and easy to write. If you like Ruby, you'll love Ruby on Rails. It's a web framework optimized for developer enjoyment. Rails letses you write beautiful code favoring convention over configuration.


Yeah, what he said. An easy way to talk to a computer designed with developer happiness in mind. If being a developer is what it takes to talk to computers, I certainly want to be happy while I do. Ruby it is, Amelia says to no one in particular as the same foxes disappear in the the same mysterious way they lived. I'm really glad Jason mentioned why ... earlier. These are Why's foxes from why's poignant guide to Ruby. If you like weird Ruby stuff, you should read. This Ruby on Rails stuff is easy, Amelia thinks. It's got HTML CSS I know how to use those. There's a data business, I work with databases before too. Amelia's working her way through a beginner Rails project when she realize she needs to add a table to her database, looks like her scheme is the central source for the database ‑‑ I forgot to mention this, sometimes when you do group readings, there's an audience participation part, and so there's an audience participation part coming up, I think it's not going to be a problem. So we'll just try it. So then maybe this would be good time for you to jump in. All of you. Yes. So what does Amelia do?! That's exactly it. The next one will go much smoother. She edit the Schema of course, she has another table in her database without involving the strange randomly numbered migrations. Oh, no, Amelia, I can't read this at all exclaims Amelia's computers. You can edit the database Schema to Mike changes but in Rails it's just a rep evennation of the data business state. The migration seem to be randomly numbered, but those numbers at the beginning of the file is the date time the migration was created. What a silly mistake, I won't do something like that again I'll remember to to write migration when I want to update the database and run them using brake so they'll update my Schema file. Amelia is cheerfully working on a brand new application totally independent of tutorials and guides, she's not exactly sure what all this application needs, but she knows she can cover most things using the Rails generelator to scaffold new models views and controllers quickly.


So what does Amelia do?


She uses the scaffold for everything, of course I'll just use the rail scaffold to create my new model that's just as easy as writing the files by hand myself, in fact it's' veneers now I have the controls and views pre‑made if I need them later, I can delete them then if I decide I won't need them.


Amelia, do we really need all of this ask Amelia's computer?  The rail scaffold is handy but you don't have to United States use it to create everything, you can generate a model view or controller, you can even create new files without using the generator and convention over configuration design make sure things match up as they should. But it's so mouchoirs this way. Says Amelia. Easier for you, maybe, replies Amelia's computer, I still have to load all of the assets created by the scaffold plus do we need all these JavaScript files.


I thought you just needed a mod.


You're right, we don't need all of this stuff, I didn't realize it added a lot of work for you, I'll be sure when I use the scaffold to only use the parts I really need.


And this is what happens when you use the scaffold she just needs from her blueprint a very small dog house, but she used the scaffold so he got had dog mansion instead. (Laughing)


Okay, so I don't need to use the Rails generator to make everything, I can just create the files myself. Amelia remembers what the foxes told her, that Rails is designed with convention over configuration.  I want to write the best code that I can I'll follow the fame work convention and write good code the Rails way.


So what does Amelia do?


In each of her new files (Laughing) in each of her new files she mimics the code and style generate by the scaffold, if this is how DHH would write Rails, this is how I'll do it too. If you don't know DHH the framework designer also races formula one cars, I have to assume that this is how he reviews pull requests to the Rails projects. Oh, no, Amelia, exclaims the computer. Convention over configuration doesn't mean you is to use Rails only within the frameworks convention it just means you don't have to configure the connections between models controllers and views. When you include all that code you doctor accidentally include different features leaving the two respond with block in the controller allow you to inadverted thanly expose aJson point gnar ‑‑ I don't want to expose any API in that application, just because I can do something with Rails doesn't mean I should.  I should only include them when I need them, not hold on to them for later.


You got it Amelia. Amelia's having a lot of fun at her first hack a ton, the team she's working with request a ton of features directed to all different routes, Amelia's teammates are excited to get new web views for their App.


So what does Amelia do?  Of


She activates each of the routes by raking them before committing and pushing the code with each new route she writes a new HTML file adds the route to router B file and rakes the route, rake is short hand for Ruby make.  I rake each new route so it's available in any web views, I'm not going to make the same mistakes with my migrations expecting them to be there any ways.


Oh, no, Amelia you adopt have to rake the routes to activate them for your application, rake just show you a preview of what it will look like in an URL. Why not, I have to rake the migrations it makes sense that I need to rake the routes too. Amelia's computer explains. It is a little confusing that rake creates database migrations but you don't need it to create routes, rake is just a tool that runs tasks, the routes are created when you add them to the route R V, there's no harm in raking the routes, but it's not needed either.


Oh, okay, I think I'm getting it a little bit now, rake is a tool, and it can run a lot of different tasks, unlike the Schema they're not generated, I write them myself so they exist as soon as I write them. You're really starting to get this stuff. Amelia's writing an application with her out of town friends, Fred and Kerry, Fred and Kerry have been developers for a while and always hip to the latest trends Andrew by gems, ‑‑ gems are great, they're just libraries of code. Why write it yourself when you can just put a gem on it. You can find a gem for anything, it's like you never have to write code yourself. Amelia thinks these gems are petty handy. It seems like I can just drop them wherever and have access to a ton of code written by another person. So what does Amelia do?


Amelia adds all of her favorite gems to each new project she starts I'll save myself some time and some code. Carry and Fred say, put a gem on it. (Laughing) you know what this App is missing, gems, let's spruce it up, make it pretty with a draper gem, what a sad little application, you know I'll put the Rails admin gem on it, did you see this App before?  I didn't. Not so fast says Amelia's computer. Gems can be very useful but they're not the answer to every problem. Every gem you add to the gem file might have dependencies on other gems and those might have dependencies on other gems and those might have more deopinion densies too. All those dependencies can cause complications and eventually page t harder to upgrade your project. Oh, no, I don't want that, I heard Rails 5 is coming out soon, I want to upgrade and use tour bow links cried Amelia.  I guess I should make sure the gems I'm including are the ones I'll really need. Amelia's working as an intern at a software development company. The client she works with business conversation Inc requests of that new programmers be added for customer addresses. Parameters, Amelia thinks, I know exactly what to do with par rams in a Rails App.


So what does Amelia do?


She does exactly what think ask for adds them to the Params hear hash. She'll be so excited. This is a bit culture but I already printed the book, hash is like a potato salad in America, she's adding them to this par rams hash which is potatoes kind that base columns. Ooops says Amelia's computer, a client can say parameters which seems like a general term, but that word has more meaning in a Rails project, what the client really needs is just a new table column to save records to. Well at least my workplace has code abuse so the mistake was caught and corrected before deployed. Hey, don't be so hard on yourself Amelia, this is a great opportunity for you to push back on the client request in the future that I know seem off to you and you're able to teach a semi technical client a little bit about Rails architecture in the process.


Yeah, I guess you're right .
nothing bad happened and I learned something.  I suppose I am getting the hang of this. Amelia is serving as a coach for the first time at a Rails workshop. She finally knows enough to feel comfortable coaching and helping others learn to code. She overhears a group talking about scheduling task for add on for a space project, they want to use a time field but everything falls apart when they try to schedule dates very, very far in the future. Amelia's worked with future dates before and made the same mistake before too. So what does Amelia do?


She heads right over and explains, hey, I've had that problem too, it's an easy mistake to makes if you use date time instead you won't have that problem that's why I always use date time when ever I need dates.  ‑‑ that's a very good joke, back to the beginning, if you're at the beginning, that one is funny.


That's not even the silliest mistake I've made yet, I'm still making mistakes every day, and this' okay because making mistakes mean that I'm learning, even if it feels like I'm learning things the hard way I learn how things work the way they do sometimes my mistakes help someone else learn too.
maybe they try to edit the data business Schema because they worked with access and I can help them learn by pointing out the analogous parts of active record in a Rails application.  I think though, that's what software development is about, making a lot of mistakes and learning from them. (Applause) so that's a pretty nice story, right, and we tide up all the looseneds and it's over and Amelia is now a professional developer. And I think it's really easy to frame our struggles this way as you worked really hard on something it was difficult, and now you're don working hard on it because you're there, you've got whatever it was you were striving for. And this' not realistic. And I think it's not great that we tell that kind of story to people who are brand new to programming, so it's not this, you know, ends with a ‑‑ and it's done, it's more like this, you never really stop making mistakes, and this is a cute fun talk, but I wrote it because I want everyone to talk about how you keep making mistakes, you never stop, I certainly haven't stopped making mistakes. Very recently ‑‑ not very recently, somewhat recently I made a pretty big mistake I thought ‑‑ I was working with a colleague at work we thought that we found a bug in the Ruby programming language and we thought that we smarter than core contributors of Ruby and found this amazing bug and we told everyone on our development team about the bug that we found and we were just very in the weeds writing a test and we were trying toes for equality on two separate instances of time.now and obviously this was returning false because they are instance seeuated at different times all we could see is time.now equal time.now it was returning false, it looks exactly the same. And, obviously when we told our teammates, yes, of course that's how that class works. And we made a huge mistake, and embarrassed ourselves in front of a lot of people thinking we had found this bug in Ruby. But that's the thing though no one gives a hard time about it, it's fine, these things happen. They happen to everyone, they happen to senior developers that you look up to too. What people don't think about is that beginners make a lot of mistakes and when you are a beginner it seems like you're the only one making all these mistakes, maybe in the book some mistakes I mentioned you did make.  I gathered all those mistakes from my own experiences and working with Rails Girls in Atlanta. And these are common mistakes for beginner, when you're more senior maybe you forget. And beginner developers, you know, when ever you have the beginner developers on your team you say havef you have any questions just ask me. And maybe you would say, oh, of you know, if they wanted to know if I made any mistakes they would of asked me about it. But we don't ‑‑ beginner developers don't ask advanced developers if they've made any mistakes, and I think that's okay that beginner developers don't ask. Because advance developers make a lot of mistakes to beginners they don't look like mistakes you're typing so fast that no one catches your mistake or they're just not thinking at the same level yet so they don't see the mistake. And that's okay too that advance developers make mistakes, and that's okay because making mistakes means that you're learning. And you're realizing like the things that you did before don't always work still. But what's really important ‑‑ ‑‑ what's really important is that we share our mistakes. beginning developers think they're the only one makes these mistakes but nor advance developers share with them and let them know, hey, you never really stop making mistakes, becoming a senior developer working in programming a long time suddenly seems a lot more attainable. Everyone talks about they want to have a great engineering culture thinned want their company to be awesome and you want to hire minorities and diverse candidates but I encourage you to put your money where your mouth is and talk about your mistakes because like truly, a great company culture like somewhere that people can learn is a place that's safe the make mistakes. So make it safe to make mistakes where you work and you're going to make the place where you work safe for people to learn. And that is the end of the talk. (Applause)


It's really done this time. Any questions like where to order the book (Laughing) anyone?  Where to order the book.


I'll be sued nowhere, just memorize it and write it down and then keep it ‑‑ it's an oral history, I'll be sued though, so there's nowhere to bite.


Anyone else?  All right. Then we're going to the next talk.


So eurucamp is a grumpy conference it's not Euro cam, that would be a conference about money, it's the European Ruby conference. But every year we try to have at least one often a couple technical talks that are not about Ruby, that would be boring if every tech talk was just about Ruby. And I think we should be humble in the Ruby community and admit that we actually have something to learn from other programming language communities. And in my mind, at least, when I think of Ruby, I think of a language that is very flexible, highly dynamic, it's not compiled, it's everything happens at Runtime. And it doesn't have a strong type system. You have open classes. And when I think of has kell, it's basically the opposite of that, it's on the other end of the programming spectrum, very strict language and you have to have everything just right in advance to get your program to type check and compile. And so I think we actually have a lot to learn from the has kell community and the Ruby community, they think of things very differently, do things very differently and game programming is something that's ‑‑ yeah, we don't do a lot of in the Ruby community we mostly do web programming, so that's another difference. So Elise will give a talk, she's originally from Belgium but she's a Berliner she'll talk about game programming in has kill. 4


Thanks to the organizers if the amazing conference.  I love that the Ruby community is so open minded that they'd invite someone to talk about game has kell. Well, let's decompos this into its component. So, a game, more precisely we're talking about a video game. A video game electronic game that uses human interaction to generate feedback and visual feedback on video devices like TV monitor or console screen or whatever. So that's what we're doing here. Has anyone here developed any kind of game before?  A fair show of hands there, that's nice. So let's talk about Haskell. So Haskell is a programming Los Angeles with following components ‑‑ following properties, it's purely functional so it's all functions. It's statically typed so unlike Ruby every value you see has a type. Every function has a function ‑‑ has a type signature. And thirdly, Haskell is lacy that means that expressions don't get evaluated necessarily right away, they get evaluated when the result is needed by the program. So basically it's very different from Ruby. Anyone here have done Haskell before. Oh, still a number there. That's cool. But for the other ones, don't worry, I have included a fair amount of code in my presentation, but I've made sure it's fairly readable and if you don't understand certain details, don't worry, if you bet the general idea, it's fine. So let's start. So we need a number of building blocks, obviously to build a game. To start with we need some sort of interaction with the operating system. We need to ask for windows, window or an application rather to work in certain context. And then we also need to listen for the keyboard event or mouse events or whatever events you want to listen to. And I used the library cold GLFW, which is actually C, but Haskell has nice bindings to it. You can more or less see here create a window, and work within that context, poll vents, and then you make some convenient functions to detect whether a certain key has been pressed. So that's one building block we need. The next one is, I guess a graphical tool, so when I started with my first game in Haskell, I actually, I guess, made, I wouldn't say the mistake, but I started working with open GL bindings directly and that was fairly hard. Fortunately someone recommended Gloss to me a nice open framework on top of GL, it actually pushes all the nasty sort of open GL ciderfect well down the pipeline and all you have to worry about is defining a nice data structure so first one ‑‑ well, you can see right Polygon with certain coordinates, I want to have it violet and put up left on the screen. Second one I want to circle ‑‑ I want a circumstance that will is blue and put it on the right for instance. And you run all that through display picture function and it will run as expected and you have a shape to work with. Then we need more than just well here's a nice drawing with a circle and a square. We need a loop to make things move forward. So we know that the human eye will perceive 24 frames per second as more or less flowing movement. Nowadays we work more with 60, 70, 90 which is more the refresh rate of your usual screen. So basically what of our loop needs do is present you with a different image every 20 milliseconds or something and then you have something that seems to advance, like a video. Of loop looks like the for the game. Poll input events, react to input, then change the state, and then render a frame from the state. And then if you don't exit you start again. Loop, loop, loop like that. Then, obviously, in that loop you saw state. You need to keep track of where you are in your game. Obviously to get a coherent flow of events. The simplest way ‑‑ sorry ‑‑ to codify that in Haskell you'll use the types, the types are actually surprisingly expressive of at showing the structure, for instance, different states, here you see a very simple state data structure which is the player with certain position. Then here's the loop I was talking about with a little bit more code, you create your window then you loop with an initial state your player in the middle for instance, and then the thread delay is to get only 60 frames per second because if you let it run away it will just run, run, run, and off load geographical pipeline and crash. So you let it pause a little bit between each frame. You poll the events, you check the arrow keys and pass that into a function here, which is a pure function which will just say, well, I have the arrows there and the player here, then I need to make it move forward a little bit or whatever is need. And then you render. Render frame, and then you start again here unlike if Ruby you can do reduce, in Haskell it's still Recursion optimize, so no problem. So this is the move layer function, you'll notice another property of Haskell which is to be able to pattern match. You pattern match on the arrow keys, if your arrow ‑‑ your left arrow is depressed then we will move the player left a bit. And so on and so forth. And if none of the keys are depressed then player obviously stays in place. And so that's enough to start. We have a little demo with just a plaque square. With the building blocks we have so far, that's what we can do, which is something so a twist on this is that the simple sort of state handles that we had before is okay when you have a very simple state like we have here, but when it becomes more complicated, it's actually nice to use a different paradigm, functional reactive programming which allows you to decompos your states in different way. So with functional reactive programming we're going to work with streams of events through time or streams of values through time. So that's, again our player. But of we'll call this a player signal rather. And so we have a relationship between the arrows, the arrow signal and the player signal. And if your key is not depressed then your player stays in place, for instance if you need to go left then there's a relationship between those ‑‑ and so you work with a network of all those signals interacting together. So this is our loop slightly reworked. We capture our key signal in a sink and then we'll work with this which is a direction key signal and our player becomes a transfer between the direction key, with the directory ‑‑ because we express, sorry the dependency between player signal and the direction key here and we feed it initial states and everything just unloops the from there. And then the ‑‑ at the end of the met work we do the same, render frame function, but we unpack the signal to the current natural value. It's like the box Txus was talking about. We get the value of the signal box to render. And then the loop is like this, we feed the direction key sink with the out put and then we delay a little bit again and then we continue like this. it's more or less the same but it allows you to express your states with different components like if we have a tiny bit more complex game we have player signal, a monster signal a gum over signal. Then the external inputs are arrows and random generator, for instance. And our player is dependent on the direction key and game over. Our monster is dependent on player, random number and game over. And the very nice thing here is that what we worry about, the only thing we have to worry about is the function here, the red function here, which are pure functions. And so you don't have to wore worry about what's going on elsewhere you just say well if I feed my player this input then I should get this out put, which is very easy to test, obviously, you just need to test whether there that's coherent and your whole game should work. And then you render frame with unboxing the player and the monster signal here. So what we did with ‑‑ before was draw a little square or circle and visually we want a spaceship or a landscape or something like that. Soft we want to work with images rather than geometry. And fortunately gloss helps us again, we can just load a bit map like this. And we call that a texture. And then we use a texture in our render frame function here. So for instance render player, we will just take that texture we loaded and move it to wherever we need it to be. And already or things are looking up a little bit and our game starts looking like something we'd recognize a little bit more. So the player ‑‑ the   night figure of my little game may or may not have been based on my daughter Alice on the left. We have this bet that we're going to insert a picture in every presentation. That was the picture. So if you see this ‑‑ unfortunately there's still something wrong with it the night is just basically shifting along and it's a little bit wooden, you need something else to have it a little bit more life like and that's where we need animations. So animations is a full time job. It's a specialty. It's not something you can just improvise, what I have been doing is traditional animation which is just simply using different pictures for every frame. But like if you're doing this professionally you're going to do interpolations you're going to do skeletal animation, you're going to do motion capture, you're going to use specialized software to generate all the frames, it's not something you can just do, especially when it becomes more complicated. So I've been drawing all my assets, as I said. To make the little guys walk a little bit better, I basically just made one foot lift the other foot lift and the arms move a little bit that already created slightly better illusion of movement. This means that suddenly you have a combination explosion of texture instead of one for every direction you have twelve just to make it walk and if you had cross bolts like I did a little bit later you have four times that it's a lot hof drawing. The thing is now your state change a little bit in effect Jo to not only keep track of the state of the game of where is your little man, but also which stage of the animation is it in. So in my very simple walking animation I defined a walk stage here which becomes part of the state, like this here. And then when I rendered a player, I have of four stages, so it cycles between those, it goes through that walking emotion every time. Then obviously we need some sounds, we need background music that will stick in our heads, we need little events to make it a little bit more attractive. And I used a library code ALUD which is binding to a C library. Which is ‑‑ which is doing it's job very well and not too hard to use. Our state changes again not only do we have graphical state we also have a sound state to manage and our render frame is now grouped within out put function ‑‑ out put function takes care of both frame and the sound. Obviously for sound you don't really need 60 triggers a second. What you do is you trigger a sound and you let it play out, so originally I thought I would need to start a thread, next to the main loop to sort of have the sounds play, it turns out this is actually taken care of for you, like the graphical pipeline there is a sound pipeline you just make sure your sounds are played at the right moment and not just once not sixty times a second and then things just play out. And here you load the sounds. So where do the sounds come from?  I downloaded them from a site called free sound, you can buy sample packs, or if you're a musicians you can make them yourself, which is even better. And the play sounds looks like this. It's also relatively expressive when you use a few functions like this function changes the background music when there's danger. At the end of game, which means when the monster eats the little dudes, then you have you have a shriek. So a demo sheer. Normally the sound is not working ‑‑ (Applause) so obviously that's not all you need, you also need a start screen, you need levels, and that's where it starts to get a little bit interesting with the functional reactive programming because you have signals all over. Actually have several levels going down, you have like, you keep the state of your game at the upper level ‑‑ sorry, the general state at the upper level. You in the start screen or are you in the game and are there high scores, for instance. And then the next level is we are in the game so I started a network, a sub network sort of which keeps track of the level number we are at. And that again starts a sub network with lots of signals for the monster, the player and everything. And everything the rend   state or the sound state just wounds back up to the upper network and here the rendering still happens. Don't worry I'm not going to show you that group, that will take more than one slide. So ‑‑ created this but ... I wasn't saying it was a great game. Also of one fortunate thing with gloss is that the fonts support ‑‑ basically you have no ‑‑ that's a poll request I'm working on personally.  I would like that to improve. So, okay, so what are the lessons I learned from the whole process of getting to this?  First let's talk about Haskell. It has lots of nice things going, the types allow you to really describe your state in a very nice readable way. Pattern matching is really great to describe transition from one stage to the other. The result is fast. It's compiled on to an executable that runs fast. Okay, the down sides well, first off the laciness is actually ‑‑ laze citiness is not suited for games, you want them executed right now so you need to take care in Haskell to force that, there are data structures allowing you to do that but you need to pay attention. Then it was insanely hard to get started because not many people have done this before and so I had to control the internet to find the tools that worked for me and that wasn't easy.  I still, I'm still working on the distribution aspect, I'm fairly sure that won't be too big a problem. I'm working on generating a mock up from the game and the next step will then be maybe a DBM package or a windows executable. That's still, there was a lot of stuff osolve. Basically. So I wrote a book about this documenting like I said, I feel like I had to really work through a lot of crap to get to this point. And so I'm hoping that people can push this further that basically with this people can sort of say, well that was very nice, now I want my animations to be like twelve times better than this, and I'm going to make work. So I'm hoping that having good explanations out there will sort of help that. Also one other reason I wrote this book I think it's a fun way to sort of get deeper into Haskell and to understand it better because most examples are not that much fun, to be honest. So having a game is I think, a nicer way to start so that's me. (Applause)


Thank you so much, questions for Elise?


Are these calls to the operating system non‑blocking how do you achieve these parallel computations this


I'm sorry.


How do you achieve parallel computations like sound and drawing at the same time?


It would be easy to do that, but I didn't really need to do that here because like I said open GL sort of takes things away under the hood and open ALUD also makes things open under the hood so you don't really need to worry about multithreading at this point.


More questions, we have a few minutes before the next break. This side of the room?  Any questions.


Hello, I didn't quite get whether you were learning Haskell at the same time programming this game or did you have Haskell experience before that?


I had been programming H Haskell for about a year and consulting professionally. Now I'm not an expert, so I still see the beginners point of view in this one.


Thank you. Nothing more.


Okay, thank you. (Applause) so we have a fifteen minute break now is this is the last break that will have coffee, our good friends from the barn will be packing up all of their equipment and leaving after this break, so if you want coffee, get it now. Please be back in fifteen minutes. 3:30. Thanks. Dajana, Leslie.


Welcome back, children tend to ask a lot of questions and sometimes those questions are very, very challenging, Ramon should know she's been teaching children to code for quite some time now. He lives in Vienna and organized ‑‑ he's been organizing Ruby habits which is a study group for Rubyist, obviously. Here to tell you more about how to learn kids how to program and what you learn from doing that, Ramon (Applause)



Ramon:


Thank you. Hi everyone, hope you're having a good time. I'm Giddy. I have I'm so giddy to tell you my little story. It's a topic that's really close to my heart and in order to do so, I'm going to tell you a tiny little bit about me, and in order to do so we're going to have go back in time, three years into the past. This is Ramon. Say to hello Ramon of the past.


Hello.


He's a little shy you'll have to forgive him. Despite being shy Ramon is very happy, he's been making Mac software for a couple years now, he's a freelance E. using Ruby in his tool chain having a wonderful time doing so. Over that time he started to develop an itch, he's been hearing about Ruby gems, and conferences and meet ups, he's been hearing about Rails Girls, and he's starting to get really excited about all this, he wants to contribute, he wants to help, but he doesn't feel he's good enough yet. So he thought he'd start small. He went to a local Mac developer meet up in his hometown of Vienna Austria. And he went in and as he within through the door and listened to a heated, almost violent argument aboutfect editors he quickly turned around and went back to his Hobbit Hole. His night was ruined. So he wasn't feeling very confident many his ability to be able to contribute. So he thought, how about instead if I ‑‑ how about before Iism prove the world of programming, how about I introduce other people to the world of programming. And so me and my girlfriend opened an after school activity in the vein that international school called computer game programming.  I think this is our fourth or fifth year ‑‑ right, three, I can't do math (Laughing) we've been doing it for a couple of years, it's been wonderful T VIS has been absolutely generous to lend us their kids to experiment on and the kids are wonderful. They're a diverse group of kids, last year, actually we had more girls than boys which was just delightful to see, the interest was just coming all over the place, I loved it. And my goal in computer game programming has always been to tell the kids, kids I want you to go home and feel like hackers. And I say, not that, I don't mean the businessmen in a see mask, I mean ‑‑ why is it always the businessman in Schemassing.  I mean the clever person who solves problems and feels good about it and learns and contributes. And so this watch school activetive was once a week and for most of the time we were using and are still using the ghoster gem in Ruby which is you probably heard about it last year at eurucamp and there's been as you saw in the last couple of talks lots of cool alternatives, but at the time I thought this was best (Gosu) when you start teaching kids you're often told you should do some research, you should talk to people who know about this.  I did none of that.  I went in head first and I faced a lot of challenges, but challenges I'm grateful I faced.  I think the two biggest, the first one of those is that it's an after school activity, it's you know, it's afternoon, it's late and the kids are often tired. I'm trying to compete with English and math and French and German and so much more, but, you know, there's still interested, just tired. The other thing is that since one hour every week. Sometimes some of the knowledge doesn't carry over from one week to the next. Now, you're thinking maybe give them homework. Are you kidding me if give them homework to a kids in an after school activity, they'd laugh in my face. (Laughing) the second challenge, which is a little more personal is that, you know, between semesters they get the option to stay with us or move on to another activity or just vague up quit. And when they did, no matter the reason it killed me on the inside. Like I thought that maybe I had failed them or my teaching method just weren't good enough. But you know, over the years I've come to terms with the fact that there's a number of factors that could affect their decision. Maybe you know, maybe nay want to do sports during the summer semester, maybe they want to ‑‑ a mine craft club just opened and they want go play mine craft all afternoon, fair enough, it's a fun game. But I've also come to terms with the fact that maybe not now, maybe I've planted a seed that will blossom into an interest in programming that they can use in their career, turn it into a career. Or just use it at work and become the heros of the office. You never know. Let's look at some of the things I've learned when I've been teaching kids. The first being the most important, because if there's one group of people out there that's not afraid to just brake things, it's kids. And in our first example we've been going over, we've been making a space adventure where you have your little spaceship at the bottom and the asteroids are coming down and you have to dodge them left and right, when the kids got the ability to set the speed at which the asteroids would move it was blinding, and then they wonder why isn't this working. And I told them, well, you set the speed too high. Or another time we had a little game where you could place ‑‑ where we had learned to place the monitors on the screen they asked me Ramn what's a good amount for a fun game, I think four or five is good, I figured they would go nuts and put ten. No. It's closer to 50,000. You'd be surprised how much you can hit number 9 (Laughing) or when making ‑‑ we were making a jump and run game, a little platform. They'd ask me what's a good strength, well, you get the idea. And at the beginning this would annoy me, I was like come on, let's make something fun, I was not only teaching coding but game design, why not make a game that's fun to play as well as opposed to just chaos. But I gave it some thought and I came to terms with the fact that maybe not for the player, but they're having a blast. You know, they're going over and showing the kids, the other kids are saying check out what I did, look at this, this is a mess. (Laughing) not only that, but when they'd ask me, Ramon why doesn't this work I could turn it around and say well, why doesn't it work, what do you think if and they'd answer, quite on point, and they learned, they learned that I can't put this 50,000 enemies on the screen. As a developer it reminded me that I got to go out there and more fun, I have to play with my things in order to understand what I'm doing I really should be a little more playful. And I also have to take more things ‑‑ I have to also appreciate that which I have, because often when I'm developing I don't know about you I often find myself just in a hurry to get stuff done, right. And so I don't take a step back. And often things that I take for granted you know when teaching someone, you forget to mention those things I'll show you an example.  I showed this code to the kids and I say, all right, everybody, what's this going to do?  And they all correctly quip back, prints out Ana. Fantastic. Turn around. What does this code do and they tell me prints out Ana ‑‑ we know it's a name error. So what did I do wrong?  I didn't mention to them that code goes from one line to the next and I was really baffled by this, I thought, and explained to them when you read book you go from start to finish, one line to next your story has a beginner againing middle and end. One of the kids interrupts have you ever read a chose your own adventure book?  You jump between pages, have you ever read a complicated story before, Ramon?  (Laughing) yeah, they were right. Now we were ‑‑ we were making lots of text adventures toward the beginning 206 year that might sound boring but kids love it. They get to write their own silly fun story, it's just I really recommend it. But then comes a big day and I tell them, all right, gang, let's make some graphics happen. And I explain to them how coordinates work, I tell them your X is your position along the horizontal line of the screen and the Y is the vertical position on the screen when both are zero you're at the top left of your window. And a kid interrupts me, hold up why isn't the bottom left like in graph, why are you programmers do this in a complicated way?  I never thought of that.  I went and looked it up, I found out something I found interetc.king, old CRT monitors used to print outline by line from left to right, top to bottom, line, line, line, that's pretty cool, I understand a little bit more now about what I'm doing. Let's talk about practicing. I'm getting to grips with the idea of practicing as a developer. Toward the beginning of teaching kids I tell them, all right, new concept, an array, a list, you can control several enemies on the screen at once. This is how it works here's how you make a new one, here's how you delete one, here's how you have them interact and reiterate over list. Go use it have fun, wow me.  I don't understand, what do you mean?  We took a step back and we started making tiny exercises. Here's ‑‑ why don't you try doing this with an array. Have one with fifty enemies take one away put one in iterate over them, kill every single one of them.  I used to open every session with this, they didn't like that at first. They're like come on, I want to did shiny graphics download them off Google, it's going to be fun, but as we kept doing this it became a contest, they wanted to beat the teacher, I know I know I know. And it just became a challenge that actually became their favorite part because then they really understood it. And it reminded me of how, when I stink at something I just got to keep doing a little bit every day and then I'll get good at it.  I still can't draw though.


Yes you can! Let's talk about simplicity. Now when we were doing our graphic space games I tell them, all right, everyone, this is how you make your character move five picks els to the right per update. You take your X coordinant of your character and increase it by five. It kind of looks like math. It's simple. And ‑‑ all right, now I'm going to knock their socks off, bam, does that look cool or what I ask them?  Kids say, hold up, I like the top one. And I figured that's a fluke, what does the rest think?  They agreed. Oh ... what?  But it's so nice that other way. It turns out that when you have something that, you know, this is ‑‑ I like this line of code, this is a line of code to make the character either move five mix els to the left or stick it to the left side of the screen. But sometimes verbosity can be really good. Maybe it's a little more pen Dan tick but when you show your cold to people that haven't worked with language before or haven't worked a lot with code before it kind of works better in some context.  I think this is something I need to remember, and you might need to too. Finally, let's talk about showing and reading code. Now, let's goat the mind set, one hour a week, the clock is ticking and problems are coming up, Typos everywhere Ramon I don't know how to do this, how do I fix this, they're getting freaked out, come on fix it. Surely you remember how an array works right.  I don't know, so I get really freaked out, I'll do it this one time. So what happened?  A bad dynamic was created and every time one of them would have a problem they'd just go it's broken. Come fix it. And the moment that happened my heart sank, I thought oh, no, I'm creating Lazy people (Laughing) so I thought of something really fun, I thought, okay, in's an issue, like here, you might see an issue here, the code doesn't work.  I thought call over one of your buddies, see what happens. And the buddy having not looked at that code a lot found it instantly, missing end. Next thing I know pair programming happened. (Laughing) I'd never done pair programming before and the kids are using it before I was. Wow! (Applause) of as a result not only was I now reading lots of different code because different people come up with ideas differently for solving problems right. Not only am I now reading lots of code, I've witnessed firsthand the benefit of pair programming. That's pretty awesome. And this, amongst other lessons I've learned the underlying aspect that bubbled out of me was confidence. So three years on what happened?  Well, I picked up my bag, I kicked back the tears and I went to my first Vienna RB session, developer group session. Next thing I know I'm coaching at a Rails Girl workshop, if you told me that two ‑‑ sorry that if you told me three years ago I wouldn't have believed you. Next thing I know I'm going to conferences I went to eurucamp last year, it was a delight, now I'm speaking here, what?! (Applause) thank you, and I'm centing to Open Source. This is team Tesi from the Rails Girls Summer of Code, we're having a blast together what I want to give back is to just maybe if you haven't yet give teaching a try. It's amazing. And it doesn't just have to be kids, try Rails Girls workshops, they're a ton of fun and I'm sure a lot of other institutions that do stuff like this that I really recommend checking out. So ... I think I've overstepped my time, yeah, so I'm just going to thank my wonderful girlfriend Birgit and my sister Pilar from team Tesi for making the wonderful illustrations that you just saw.  I want to thank everyone here for being so lovely and giving me the time ( applause)


Oooohhh I understand. . Good. Thank you.  I should of expected that. Okay. Incrediblien spur rational talk. Any quick questions for Ramon?


Hi, I'd like to start a coding group for kids at my place, do you have some resources that you can help me get started.


Yeah, there's a ton. Definitely check out the Gosu GitHub page their documentation is pretty top notch. There's I think Hakety Hack has a lot of good tutorials. The name escapes me Ruby ‑‑ kids Ruby is a great utility and resource. Repository. And I'm sure there's tons that I am just panicking and not remembering.


That's the one where they have small bits everywhere in the world. Yeah, that's pretty great. Great, okay. Another round of applause for Ramon. (Applause)


There are some very that is if I biases around science, it's supposedly very boring and difficult, we hear this when we're young. And we think this is true as adults, but hopefully today Analee will change the way we think about science forever.


We're putting up a disclaimer page first. Who loves science?  Who's ready to be converted to a science lover.


Me ...


Yeah ...


For some reason it's not working.


Science, yeah (laughing) we're still good on time.


We have an announcement. Anybody have boarding passes, if you're flying home and you need them printed, we have a printer here, so you can actually. We actually need to find a cable, so if we find the cable (Laughing) it's a conditional statement. If we find a cable, you can e‑mail your boarding pass to Info@eurucamp.org and we will do our best to print them. You can ask if it actually works at the registration desk where you signed up.


I'm not sure, I'll find that out.


Hi, everyone. Sorry. (Applause) sorry for the inconvenience, science problems. So okay nice blank screen, very interesting. Does anyone know what's going on?  The of


I don't know. Okay. Cool, so the first thing I would like to tell you it's about this interesting equations on the screen. So we'd say that the first is Faraday ocean law of induction and so on and so on. By that time some years ago I was in a electromag anytism class and the professor came in good afternoon and started showing these equations as they were natural for us. For me it was weird. So what's this triangle and what's the sign?  So how many of you have this weird experience of learning things like this without context?  I mean how many of you had ‑‑ at least one experience like this and it was totally frustrating.  I see many people here who had frustrating learning experiences, I don't know if it was intentional but ‑‑ I'm talking about teaching adults, which can be frustrating too. And this can cause different reactions, you can't sleep. You of can feel totally lost like this panda. Or you can feel like I'm in the right place ‑‑ maybe some people can understand at first glance, but it's not everyone. So I came to talk about what I do, I'm a developer, I like all of this extra things in my free times, organize meet ups, ‑‑ any we this is a quick disclaimer, I know that we are from different place of the world so for some of you education might have been different.  I know that ‑‑ I know some people in Norway and Ireland that had a totally different background from my, but I have some friends in United States and Europe we had a similar background when we talk about learning and learning especially science, math physics and so on. So if you don't share this experience, just be aware I'm talking some examples that I have lived and some friends ‑‑ they have lived similar experience. So why are you talking about math and physics.  I mean I don't know about your graduation course but I study engineering and I had all this subjects related to math and physics, did you have similar subjects at least one or two. So some of you had similar subjects and my learning experience for them was a bit frustrating.  I mean, yes, they were okay, I had nice professors, but they rarely contextualize me about what I was doing or why I was learning that. And that became a really sad and scary and any way ‑‑ so every time I was in acaulous lesson, usually ‑‑ in acal cue louse lesson most professors came and said good morning, good afternoon (Calculus) I also ask them why, why are you teaching me this?  Why do I need the know this?  Shouldn't I be writing code?  Or why do I need to solve this equation or where am I going to use this. Have you ever made this question to yourself when you learn something. Even for a framework sometimes you ask yourself why am I learning this or why am I learning this this way. Any way of I usually had bad experience, I was almost expelled from some classes by asking this. But still I think they're very useful. So most of my professors and friends their rayly provide me a context of ‑‑ rarely provide me a context of what was going on, why I was learning that. So this may ‑‑ I mean, I was really frustrated by that time. And sometimes this lack of context confuse us. Think about yourselves, how many times do you try to learn something and you got totally confused?  I mean this happens, we are human beings, especially if you don't have a context sometimes someone starts a conversation and you don't have context and you get into the middle of the conversation and you understand totally wrong. This happens, this happens with math and physics too. So it could also dedemowty vase us.  ‑‑ demotivate us. Sometimes I search for the mathematics and most of them are like I hate math and there's a giant list of homework and someone posting photos of the list saying hates math or same for physics, I mean it's scary. Statistically the number of hate associated with math is higher than love associated with math. Why?  Such a beautiful work. And then something more started happening.  I mean this was feedback for me.  I started doing some courses and we needed to provide feedback for each other and then I thought ‑‑ I was becoming a many sheen, started you putting numbers and forms and proofs. My colleague who gave me feedback, we were going to the same course. He said ‑‑ he gave me feedback after analyzing my document. Please be more human, I can't understand you.  I didn't provide him any context and and I started putting numbers and proofs and weird structures and he got scared. And it was when I started thinking, I should be changed, because I am frustrated and I'm doing nothing to change this reality so I need to do something. And then I started to think about some techniques to humanize the teaching of math and physics, I was able to put some of them in practice during our undergraduate course and after my graduate course so the technique number one that I would like to show you, I don't know if everyone can make something but then at least we can try. The first technique that I saw that is really useful is to tell the story behind what you're trying to teach. After all we are all humans behind science.  I mean the guy who created a math equation for something he's also a human being. Like you, like me. So I started telling to the professors like hey, could you please tell this story of this equation?  And some of them were like sure. So, let's start the class in 16th century this guy wrote this equation. No, not this kind of history.  I mean life story, not history. And I was surprised that most of them didn't know or most of them why do you want to know this?  I want to know this because I want to suns how this person achieved this result. There must be some reason for this person to have studied this topic. So telling the story of the human being, not the world history behind it.  I figured out it was very important. So I have some examples that I'd like to share, but as we are all human beings, I started studying the history of some science and the history of some topics and I could figure out we have very interesting stories. We have family drama behind it. We have tragal death of really any mathematicians for example. We have amazing random facts of someone was studying a subject in mathematics and then he discovered very interesting subject in biology this is very interesting, you know. Because this becomes a bridge between the topics. So let's try an example, what comes to your mind when I say the name Kepler?  Kepler's laws. How many?  Three, good. Good. But personally who is this person?  Who is the Kepler guy?  I mean he didn't take laws out of his pockets, I have three laws let's share. No, that's awkward, I don't want to think about this. So when I think about Kepler he has a very interesting life story. You should read this person was chased by Catholic church.  I mean during his entire life because I don't know ‑‑ do you know Kepler's history?  I see a few hands here. So, during the time that he was doing his research about his Kepler east laws the Catholic church wanted you to believe that the earth was the center of the universe. Which we know it's something like weird. But by that time they wanted to force everyone to believe this and one parenter important figure that's starting ‑‑ one important figure started to say hey, the sun is in the center. Was a person called Capernicus and he was following Capernicus' idea, that's why he was chased by the church his entire life. Another random fact but interesting, do you like star wars?  Star wars is classical science fiction movie, probably Kepler is the first person in the literature story to write a science fiction book. That's ‑‑ did you know this?  He wrote a book about an expedition to the moon. And I'm talking about 17th century. Which is super cool.  I mean ‑‑ we can tell that he has a strong relationship with the creation of science fiction and nobody tells us that. Why?  This is very, very interesting. So Kepler he came from a very poor family. He had a horrible childhood and luckily he had a very rich friend Tycho and this guy provide him instruments to make his research, but this guy passed away and Kepler was alone again. So he had a very lonely life and he was being chased by Catholic church the entire time, even though he was able to make his research and prove with mathematics and physics that the orbit made by the planets were Eliped that was incredible because that the time people were also forced to believe only in a K ‑‑ book so Kepler spent a lot of time trying to prove that the orbits were a circle, then he ended up giving up after ten years of study, and after ten years he had that imaginecal moment of Ah‑ha it's not a circle. So it's something that is not into an eclipse book. So he had a very interest life story of the this could be a bridge to teach about renaissance period. We could connect better to subjects that we study. We also could teach p facts about inquisitions about chase chase and other important persons that suffer during this period so we could connect the facts with a lot of stuff. And we can connect math with literature, which is beautiful. Because sometimes when I studied I saw things very unconnected. And we can start building bridges to this. Another example of ofEuler, what do you think when I say Eule? Russia.


Yeah, we can actually think a lot of things because Euler was a person in many, many, many areas. He has a very sad story too, he became blind ‑‑ he was totally blind and still able to do math. He is an example of someone who had incredible memory. He could memorize like of the multiplication table for more than 600 numbers, which is weird. Any way and when we talk about Euler we have a very interesting example of a person who wasn't happy with just one area he made studies into biology, medicine, physics into geology, so it is amazing.  I mean when Euler died the publishers still had material for the subsequent 50 years after 50 years this guy passed away there was new content being published. And the publishers were releasing anythings every fifteen days, so you can imagine how how many different things he wrote about. It's ‑‑ he was blind so imagine he was blind and he solved equations about the moon orbit and he was like blind. So you can start motivating people that physical Disabilities shouldn't stop you to do amazing things. This also can teach us about medical issues. If you're studying medicine or biology in the school we could connect math and medicine again. And this can also be used for children as an example to ‑‑ you know, provied ‑‑ stop bullying sometimes we see people that are different.  I have colleagues who have visual Disabilities and we can, like, show the children like, hey, we have amazing people and they were blind. So start from the beginning.  I mean Euler story is a story for a movie. But also talking about movies, a second technique would be producing more movies about science. But not about, like the of ‑‑ a drama based on a figure but a movie where you can show the amazing things done by science. So one movie that I really think we could make is a movie about this guy Evariste Galois V you heard about him?  I see a few raised hands, his life story is amazing. Leadership died by the age of 20, by the way. We could still make a movie. He was very involved with French history. He was really good with math and he was also tightly involved with politics. And he was famous not only for math but for being involved in how do you say rebel yens. He was arrested several sometimes, he was being chased by the government and he was there still doing math during his free time .
that's amazetion. Imagine how many things you can teach related to history and also related math. And he have showed us a lot of interesting things about math . Everything that he created of locally was ignored. He submitted his papers to the universities and they were like, Ah, he's just a revolutionary he can't do math. So again the stereotypes, just after I think 20 years after he passed away his work started to be recognized as very original. Any way we have very interesting things related to Galois. And if you don't know about what he has done for math he's the creator of group theory which is the basis for modern algebra. Just that. Just ‑‑ you know it is so amazing and almost nobody talks about his work. If you go for group theory you're going to see amazing applications. So it is important to remember that behind science there are human beings. We must start thinking about this. This movie technique worked for Alan Turing
is the movie imitation game, which went very well. There was ‑‑ it was selected for the Oscars, so movies can change the way our culture sees science. Offed the final part that I would like to present is how to connect math and physics to compare science subjects. So the first experiment that I've done and working well is to teach new percal methods into algorithm analysis (Numerical methods) they are very connected. And so what is a new percal method in mathematics?  You want to solve the equation by the traditional way. You're going to do some different arrangements, some discreet arrangements.  I's just algorithmic ‑‑ we joined two subjects, which was the mu percal methods class ‑‑ new percal method class and algorithm class, we got great results. Locally we had very open minded professors who accepted to work together and we made this run pretty well. Of course don't forget to tell the story behind the new percal method analysis ‑‑ numerical method analysis. And the story behind the algorithm. It's important. The second thing that ran pretty well we started to teach statistics with UI/UX, so we usually have A B test, which is a good case to study statistics, can you see that how these two topics are very connected?  You need analyze data when you are studying. Hey, is my UX good?  Do I need change anything?  You need analyze the statistics when you're trying to improve this matrix. It's a good case to teach statistical instruments. So we also had an experiment where we could join part of this subject, it also ran very well. And we saw that these students were also happy to be able to apply a theory concept into something related to compare science. Of course, we are ‑‑ we are humans, we are sometimes we make mistakes as many of you said in the previous talks. But it is important to try, I mean, if you are unhappy with something, we need to try to change it. Soft the results that we saw is the students were much more happy.  I have never been a professor at a university.  I made this all by being an observer and trying to help the professors to organize their content. But what I saw if my colleagues that they were really, really satisfied with the results. And which was good for the subjects, which was pretty sad because when they were attending their regular calculus classes which had no connection with anything he started to perform very bad, I mean very, very bad. That was the bad experience that they had. It shows that we should connect the subjects more. If it makes people happy, why not connect them more. So my blast quotes about this is like I've seen that in software engineering we try to connect the areas, so we are trying to bring the ‑‑ people with the software engineering people with the UI/UX people and make them work together because we know that if we bring different people to different areas to make a team we get amazing results. Why can't we make this for traditional university training?  We should be doing this. And my personal feeling about this, after some time, you know, trying to connect the areas is that we are not fully ready yet. We should keep fighting.  I mean sometimes I feelizelated from the math department. Sometimes I feel they don't want contact with me. The same for physics and we should all be working together because the limits, the boundaries of research of computer science, which is quantum computing, quantum physics they're all together. If you start studying quantum computing it does a lot of math, a lot but it has a lot of algorithms so we need to work together. Offed to end up the session a friend of mine he sent me this. I'm not using algebra today ... so that was not cool and I told her, hey, you're using your phone and be sure that behind your phone there is a lot of math and this works beautiful, there is beauty behind it. So don't spend your time blaming your colleagues or your professors or maybe your family, we won't solve anything by blaming people we need to make our own contributions.  I mean after doing this work with some open minded professors, I mean I try to do my best there. But I started writing what I knew about math history in a personal Blog. It's free. And then I wrote tips on how to humanize each section of the things that I studied the history, so it might be useful for someone. It's a small contribution it's better than spending my time and blaming oh that professor is boring stuff like that. We are all human so the same way I make mistakes they also make mistakes, and if they had a bad instructor for education the chances of they provide you ‑‑ the expectations for education are lower, so we need to do our jobs, we need to tell them, we are not satisfied, let me help you to change this.  I really believe that if we are working and putting our efforts to make software development community work together why not put science as a big picture to work together.  I mean I really ‑‑ like attending programming conferences, I miss seeing people from programming and math at these conferences, I would like to ask you to make some contribution, invite your friends who are sometimes not directly connected with program development should attend a conference because sometimes we have ideas that they don't have. And they can help us to solve the problems that we have and vice versa, we can help them. We should start working with science people in general. So thank you very much (Applause) I would also like to thank my mentor Maccos, helped me a lot.  ‑‑ Marcos ‑‑


We we have time for a question. We need to share the microphone ‑‑ who has a question?  We also have time for zero question. One short announcement before the break, if you lost your glasses and they look like this, I have them. If you can't see what they look like (Laughing) please come find me, I'll be here at the front. Thanks. Okay, fifteen minute break, be back at a quarter to five. (Applause)


...


...


...


...


Okay, welcome back from the last break Shhhhh. Welcome back from the last break, everybody, we have two more talks. Before the closing remarks. And just a few quick announcements before we go, these glasses, if you can't see them, they are purpose purple glasses, if you can't see them, they might be yours. Actually more items have been lost. This green scarf. Does this belong to anybody, anybody recognize a green scarf?  Okay. Oh, there it is, okay. Found, lost and found. Okay, glasses are still missing. Okay, that's one point of business, the printer, if anyone needs their boarding passes printed, the cable that's missing is actually a power cable, and it's the power cable that's powering this projector. You can e‑mail your tickets, you have to wait a little while after the last talk, but we'll unplug this projector, plug it into the printer and then you can have tickets printed, if you a boarding pass for a plane or train ride back to your home, we're happy to provide that service. Just want to take this opportunity to do a bit of a reminder about the code of conduct, it's printed here.  I say we've been doing a pretty good job over all with the code of conduct. Floor, pretty good so far.


Not too bad. But, just a quick reminder about ableism, I think this is one of the Isms that we don't talk about too much. I'm going to talk a moment to talk about it. What is ableism?  When you call someone, put someone down because of their ability if you call someone stupid, dumb or idiot you're being ableist that is not a nice thing to do, we should not do that, we should not do that in talks or conversation, if we all avoid that type of language then we can be slightly better more educated more 'em pathetic people. So, let's make an effort to do that for the rest of the conference, just a little reminder to all of us. And, a bit of education about ableism brought to you by eurucamp (Applause) great. And I think that's all the business we have, Floor will introduce the next speaker.


So Boris is active in iOS Open Source initiatives, today he DELETE 'll talk about fiddle, which is a lesser known feature, but apparently already available since MRI 1.9. So there we go, Boris.


Boris Bugling:  Yeah, hi before I start with the talk let's just give a quick applause for the really good speaker selection at this conference. (Applause) in fact I was just tweeting earlier that I feel a little bit bad about giving just an old boring technical talk. But, a friend said yeah, you've been picked for diversity (Laughing) I like that so you have to listen one talk boring white male talk today. Any way so calling native code from Ruby, why would you even want to do that?  So if you want to use some native library or system functionality you might have to call into C code. But we don't really want to use a C extension for this because nobody's got time to deal with user Compiler problems. So one thing we have as part of the cocoa pods project is a Xcod project, which deals with X code which is I D for developing I R S and Mac apps and we need to deal with this to integrate dependencies which is what cocoa pods does, it used to include a C extension for quite some time .
and there were sooooo many issues with that. For example, in some versions of OS 10 building C extension was completely broken and added weird Compiler arguments. There's the problem of it is not very transparent if a C extension fails to build. You sometimes just C failed to build gem extension you have to look at some log file and many users are not really familiar with especially for our users there are sometimes not familiar with Ruby and even less with C extension so it's even hard for them to know what happens. And you can also have things like this ... so ... you don't really what happens. And it's not only us that have problems with C extensions if you look at a really problem lar gem Nokogiri you see there's over two hundred issues. It's C extension and it's not because they are doing a slop I pi job it's just that it's real ‑‑ Sloy job it's just hard to get stuff to compile on rand come user computers. But there's a solution fiddle. It exists in Ruby since 1.9 X but really you want 2‑pointx bus there ease some Nigglie details that don't work well on 1.9 X it was a problem for us in the beginning because OSX shipped with OS 87 for a long time, but now we don't have that problem anymore. And it's a FFI for calling C if Ruby. It use Dlopen and Dlsym dealing with dynamic shared libraries. And it can also be used to call objective C, which I'll be showing later. This is how it looks like in the very simple way so you require the fiddle gem and you can Dlopen a shared library which is installed on the system or user installed some other way. You have a function object, when you Abs eniate it you give it the function you want to have exposed you give it the parameter types which is an array of constants, basically, I well show them on the next slide. And the return time. And what you get back is a function object and that you can simply call. You give it the parameters the function needs and you get a result. So fiddle has a couple of constants for the different types in C Int, Char, floating types also for pointers which is the type V O I D P and it's also possible if you want to use something from the standard C library which is an exposed via the Ruby standard library. You can also just create basically an empty handle with fiddle handle.new and you can reference your own binary, which includes of course the C library. And let's look a bit at how we actually used it inside the Xcodeproj gem. The first part ‑‑ so basically we had two steps in our process of integrating I the first thing we wanted to ‑‑ the first thing we wanted to do was use core foundation which on Mac OSX it's the lowest level of functionality that is Mac OS specific, you could say under that is a C library which is easily like a Posx thing so it's portable, the core foundation provides Mac specific stuff. Among them reading and writing P lists that is what we need so property lists. They're used for many tools that Apple writes, among them Xcode, so we needed to call into core foundation to deal with Plists. And as you saw earlier you need like four lines of code or so to call one function and also you have this function object which is a little bit different from a regular function so what we wanted to do is to have a way to expose all the functions we needed as Ruby functions without writing too much code. So for that we created this little function here and the first thing we do is ... so we have a Cache of functions which includes the symbol name. And that allows us to basically save the function object so not every time we call a function we have to create all the things. And then the next thing, which is down here we define actually dynamically a method, which creates this function object with the symbol we need with the par respecter type and return type as we saw earlier ‑‑ parameter type ‑‑ we also save that function, which is basically our cache. And then finally, we have recall net function and return this so this is our dynamic function, basically this part is the dynamic function we create and returns, of course, the result of the function call. And we have one final nitty‑gritty detail of our core foundation, which is you have to do manual memory management. And there is though a way to do kind of automatic management which is called auto release and the convention is if a function is called create something, so that's why we have up here we look for the create in the name of the function. If it's in the function we have to call this auto release that allows us ‑‑ if we create an object it gets released automatically. So using that function we created ‑‑ so what we needed was also the path to the library. That's up here. Here we do the Dlopen of it. And then we basically have another convenient function which just takes this and calls the extra image function we just saw. And what that allows us to do we can just very simply call ‑‑ create these functions with just one call for this external method the name of the function, the parameter type and return type and then we can just call this here as a nor mall ‑‑ like a nor Al Ruby function so we don't have to care anymore if it is a function that comes from C or not. And that allows us to really keep the usage of fiddle contain in the one module and the rest of the code base doesn't care. And with that we can, for example, do this, which is converting a string a CF string to Ruby string, that's something you have to do a lot when you call into C libraries you is to convert Ruby types to the C types because for example a Ruby array is in the a C array a Ruby string is not the CF string, so you really have to actually deal with these details of what ‑‑ how to convert types. And especially for us it was especially true because we needed to deal with this core foundation library. So the details of the function don't matter that much it just shows that we can just call things like the CF data .  ‑‑ get ‑‑ pointer like a regular Ruby function, we don't have to care anymore that it's a C function, actually. So the next step we need to take or we wanted to take so it used to be that we just wrote this Plist using core foundation unfortunately this is not actually a hundred percent the format that Xcode writes so our next step was call into functionality like private functionality of X code to write t as exactly as we wanted. And for this we actually had to call Objective‑C. And we can also do this with fiddle because objective C is still having C calling conventions and that means it is in the end calling C functions. And most importantly there's one C function, which is called objective C message sent which basically happens every time you make a method call in objective C. So we, again, wanted to wrap this a bit so we created this objective C message   function which takes arguments and return type and basically the only difference between the calling just a regular function and a method an objective C method itself needs two additional parameters, two pointers, the first pointer is the object. And the second pointer is called a selector, which is more or less just the name of the method we want to call. So by creating this objective C message in function we could create Ruby classes which are wrappers around on objective C class. They take in their initializer they get object, which you obtain from somewhere else and then we can call methods on them. For example we have this Plist description ‑‑ "U" opinion method rather, we have the selector, which as you see is basically just string. We can call function called response to selector which tells us if this selector is implemented on the object, it's just a safety measure to make sure so we can ‑‑ into the initializer we can pass anything so we can make sure that it actual implements this method otherwise we get Runtime cache crashes which is the property calling into C we can get crashes. Then we call this objective C message sent which gives us back a function object and then we can just regularly call by giving it the object and via this we get from the string the selector object which is just another kind of string. And this allowed us to call objective C from Ruby. With out having a C extension, which was our goal. And to recap so C extensions have a real bad UX as you saw many projects struggle with it. We struggled with it even though we only support one platform. So cocoa pods only runs on OSX so it was even more it was eveners for us, it's much more difficult if you actually have a project that runs on multiple platforms and fiddle provides a way to use native code dynamically which eliminates the compilation hassle. It's not that difficult, if you have ‑‑ wanted to write C instead, it's not that much different. And we can even call Objective‑C if we want. Thanks. (Applause)


Thank you, questions?  We do have time.


Why do you think it's used so little or why is it so unknown?  The Fiddle?


Sorry, I department get it ‑‑ well, the thing is as you saw if you don't, it creates some boilerplate ... but ... really I don't know, I guess it's use sod little because people don't know about it so much. We sure didn't know about it before we used it. And, yeah, that's part of the reason why Ig this talk so people know about it, and I think the other problem is sometimes C extensions are used for performance reasons so you implement something in C so it's faster and with that fiddle can't help. The goal of the use of fiddle is if you need the call an existing library because if you just implement your stuff in Ruby it's probably even more slower because as you saw you to do this type conversions even more than when you would just write a C extension and then you have just a type conversion once with using fiddle it can happen even more. So for ‑‑ if you have C extension for performance reasons it's in the a good idea to use Fiddle then you still need the C extension.


Another question?  No more?  Then one more round of applause (Applause)


Next we have a dynamic due owe. We talk a lot about pair programming, this will be a pair speaking it's on a topic on cull straiting empathy, a ‑‑ cultivating empathy. And Dajanna one of the original organizers of eurucamp as well ((Applause))


I told you we could just stand up here and you could just say squid over and over and they would still love you. It's true. Good afternoon in thank you for being with us today. Before Diane and I get started we want to thank the amazing grouch that brought this year's eurucamp together and brought us all here together this weekend ‑‑ we really appreciate everything you've done this has been a fee nominal event. Thank you. (Applause)


So tonight we want to talk to you about cultivating empathy about building bridges like the bridge you can see over here because as Leslie as well as me though separately but we had the same experience ‑‑ experiences unfortunately in companies and communities where empathy was not a high priority. And that usually leads to miss communication, holding grudges, and in the worst place even to contributors burning out and just leaving the whole project.


So we're hope that our remarks here today serve as useful tools for everyone in the audience to understand the value of empathy, to cultivate it within themselves and organizations with the final goal to being making our projects, companies and ourselves better and stronger.


Yes. That's us. ‑‑


Oh, it's ‑‑ oh, no let's reopen it. No worries, we can deal with that.


I can sing.


Dance your flame please.


Of the gray fortress waterfall. (Laughing) we're on again Who! Of (Applause).  I love her exactly for that. So this wonderful human being is Leslie Hawthorn you saw her yesterday in another talk. She has been doing Open Source ‑‑ working in the Open Source community for over decade, you don't see it but yeah. And in her past projects where amongst others the Google Summer of Code and she was the creator of Google code‑in, right now she's living a happy life as aen expat in Amsterdam, of course she loves Berlin even better.


That's completely true and I hope to be moving join all of you very soon. Obvious gliffen the round of applause Diana needs no introduction whatsoever but to recap she's a past organizer for eurucamp, a past organizer of the Rails Girls per Lynn workshop, and she's also a member of the board of Ruby Berlin so this year for the conference she decided to take a break and to "just" give a talk. Which is probably just a little bit scarier.


Not at all. No not at all.


So why empathy matters ... first of all it is important that we actually definem pathy. Empathy is the process of actually being able to feel internally what another person is feeling. And this is just distinguish empathy from sympathy whereas sympathy is the able to feel something on another person's behalf like I regret that your laptop broke. But it's not the same as feeling that same moment of terror when you realize that the keynote as just decided to bar of while giving the closing talk of the conference. Empathy is vital to us because it help us to be much more effective in everything we do. Empathy helps to build better products because we can understand our user's needs and they will do with software that we may have created for ourselves. It helps us to work for effectively in our teams because it helps us to understand everyone's motivations and what they need to get out of our interactions in order to be successful. And basically everything is a question of empathizing effectively because it is through empathy that we are able to create harmony. Yes, so you're feeling into the other person, but it's also about you too, right. You have to know your feelings, how do you react in different situations, and how do you understand and act differently while you are amongst the peers. You probably react differently here at this conference then you would do ‑‑ or I would did at a board meeting or talking to a customer, right. So empathy helps you to enlighten yourself and to learn natural self interest. And I think that the other important point that we'd also like to make too that we're going to talk a lot in this talk about the value of exercising empathy in terms of how it's received by other people. But it's also very much about you, the individual. By practicing empathy you're going to be a better negotiator, you're going to be able to get things done more effectively because people like work with people who know have their best interest at heart, much more than they like to work with people who maybe not so much with that. So getting started in our empathy process ‑‑ empathy is actually a choice. And the two studies that I'll reference on this slide are document in the a New York times article from July 10th 2015 called believe it or not "empathy is actual lay choice" so it's very easy to find. So two of the studies that stood out in this article to me was one, individuals will frequently chose to avoid situations in which they think they they will be forced to have an 'em pathetic reaction.  ‑‑ empathy reaction. So choosing not to visit a country as a tourist where you know you will encounter high rates of poverty because this will cause you to feel bad and uncomfortable. So that's a little bit of a bummer, but, again it demonstrates to us that empathy is a choice. It is something that we can chose to do. And when we understand that empathy is a choice and the value of it we're much more likely therefore to exercise empathy. Another study found that folks who were primed with the idea that empathy was a choice, that it was something that they could cultivate, that it was accessible to them were much more effectively able to feel empathy and often sought out the opportunity to do so. In the specific case the researchers were determining if people who were taught that empathy was a learned skill would be more willing to think about and empathize with the experience of folks who were raised with others than their own. Empathy is a choice and it is your choice. And hopefully today we will convince you that is a choice that you want the make. Yeah. You were talking about empathy as a choice, so as surprising as it is it is nothing that you're born with. You're born with maybe a bit of empathy but it comes through socialization. Through your parents, through interacting with other people. And for that, you have to be reflective. How do ‑‑ how could I be reflective what is that?  It's actually thinking about how you react ‑‑ what I sad earlier how do I react. So take your time every day and take care of yourself of your mental health of your health itself and for being a better empathizer to increase your empathy take the time write down different situations that you were in and write down how did I react there?  What did I feel?  How did the other person react?  What did I do?  And over time of days, weeks, months you will find a certain pattern of yourself who you are and how you react in certain situations, you can improve yourself when you are in other situations that is similar to one that you were two weeks before and you wrote down I should have done this and that differently.  I should have done this and that like this. Then you can just think, oh, I had this two weeks ago and now I try something different. And let's see how the outcome is then there. Right. And ask questions. Learn how other people see things. Widen, bauden your own world, your own bubble that you're in.  ‑‑ broaden your own world, your own bubble that you're in. Empathy is often built out through adversity, if you're trying very hard to learn, to understand why something is very hard to learn that seems to be like this for somebody else. Right.  I have a ‑‑ I have a little bit of an example last year we had a speaker here Austin, he is blind since birth ‑‑ and he found this App for his iPhone that can show him the colors, or that can tell him the colors of things, he was so excited about it. He downloaded the App, opened the App and he tried it out, and all it says was black. Black, black, and he was like that cannot be right, something is ‑‑ something is not right. And then he was trying to step out of the box and think out of his bubble and think how seeing people might solve this problem. And at one point he thought, oh, wait, colors maybe only seen with light. So he went and switched on the light and used the App and suddenly it was yellow, purple, pink, blue. There we go. Step out of your comfort zone, step out of your box, out of your bubble, however you want to say to that and there you go you will eventually find a different answer. So getting into our skills building portion of this presentation, one of the ways that you can begin to cultivate empathy is through the practice of active listening. So active listening is the process of engaging in dialogue with another individual or with a group and when someone has spoken to take the opportunity before replying to first mirror what they have intake to them so summarize it in your own words and then add your commentary at the end. So for example wow! I'm really nervous. I'm not great at public speaking so I'm really excited that we're giving the closing talk at eurucamp today but I'm a little freaked out.


Well Leslie I can imagine that you're really really excited about being here and that you're a bit nervous about being here but ‑‑ about giving the talk, I'm a bit ... but that's no problem at all, I know that you're great, I saw a lot of talks and, well, if you're nervous now that means that you're prepared, you're thinking everything through, so you will be awesome.


Thank you for this wonderful demo. So the practice of active listening is a key component in non‑violent communication. And the reason for the creation of the practice of non‑violent communication is to assist us to overcome all the way in which we are socialized or cull hurlly taught to just step over compassion for other people. (Culturally) it is a natural human tendency to practice selective hearing, to only hear what we want to hear or to quote one of my favorite movies, to just stand there not listening waiting for our turn to talk. So instead of doing that, if we actually slow ourselves down and take the time to mirror what the other person has said to us, we not only are able to absorb what they're saying to internalize it, to feel it, we're also giving them the opportunity to correct us, maybe we didn't really understand what they had to say. And then they can give us the opportunity to come to better understanding by saying, actually that's not what I meant at all here is what I meant. Skill building exercise number two because this one's Funsie's read fiction. This is one of my favorite exercises to do regardless of empathy. So a recent journal published in the Plas journal, I should know how to expand that acronym, it's in the footnotes, it's a journal of open science. A bunch of researchers discovered the act of reading fiction helps to create empathy within the reader. And it is through process called emotional transportation. The idea that you are able to put yourself into the position of the characters within the story. To feel what it is of that they feel through the process of reading and imagining the story taking place. And for those of you who may feel like it's a little weird to go through thought exercises thinking like, what would Diana feel in this situation?  How would she react?  Admittedly it's a little weird she's my friend, I don't want to be like hey, can I get into your brain it's nice in
going through the process of emotion mall transportation is the first step of doing thought exercises. It's a comfortable, familiar way to exercise empathy with the characters from the page and we can apply that to the process of real life.


I'm a bit curious right now how many of you do read fiction?  All right, keep your hands up, how many of you have been very, very sad when the bookend?  All right, almost all the hands stayed up. Yeah, I've got the same because you're absorbed in a new world with new characters with new people with new, I don't know aliens whatever unicorns, love it. And then suddenly the world is just poof away.


And it's that sad thans tells us that we have experienced the act of emotional transportation otherwise it would not be impactful to us emotionally that the story has concluded.


Speaking of curious embrace your inner child. Be curious. Ask questions. By asking questions that also implies a void assumptions. Again, a talk from last year.  I don't remember everything off the top, but I remember a especially one slide when I was ‑‑ I had to restrain myself not to jump up and say hell yeah! Because it said assumptions are evil.


Thank you Laura.


Thank you Laura. Laura is over there, thank you Laura for that. (Applause) and I well give you a little example of that. For example I'm standing here minding my own business and I can see a person over there or over there, I don't know doesn't matter. Looking like this all the time ... in my direction ... and I'm confused because the person looks at me like ‑‑ I'm getting nervous and I now can assume oh my God I did something wrong maybe I have the wrong clothes maybe the person doesn't like black, I don't know. And I could go go in my head and I can build a whole castle of assumptions and they will build and build and build, what I also could do is just like walking over, sorry.  I reask nice that you're looking a bit worried or angry at me, did I do something wrong or am I under the wrong impression?  I'm a bit confused right now.


Oh, my God, no, I'm so soreiry, I was deep in thought I have ‑‑ I'm so sorry I'm thought with a problem, I didn't really look it was just that my head was in this direction. Right. Ask questions. Questions are our friends. And our best friends ever are open questions. Whom of you do know the difference between open and closed questions?  Good. Very good. For those who didn't raise their arm open questions are "W" questions, open questions are questions that open the people. Where, when, what, why. Where do you go to holiday?  Oh the bahamas ‑‑ I read this magazine what will you do there?  Oh I wasn't thinking blah, blah, blah blah whether so these are the open questions .
then there are the closed questions when you near a hurry. Do you want pizza for dinner ?
yes. Do you like spinach?  No ‑‑ so open questions are mainly questions that can be answered with yes, no or Aaaaaee. So closed questions are this. And so just to recap open questions are our friends.


So now we're going to shift into talking more about how we can have effective organizations that help us to cultivate empathy. Obviously organizations are made up of individuals, but in the way we create the culture of our organizations, our teams and our projects, we can encourage the cultivation of empathy. So I think first and foremost very important is to be explicit about our values and to be inclusive in creating those values.  I had another example but I through it away moodily when I saw the signs on the bathroom doors here which are so cool I think I might steel one and send it to a friend of mine I know needs it. So the signs that say if you are concerned about the gender of a person who is entering the bathroom, take these steps, don't worry about it, they know better than you. That is phenomenal, it is explicit, trance phobia is not okay here and it is inclusive. Trans phobia is not okay here, that is phenomenal. And it's extremely important to be explicit about your values because otherwise people make assumptions about what is important to the organization, to the group, to the team. You need to be very clear what your values are. And I know this is going to sound corny because let's Faye it most of the time mission statements are crap (Let's face it most time mission statements are crap) this is not a mission statement saying we will make the best chocolate chip cookies by using the only freshest ingreedn'ts .
that means nothing. A good and useful example if folks look at thought work's web site they have a page where they talk about the pillars of their company, the things that the company values one of these is social justice, they talk about how one of the objectives of their organization, the pillars around which they build their company will be to do work that creates more justice in the world for those who are underrepresented or those who have fewer resources, those who have ‑‑ are less able to help themselves. And by making this an explicit statement what they're doing is they're not only telling the entire world, this is what is important to us, they're also giving their employees, right, the knowledge that this is one of the way in which we will conduct ourself. This is how we will conduct business, this is an expectation for each of us as we go throughout our daily affairs at work that we are to do work that is trans formative in the world and makes the world a better place for everyone. (Transformative) and another point to that is can be seen especially in the tech seen is globalization. Globalization means that people come into a company from very, very different backgrounds. They grew up in very different countries under very different political backgrounds and stuff like this and things that are totally normal for you in your daily life or for you or for you might not be normal for the new person that comes into your company, into your team, into your project. And this comes to assumptions.


Right?


Absolutely another thing that is useful to understand as well when creating organization, creating culture for those organizations, this is where leaders come in and play a very important ‑‑ an impactful role, leading by example. One great instance of this is my friend era joy backer who has been Bloging frequently about diversity in the technology industry. She wrote an article called the other side of diversity, about her consideration of ending her employment with Google, which is where I met her. And she realized that she needed to move on, but she wanted to go to a workplace where the work she did mattered and she knew the people that she worked with valued the same things that she did. And she talked about reading Twitter and seeing all of the various news about the protests going on in Ferguson, Missouri after the murder of a young blackman by officers. And she noted a deafening silence from most of the people that she knew who work in the the technology industry. She noticed a deafening silence from leaders in the technology industry. No one seemed to care, this was not their problem, this took place far away by people of a different socioeconomic class and a different race. Not my issue, I don't care. But by contrast the CEO of Slack a brand new "unicorn" start up. With a valuation of over billion dollars ‑‑ you all don't have "B" ‑‑ thank you. Valued at over billion dollars was tweeting his concern for the protesters and that he hoped that they would be safe in their pursuit of social justice. And by reading this she realized that this was the company that she wanted to work for. That this was the place that she should bring her talents to bear she's now one of their release engineers, having worked becider capabilities any company is very lucky to have her. Be explicit about your value, inclusive and make sure everyone is on the same page about what is important for all of you to be successful. Oh, my God we have hippies.


They're cute (Hppos)


So Hippos are cute but these ones are grumpy they are letting you know to discourage Hipponig ‑‑ highest paid person's opinion is the only one that matters. (Laughing) yes, so only the one on the level that begins with a C matters. C E O, C T O, C‑whatever so make sure that every voice is heard in your company, in your project, in wherever you are, wherever you gather people that have to decide something. I tell you a little story because that makes it more clear. In any day‑to‑day life I organize IT conferences.  I organize them with a team that is very good, like when we communicate it's like a circle of communication so we're circling around all the ideas that we have and we are playing with them, we do brainstorming sessions and stuff like that. And for one conference that came a new person in and this new person got grumpier and grumpier all the time with every e‑mail and I was a little bit like what's going on there. And at one point I was, I don't understand your e‑mails anymore, they don't seem very constructive, what's going on there?  And this person was just like, you're not a good manager. You cannot even make simple decisions. You cannot ‑‑ you cannot decide if we want this speaker or not why do we always ‑‑ why do you always have to ask us?  I was like, Who that is interesting. Then I thought okay this person came from a big company where the managers said you have do this, you have to did this, you have do this, you have to be finished with this by the end of the week and stuff like this. Right. And I said, okay, we're working here differently, we're working as a team, yes, I am the manager of this project so I have to make sure that everyone is on track and that we are at the point where we have to be finished that we are finished and everything is said, but on the road everybody has a voice.  I don't know everything, I'm not going to all the conferences in the world.  I don't know every speaker in the world. But you might know him, or you might know him.  ‑‑ at one point I read an abstract that was so perfect and I thought oh, my God, I want to have this person at a conference because this just looks perfect for this or that or that. And then I brought this in this abstract in and say look at this abstract it's amazing it would fit there and then there were three voices, three that said nope, nope, nope. You know what they saw this speaker at another conference, actually at two other conferences. He was mean, he was racists, and he was very very not nice. So I said, oh my God I'm so happy that I asked you. We will not have this speaker at our conferences, definitely not. So if you are the I pippo, if you are ‑‑ Hippo, if you are the C level, make sure to be inclusive. To let everybody have a word. At the end it is your decision, of course, but you don't know everything, I know ‑‑ sometimes we think ‑‑ we tend to think that we know everything, but, to be honest, no we don't. And that's why asking questions and talking to people is very important.


So, again important for all individuals within an organization, but a cultural value to promote, do not flip the Bozo bit. For people who are not familiar with the phrase don't flip the Bozo bit, this is actually from a book written in 1995 by a gentleman named Jim McCarthy called dynamics of software development. The idea of flipping the Bozo bit is that once someone says something or does something that you think is stupid every statement that that person makes from then on is wrong. Everything they say is put on/ignore and you have no value to provide to me, to the company, I just don't have to listen to a word you say. Mind just one time. One time they did wrong. So flipping the Bozo bit is not useful for a wide variety of reasons, but let's start with the basics, if there is someone in your organization and you have decided they're never going to say anything useful you have also decided they're never going to be successful. At that point you bet eroff not having them there, they should go someplace where they can be successful and contribute to the success of the organization and you can have another human being there doing work that you will actually appreciate.  I suggest that the problem with you, mind, not with this individual, in this scenario. There's also the point ‑‑ it's silly, right this is ridiculous, we're all human beings, we all make mistakes, there is no reason to decide that one silly mistake defines a person forever, right. And if you make the decision to flip the Bozo bit you are cutting yourself off from the opportunity to ever learn something from that person again. Right. That is not wise. And finally, organizations where this is common practice are encouraging a lack of innovation and stagnation and a will be of creativity. Because if people are afraid that if they say the wrong thing that they will be judged, that they will no longer be respected, what will they do?  They will close to say something. They will chose to not contribute.  ‑‑ they will chose to say nothing, chose not to contribute, they will chose to not engage because they are afraid.


So being inclusive also means make a truly okay to fail. At the end, yes, we are all human. Humans make mistakes. Surprise. And through mistakes, mistakes are actually good because through mistakes we learn. We learn that something is not good. It's not good to leave your trash ton floor because another person might trip. So you can actually rewind what you did and do something else instead. And also do not oh press people for making mistakes. It happens all the time. And when you find out that a person made a mistake or the person comes to you and says, I'm sorry, I made a mistake, talk to them immediately because otherwise it will probably ‑‑ it's like the assumption, the assumption thing that goes in your head and it's building up, building up, that is the same with problems when you have a problem and you're not talking about Itaú BBA will probably grow bigger and bigger and bigger. And at one point this whole Vulcon of problem and you will explode and you will sometimes say things that are not nice, that are not inclusive and might burn the brings that we are trying to build up.


So, my friends our talk is at an end to just quickly recap what we discussed today. Empathy is a choice and a learnable skill. And we can cultivate it through active listening, reading fiction, how's that for homework, something you want to do any way. Getting to know yourself and being more self aware, practicing curiosity, and avoiding assumptions. And within our organizations we can be explicit and inclusive in our value systems, avoid Hippoing they belong in the wile not the office not flipping the Bozo bit and ensure that it is truly okay to fail.


And to quote or to conclude our talk with a quote from Romey always be kind for everyone is fighting a hard battle that you will not see (Rumi) thank you very much. (Applause)


We think you all are lovely too.


What a fitting closing talk to this conference, that was amazing. And it really shows that of a very innovative format as well, the whole is greater than the sum of the parts, two speakers together are better than individual (Oooohh) so yeah we can take a few questions, if there any.


I don't know, is there a girl equivalent to Bromance ‑‑ sorry, we have the questions. That's us. Any way, question.


Not really a question but I'd like to add to that because I absolutely agree with what you have said. Thank you for everything you've said. But whether you follow this advice or not may well decide about the future of your project or company.  I spent a couple of months in a company where the C‑person did quite the opposite. And bullied people never fore gave or forgot the slightest mistake and a lot of really good knowledgeable people left. Left the company.


Yes. That's what happens. That's what hatches people are leaving unhealthy environments.


I've actually talked on this topic a few times ‑‑ oh, it's for video.  ‑‑ I've actually talked on this topic a few times so what can you do to change an organization where people are bullying or Hippoing or generally not being 'em pathetic and I have wracked my brain for the last year and the answer is always the same. Prepare your CV and tell your friends that you're leaving.


Questions? ‑‑ there's also ice cream ‑‑ oh, no we're out of ice cream.


What do you think, for you personally, has been the most challenging or exciting thing that you have shared with us here?


Oh, wow! Okay, I have something about the learning to be empathy thing, it's a process. Do not expect you to wake up tomorrow like ‑‑ today I will be 'em 'em pa thinkic. We are all ‑‑ Empathetic. We're all human, we all have bad days. At some point, I tried so hard and so hard and at one point I just flipped out because somebody is pushing my button and I'm just like oh, my God I told you this like ten times! Probably not the best answer.


I think for me the most profound thing I have learned is the process of active listening because I speak really really fast.  I have a tendency to interrupt, which is not awesome, and I'm constantly working on it. And I also think I know what people are talking about because I'm super smart, and the answer to that question is no, no, no, no. So actually getting trained in active listening and being able to go through that process ‑‑ because first it sounds silly, yeah, yeah, you're listening, why are you summarizing stuff, this is annoying, but realizing how much closer it brings you to someone because human communication is flawed and difficult and we think it's easy because we can talk so ... clearly communication is easy, there are words coming out of my mouth right now. And it's not, right. And active listening teaches us that it's not easy and that it is a skill that we acquire and something that we have to work on every day to be effective.


If you never practice it or the first few times that you will practice Itaú BBA will feel totally silly.


You will feel like an idiot, and it's okay, just push through. It will all get better.


More?  ...


Anyone else?


I'm just really interested because I hear these concepts in Buddhism a lot as well ‑‑ ...


Oh, yeah ‑‑


Is that an area that you look for inspiration or what are the main or other areas that you look at.


I thought this was about our religious failuation I was about to say ... ‑‑ affiliation ‑‑ dirt worshiping tree hugging pagan. So let's see, I take inspiration from literature written ‑‑ from folks in various walks of faith.  I read a lot of psychology journals, I read a lot of fiction and I don't know, I think I just have learned partially to be a more 'em pathetic person because sometimes things were really tough for me, when itches younger I was bullied in school, it taught me to not want anyone to feel as bad as I feel right now. It helped me to be a more 'em pathetic person, to value bringing joy and love to someone's life instead of pain and not ever wanting to be the person who was the source of pain for another person because I knew how bad it feels myself.


What she said.


We were separated at birth, don't tell anyone. Okay, thank you. Thank you very much (Applause)


Okay, that brings us to our closing announcements and remarks, so we do have a few announcements to make. One is that there's been some great conversations happening here allot the conference that have started here. And they can continue on Slack somebody created a slack for the conference basically so you can join it by going to this URL, put in your e‑mail address and you'll get an invitation Ruby‑berlin.herokuapp.com. Somebody said there were three new Ruby learners groups on the Rorganize dolt It web site as well. That's amazing. ((Applause) so three new groups that'll have to come up with names and get Onesies (Laughing) all of this stuff. If you're interested in joining one of those groups, the sight is Rorbanize.it so you can check that out ‑‑ Roragnize ‑‑ this conference started with Joanne's opening keynote Friday night it was about how there was a lack of awe in technology and how we sort of needed to get into this state of



to be our best selves after three days of the conference how many would say they in a state of awe, feel awe after this conference. Yeah, awesome right, literally awesome. So let's just take a moment ‑‑ let's just take a moment to sit with that and enjoy that. Because we're at the end, so we move from awe ... Awwwwwwww the conference is over. We have a number of people we want to thank. It was a spectacular experience, I can't think of a better conference I've ever been to, I feel honored to be part of it. It wouldn't happen with it all the people that we're about to name, Floor you can take it away. Let's everyone get your hands ready for big applause you got to get good hands, is that a thing, that's in the a thing.


That sounds very wrong. Thank you to the sponsors let's start with our goal sponsors, thank for Travis CI for the coffee and elastic for ice cream (Applause) silver sponsors of, our silver sponsors another round of applause, please. (Applause) our nickel sponsors (Applause) all the wonderful people buying supporter tickets and all the wonderful companies buying supporter tickets. (Applause) of thank you to Confreaks (Applause)


Thank again Kimberly. Thank you!


Now the chaos bits start thank you to all the speakers can you all join us on stage. Also the lightening talk speakers. Let's not forget Joel of from yesterday the beautiful performance, he's sitting in the back. (Applause) all the team members please join us on stage. They have very big shoes to fill, unintended so big thank you to the alumni team as well. And thank you all for coming on that note we really like to get your feedback, we're going to send out forms and everything you can tell us what you thought about the conference what we can do better for next year. Also for next year we're also looking for new organizers, there's a pretty big team ‑‑ but ‑‑


Sorry, sorry.


Spoiler


Spoilers.


We have a special announcement from Bodo. Maybe you recognize that we didn't have Amazon on the sponsor slides, they surprised us on Tuesday with a contract that we could not sign, it's not enough time to get a lawyer to check that and sign that contract, so we removed them from the sponsorship. You will have them on the bags because we couldn't remove them there, but when you're wondering why we didn't have Amazon here. That's the reason for that. And now, Fay.  ‑‑ should I?  Okay. So ... to next year we will not have a eurucamp next year we're going to do a little pause of eurucamp because we are ‑‑ the team was awesome, we worked our asses off, but we are so exhausted that we can't do it next year, again. So we will do a pause on that thing. But ... we are interested in doing something small next year. So if you have ideas or want to do something contact us. We have resources, contacts, we have everything you need to create something small, something nice, it doesn't have to be this big, I know that this really exhausting to do this so if you do something small we're happy to help. So that's ‑‑ go there, write us an e‑mail ‑‑ talk to them. Talk to them Dijana or Florian ‑‑ or anyone in the pink shirt or me. Okay. Anything else to say?  Do you want something?


As I was the only one from the old team who wasn't on stage this weekend on Friday I'd also like to thank you to this year's team how well they took over this event and how much I enjoyed this being an attendee for the first time. And as Bodo said as one of the chair ‑‑ Dijana being the first one and greatest ‑‑


What no, we're a team, all voices matter.


It's very important to us that it's not like we're going to stop working, we're going to try out new things next year and we'd be happy to talk about any of your ideas to do something. So ... now to close we have to thank our MCs, you did a really really awesome job. Okay a couple more announcements just to wrap up. So there's an after party it's at Prada garden a beer garden in Berlin. As you can see from the little green line, it's a massive berganderren, I think it's the oldest and biggest in Berlin, great place to continue these conversations and have something to eat, it's not sponsored, so bring your money. But ... ‑‑ it's cache only, so bring your money, your real money, no plastic money. Okay, and if you need help getting there from here we've made a great map for you. Nico did an amazing job designing all of these slides and this map in particular. So you are here and what you need to do is buy tick that cost 3.30 euros, validate it, remember to do that, you want to get the S 7 going towards Berlin, if it says Potsdam don't take that one go to other side, get off at Alexanderplatz take the UT a fewment stops north get off at Pankow,it's 45‑hour p train ride. We can continue the conversation there, hope to see you all there, that's it, thanks so much for coming to eurucamp it was amazing, what a great conference. (Applause) (Come pleated at 6:00 p.m.)


We're going to get a team photo, the world's largest team photo and I need someone to take it.
